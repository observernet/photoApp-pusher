
Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

Open file: PushProcessV2.pc
     1  /*****************************************************
     2   * 프로그램ID       : PushProcessV2.pc
     3   * 프로그램명        : 큐를 읽어서 메세지는 푸쉬한다 (Ver2)
     4   *****************************************************/
     5  
Open file: /usr/include/stdio.h
     1  /* Define ISO C stdio on top of C++ iostreams.
     2     Copyright (C) 1991, 1994-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   *      ISO C99 Standard: 7.19 Input/output     <stdio.h>
    21   */
    22  
    23  #ifndef _STDIO_H
    24  
    25  #if !defined __need_FILE && !defined __need___FILE
    26  # define _STDIO_H       1
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.
    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__
   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */
   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif
   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
Open file: /usr/include/stdc-predef.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _STDC_PREDEF_H
    19  #define _STDC_PREDEF_H  1
    20  
    21  /* This header is separate from features.h so that the compiler can
    22     include it implicitly at the start of every compilation.  It must
    23     not itself include <features.h> or any other header that includes
    24     <features.h> because the implicit include comes before any feature
    25     test macros that may be defined in a source file before it first
    26     explicitly includes a system header.  GCC knows the name of this
    27     header in order to preinclude it.  */
    28  
    29  /* We do support the IEC 559 math functionality, real and complex.  */
    30  #define __STDC_IEC_559__                1
    31  #define __STDC_IEC_559_COMPLEX__        1
    32  
    33  /* wchar_t uses ISO/IEC 10646 (2nd ed., published 2011-03-15) /
    34     Unicode 6.0.  */
    35  #define __STDC_ISO_10646__              201103L
    36  
    37  /* We do not support C11 <threads.h>.  */
    38  #define __STDC_NO_THREADS__             1
    39  
    40  #endif
Close file: /usr/include/stdc-predef.h
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   358  #define __GLIBC__       2
   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
Open file: /usr/include/sys/cdefs.h
     1  /* Copyright (C) 1992-2002, 2004, 2005, 2006, 2007, 2009, 2011, 2012
     2     Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _SYS_CDEFS_H
    20  #define _SYS_CDEFS_H    1
    21  
    22  /* We are almost always included from features.h. */
    23  #ifndef _FEATURES_H
    24  # include <features.h>
    25  #endif
    26  
    27  /* The GNU libc does not support any K&R compilers or the traditional m
        ode
    28     of ISO C compilers anymore.  Check for some of the combinations not
    29     anymore supported.  */
    30  #if defined __GNUC__ && !defined __STDC__
    31  # error "You need a ISO C conforming compiler to use the glibc headers"
    32  #endif
    33  
    34  /* Some user header file might have defined this before.  */
    35  #undef  __P
    36  #undef  __PMT
    37  
    38  #ifdef __GNUC__
    39  
    40  /* All functions, except those with callbacks or those that
    41     synchronize memory, are leaf functions.  */
    42  # if __GNUC_PREREQ (4, 6) && !defined _LIBC
    43  #  define __LEAF , __leaf__
    44  #  define __LEAF_ATTR __attribute__ ((__leaf__))
    45  # else
    46  #  define __LEAF
    47  #  define __LEAF_ATTR
    48  # endif
    49  
    50  /* GCC can always grok prototypes.  For C++ programs we add throw()
    51     to help it optimize the function calls.  But this works only with
    52     gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
    53     as non-throwing using a function attribute since programs can use
    54     the -fexceptions options for C code as well.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    55  # if !defined __cplusplus && __GNUC_PREREQ (3, 3)
    56  #  define __THROW       __attribute__ ((__nothrow__ __LEAF))
    57  #  define __THROWNL     __attribute__ ((__nothrow__))
    58  #  define __NTH(fct)    __attribute__ ((__nothrow__ __LEAF)) fct
    59  # else
    60  #  if defined __cplusplus && __GNUC_PREREQ (2,8)
    61  #   define __THROW      throw ()
    62  #   define __THROWNL    throw ()
    63  #   define __NTH(fct)   __LEAF_ATTR fct throw ()
    64  #  else
    65  #   define __THROW
    66  #   define __THROWNL
    67  #   define __NTH(fct)   fct
    68  #  endif
    69  # endif
    70  
    71  #else   /* Not GCC.  */
    72  
    73  # define __inline               /* No inline functions.  */
    74  
    75  # define __THROW
    76  # define __THROWNL
    77  # define __NTH(fct)     fct
    78  
    79  #endif  /* GCC.  */
    80  
    81  /* These two macros are not used in glibc anymore.  They are kept here
    82     only because some other projects expect the macros to be defined.  *
        /
    83  #define __P(args)       args
    84  #define __PMT(args)     args
    85  
    86  /* For these things, GCC behaves the ANSI way normally,
    87     and the non-ANSI way under -traditional.  */
    88  
    89  #define __CONCAT(x,y)   x ## y
    90  #define __STRING(x)     #x
    91  
    92  /* This is not a typedef so `const __ptr_t' does the right thing.  */
    93  #define __ptr_t void *
    94  #define __long_double_t  long double
    95  
    96  
    97  /* C++ needs to know that types and declarations are C, not C++.  */
    98  #ifdef  __cplusplus
    99  # define __BEGIN_DECLS  extern "C" {
   100  # define __END_DECLS    }
   101  #else
   102  # define __BEGIN_DECLS
   103  # define __END_DECLS
   104  #endif
   105  
   106  
   107  /* The standard library needs the functions from the ISO C90 standard
   108     in the std namespace.  At the same time we want to be safe for
   109     future changes and we include the ISO C99 code in the non-standard
   110     namespace __c99.  The C++ wrapper header take case of adding the
   111     definitions to the global namespace.  */
   112  #if defined __cplusplus && defined _GLIBCPP_USE_NAMESPACES
   113  # define __BEGIN_NAMESPACE_STD  namespace std {
   114  # define __END_NAMESPACE_STD    }
   115  # define __USING_NAMESPACE_STD(name) using std::name;
   116  # define __BEGIN_NAMESPACE_C99  namespace __c99 {
   117  # define __END_NAMESPACE_C99    }
   118  # define __USING_NAMESPACE_C99(name) using __c99::name;
   119  #else
   120  /* For compatibility we do not add the declarations into any
   121     namespace.  They will end up in the global namespace which is what
   122     old code expects.  */
   123  # define __BEGIN_NAMESPACE_STD
   124  # define __END_NAMESPACE_STD
   125  # define __USING_NAMESPACE_STD(name)
   126  # define __BEGIN_NAMESPACE_C99
   127  # define __END_NAMESPACE_C99
   128  # define __USING_NAMESPACE_C99(name)

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   129  #endif
   130  
   131  
   132  /* Support for bounded pointers.  */
   133  #ifndef __BOUNDED_POINTERS__
   134  # define __bounded      /* nothing */
   135  # define __unbounded    /* nothing */
   136  # define __ptrvalue     /* nothing */
   137  #endif
   138  
   139  
   140  /* Fortify support.  */
   141  #define __bos(ptr) __builtin_object_size (ptr, __USE_FORTIFY_LEVEL > 1)
   142  #define __bos0(ptr) __builtin_object_size (ptr, 0)
   143  
   144  #if __GNUC_PREREQ (4,3)
   145  # define __warndecl(name, msg) \
   146    extern void name (void) __attribute__((__warning__ (msg)))
   147  # define __warnattr(msg) __attribute__((__warning__ (msg)))
   148  # define __errordecl(name, msg) \
   149    extern void name (void) __attribute__((__error__ (msg)))
   150  #else
   151  # define __warndecl(name, msg) extern void name (void)
   152  # define __warnattr(msg)
   153  # define __errordecl(name, msg) extern void name (void)
   154  #endif
   155  
   156  /* Support for flexible arrays.  */
   157  #if __GNUC_PREREQ (2,97)
   158  /* GCC 2.97 supports C99 flexible array members.  */
   159  # define __flexarr      []
   160  #else
   161  # ifdef __GNUC__
   162  #  define __flexarr     [0]
   163  # else
   164  #  if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
   165  #   define __flexarr    []
   166  #  else
   167  /* Some other non-C99 compiler.  Approximate with [1].  */
   168  #   define __flexarr    [1]
   169  #  endif
   170  # endif
   171  #endif
   172  
   173  
   174  /* __asm__ ("xyz") is used throughout the headers to rename functions
   175     at the assembly language level.  This is wrapped by the __REDIRECT
   176     macro, in order to support compilers that can do this some other
   177     way.  When compilers don't support asm-names at all, we have to do
   178     preprocessor tricks instead (which don't have exactly the right
   179     semantics, but it's the best we can do).
   180  
   181     Example:
   182     int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid); */
   183  
   184  #if defined __GNUC__ && __GNUC__ >= 2
   185  
   186  # define __REDIRECT(name, proto, alias) name proto __asm__ (__ASMNAME (
        #alias))
   187  # ifdef __cplusplus
   188  #  define __REDIRECT_NTH(name, proto, alias) \
   189       name proto __THROW __asm__ (__ASMNAME (#alias))
   190  #  define __REDIRECT_NTHNL(name, proto, alias) \
   191       name proto __THROWNL __asm__ (__ASMNAME (#alias))
   192  # else
   193  #  define __REDIRECT_NTH(name, proto, alias) \
   194       name proto __asm__ (__ASMNAME (#alias)) __THROW
   195  #  define __REDIRECT_NTHNL(name, proto, alias) \
   196       name proto __asm__ (__ASMNAME (#alias)) __THROWNL
   197  # endif
   198  # define __ASMNAME(cname)  __ASMNAME2 (__USER_LABEL_PREFIX__, cname)
   199  # define __ASMNAME2(prefix, cname) __STRING (prefix) cname
   200  
   201  /*
   202  #elif __SOME_OTHER_COMPILER__

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   203  
   204  # define __REDIRECT(name, proto, alias) name proto; \
   205          _Pragma("let " #name " = " #alias)
   206  */
   207  #endif
   208  
   209  /* GCC has various useful declarations that can be made with the
   210     `__attribute__' syntax.  All of the ways we use this do fine if
   211     they are omitted for compilers that don't understand it. */
   212  #if !defined __GNUC__ || __GNUC__ < 2
   213  # define __attribute__(xyz)     /* Ignore */
   214  #endif
   215  
   216  /* At some point during the gcc 2.96 development the `malloc' attribute
   217     for functions was introduced.  We don't want to use it unconditional
        ly
   218     (although this would be possible) since it generates warnings.  */
   219  #if __GNUC_PREREQ (2,96)
   220  # define __attribute_malloc__ __attribute__ ((__malloc__))
   221  #else
   222  # define __attribute_malloc__ /* Ignore */
   223  #endif
   224  
   225  /* At some point during the gcc 2.96 development the `pure' attribute
   226     for functions was introduced.  We don't want to use it unconditional
        ly
   227     (although this would be possible) since it generates warnings.  */
   228  #if __GNUC_PREREQ (2,96)
   229  # define __attribute_pure__ __attribute__ ((__pure__))
   230  #else
   231  # define __attribute_pure__ /* Ignore */
   232  #endif
   233  
   234  /* This declaration tells the compiler that the value is constant.  */
   235  #if __GNUC_PREREQ (2,5)
   236  # define __attribute_const__ __attribute__ ((__const__))
   237  #else
   238  # define __attribute_const__ /* Ignore */
   239  #endif
   240  
   241  /* At some point during the gcc 3.1 development the `used' attribute
   242     for functions was introduced.  We don't want to use it unconditional
        ly
   243     (although this would be possible) since it generates warnings.  */
   244  #if __GNUC_PREREQ (3,1)
   245  # define __attribute_used__ __attribute__ ((__used__))
   246  # define __attribute_noinline__ __attribute__ ((__noinline__))
   247  #else
   248  # define __attribute_used__ __attribute__ ((__unused__))
   249  # define __attribute_noinline__ /* Ignore */
   250  #endif
   251  
   252  /* gcc allows marking deprecated functions.  */
   253  #if __GNUC_PREREQ (3,2)
   254  # define __attribute_deprecated__ __attribute__ ((__deprecated__))
   255  #else
   256  # define __attribute_deprecated__ /* Ignore */
   257  #endif
   258  
   259  /* At some point during the gcc 2.8 development the `format_arg' attrib
        ute
   260     for functions was introduced.  We don't want to use it unconditional
        ly
   261     (although this would be possible) since it generates warnings.
   262     If several `format_arg' attributes are given for the same function, 
        in
   263     gcc-3.0 and older, all but the last one are ignored.  In newer gccs,
   264     all designated arguments are considered.  */
   265  #if __GNUC_PREREQ (2,8)
   266  # define __attribute_format_arg__(x) __attribute__ ((__format_arg__ (x)
        ))
   267  #else
   268  # define __attribute_format_arg__(x) /* Ignore */
   269  #endif
   270  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   271  /* At some point during the gcc 2.97 development the `strfmon' format
   272     attribute for functions was introduced.  We don't want to use it
   273     unconditionally (although this would be possible) since it
   274     generates warnings.  */
   275  #if __GNUC_PREREQ (2,97)
   276  # define __attribute_format_strfmon__(a,b) \
   277    __attribute__ ((__format__ (__strfmon__, a, b)))
   278  #else
   279  # define __attribute_format_strfmon__(a,b) /* Ignore */
   280  #endif
   281  
   282  /* The nonull function attribute allows to mark pointer parameters whic
        h
   283     must not be NULL.  */
   284  #if __GNUC_PREREQ (3,3)
   285  # define __nonnull(params) __attribute__ ((__nonnull__ params))
   286  #else
   287  # define __nonnull(params)
   288  #endif
   289  
   290  /* If fortification mode, we warn about unused results of certain
   291     function calls which can lead to problems.  */
   292  #if __GNUC_PREREQ (3,4)
   293  # define __attribute_warn_unused_result__ \
   294     __attribute__ ((__warn_unused_result__))
   295  # if __USE_FORTIFY_LEVEL > 0
   296  #  define __wur __attribute_warn_unused_result__
   297  # endif
   298  #else
   299  # define __attribute_warn_unused_result__ /* empty */
   300  #endif
   301  #ifndef __wur
   302  # define __wur /* Ignore */
   303  #endif
   304  
   305  /* Forces a function to be always inlined.  */
   306  #if __GNUC_PREREQ (3,2)
   307  # define __always_inline __inline __attribute__ ((__always_inline__))
   308  #else
   309  # define __always_inline __inline
   310  #endif
   311  
   312  /* Associate error messages with the source location of the call site r
        ather
   313     than with the source location inside the function.  */
   314  #if __GNUC_PREREQ (4,3)
   315  # define __attribute_artificial__ __attribute__ ((__artificial__))
   316  #else
   317  # define __attribute_artificial__ /* Ignore */
   318  #endif
   319  
   320  /* GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
   321     inline semantics, unless -fgnu89-inline is used.  Using __GNUC_STDC_
        INLINE__
   322     or __GNUC_GNU_INLINE is not a good enough check for gcc because gcc 
        versions
   323     older than 4.3 may define these macros and still not guarantee GNU i
        nlining
   324     semantics.
   325  
   326     clang++ identifies itself as gcc-4.2, but has support for GNU inlini
        ng
   327     semantics, that can be checked fot by using the __GNUC_STDC_INLINE_ 
        and
   328     __GNUC_GNU_INLINE__ macro definitions.  */
   329  #if (!defined __cplusplus || __GNUC_PREREQ (4,3) \
   330       || (defined __clang__ && (defined __GNUC_STDC_INLINE__ \
   331                                 || defined __GNUC_GNU_INLINE__)))
   332  # if defined __GNUC_STDC_INLINE__ || defined __cplusplus
   333  #  define __extern_inline extern __inline __attribute__ ((__gnu_inline_
        _))
   334  #  define __extern_always_inline \
   335    extern __always_inline __attribute__ ((__gnu_inline__))
   336  # else
   337  #  define __extern_inline extern __inline

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   338  #  define __extern_always_inline extern __always_inline
   339  # endif
   340  #endif
   341  
   342  #ifdef __extern_always_inline
   343  # define __fortify_function __extern_always_inline __attribute_artifici
        al__
   344  #endif
   345  
   346  /* GCC 4.3 and above allow passing all anonymous arguments of an
   347     __extern_always_inline function to some other vararg function.  */
   348  #if __GNUC_PREREQ (4,3)
   349  # define __va_arg_pack() __builtin_va_arg_pack ()
   350  # define __va_arg_pack_len() __builtin_va_arg_pack_len ()
   351  #endif
   352  
   353  /* It is possible to compile containing GCC extensions even if GCC is
   354     run in pedantic mode if the uses are carefully marked using the
   355     `__extension__' keyword.  But this is not generally available before
   356     version 2.8.  */
   357  #if !__GNUC_PREREQ (2,8)
   358  # define __extension__          /* Ignore */
   359  #endif
   360  
   361  /* __restrict is known in EGCS 1.2 and above. */
   362  #if !__GNUC_PREREQ (2,92)
   363  # define __restrict     /* Ignore */
   364  #endif
   365  
   366  /* ISO C99 also allows to declare arrays as non-overlapping.  The synta
        x is
   367       array_name[restrict]
   368     GCC 3.1 supports this.  */
   369  #if __GNUC_PREREQ (3,1) && !defined __GNUG__
   370  # define __restrict_arr __restrict
   371  #else
   372  # ifdef __GNUC__
   373  #  define __restrict_arr        /* Not supported in old GCC.  */
   374  # else
   375  #  if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
   376  #   define __restrict_arr       restrict
   377  #  else
   378  /* Some other non-C99 compiler.  */
   379  #   define __restrict_arr       /* Not supported.  */
   380  #  endif
   381  # endif
   382  #endif
   383  
   384  #if __GNUC__ >= 3
   385  # define __glibc_unlikely(cond) __builtin_expect((cond), 0)
   386  # define __glibc_likely(cond) __builtin_expect((cond), 1)
   387  #else
   388  # define __glibc_unlikely(cond) (cond)
   389  # define __glibc_likely(cond) (cond)
   390  #endif
   391  
Open file: /usr/include/bits/wordsize.h
     1  /* Determine the wordsize from the preprocessor defines.  */
     2  
     3  #if defined __x86_64__ && !defined __ILP32__
     4  # define __WORDSIZE     64
     5  #else
     6  # define __WORDSIZE     32
     7  #endif
     8  
     9  #ifdef __x86_64__
    10  # define __WORDSIZE_TIME64_COMPAT32     1
    11  /* Both x86-64 and x32 use the 64-bit system call interface.  */
    12  # define __SYSCALL_WORDSIZE             64
    13  #endif
Close file: /usr/include/bits/wordsize.h
   392  #include <bits/wordsize.h>
   393  
   394  #if defined __LONG_DOUBLE_MATH_OPTIONAL && defined __NO_LONG_DOUBLE_MAT
        H

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   395  # define __LDBL_COMPAT 1
   396  # ifdef __REDIRECT
   397  #  define __LDBL_REDIR1(name, proto, alias) __REDIRECT (name, proto, al
        ias)
   398  #  define __LDBL_REDIR(name, proto) \
   399    __LDBL_REDIR1 (name, proto, __nldbl_##name)
   400  #  define __LDBL_REDIR1_NTH(name, proto, alias) __REDIRECT_NTH (name, p
        roto, alias)
   401  #  define __LDBL_REDIR_NTH(name, proto) \
   402    __LDBL_REDIR1_NTH (name, proto, __nldbl_##name)
   403  #  define __LDBL_REDIR1_DECL(name, alias) \
   404    extern __typeof (name) name __asm (__ASMNAME (#alias));
   405  #  define __LDBL_REDIR_DECL(name) \
   406    extern __typeof (name) name __asm (__ASMNAME ("__nldbl_" #name));
   407  #  define __REDIRECT_LDBL(name, proto, alias) \
   408    __LDBL_REDIR1 (name, proto, __nldbl_##alias)
   409  #  define __REDIRECT_NTH_LDBL(name, proto, alias) \
   410    __LDBL_REDIR1_NTH (name, proto, __nldbl_##alias)
   411  # endif
   412  #endif
   413  #if !defined __LDBL_COMPAT || !defined __REDIRECT
   414  # define __LDBL_REDIR1(name, proto, alias) name proto
   415  # define __LDBL_REDIR(name, proto) name proto
   416  # define __LDBL_REDIR1_NTH(name, proto, alias) name proto __THROW
   417  # define __LDBL_REDIR_NTH(name, proto) name proto __THROW
   418  # define __LDBL_REDIR_DECL(name)
   419  # ifdef __REDIRECT
   420  #  define __REDIRECT_LDBL(name, proto, alias) __REDIRECT (name, proto, 
        alias)
   421  #  define __REDIRECT_NTH_LDBL(name, proto, alias) \
   422    __REDIRECT_NTH (name, proto, alias)
   423  # endif
   424  #endif
   425  
   426  #endif   /* sys/cdefs.h */
Close file: /usr/include/sys/cdefs.h
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  
   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
Open file: /usr/include/gnu/stubs.h
     1  /* This file is automatically generated.
     2     This file selects the right generated file of `__stub_FUNCTION' macr
        os
     3     based on the architecture being compiled for.  */
     4  
     5  
     6  #if !defined __x86_64__
     7  # include <gnu/stubs-32.h>
     8  #endif
     9  #if defined __x86_64__ && defined __LP64__

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    10  # include <gnu/stubs-64.h>
    11  #endif
    12  #if defined __x86_64__ && defined __ILP32__
    13  # include <gnu/stubs-x32.h>
    14  #endif
Close file: /usr/include/gnu/stubs.h
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    27  # include <features.h>
    28  
    29  __BEGIN_DECLS
    30  
    31  # define __need_size_t
    32  # define __need_NULL
Open file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
     1  /* Copyright (C) 1989-2013 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \
    31      || defined(__need_wint_t)
    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \
    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  
    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.
    47     There's no way to win with the other order!  Sun lossage.  */
    48  
    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif
    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.
   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t
   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif
   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t
   115  #endif
   116  
   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually
   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF
   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #define _PTRDIFF_T
   137  #define _T_PTRDIFF_
   138  #define _T_PTRDIFF
   139  #define __PTRDIFF_T
   140  #define _PTRDIFF_T_
   141  #define _BSD_PTRDIFF_T_
   142  #define ___int_ptrdiff_t_h
   143  #define _GCC_PTRDIFF_T
   144  #ifndef __PTRDIFF_TYPE__
   145  #define __PTRDIFF_TYPE__ long int
   146  #endif
   147  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   148  #endif /* _GCC_PTRDIFF_T */
   149  #endif /* ___int_ptrdiff_t_h */
   150  #endif /* _BSD_PTRDIFF_T_ */
   151  #endif /* _PTRDIFF_T_ */
   152  #endif /* __PTRDIFF_T */
   153  #endif /* _T_PTRDIFF */
   154  #endif /* _T_PTRDIFF_ */
   155  #endif /* _PTRDIFF_T */
   156  
   157  /* If this symbol has done its job, get rid of it.  */
   158  #undef  __need_ptrdiff_t
   159  
   160  #endif /* _STDDEF_H or __need_ptrdiff_t.  */
   161  
   162  /* Unsigned type of `sizeof' something.  */
   163  
   164  /* Define this type if we are doing the whole job,
   165     or if we want this type in particular.  */
   166  #if defined (_STDDEF_H) || defined (__need_size_t)
   167  #ifndef __size_t__      /* BeOS */
   168  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   169  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */
   170  #ifndef _SYS_SIZE_T_H
   171  #ifndef _T_SIZE_
   172  #ifndef _T_SIZE
   173  #ifndef __SIZE_T
   174  #ifndef _SIZE_T_
   175  #ifndef _BSD_SIZE_T_
   176  #ifndef _SIZE_T_DEFINED_
   177  #ifndef _SIZE_T_DEFINED
   178  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   179  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   180  #ifndef ___int_size_t_h
   181  #ifndef _GCC_SIZE_T
   182  #ifndef _SIZET_
   183  #ifndef __size_t
   184  #define __size_t__      /* BeOS */
   185  #define __SIZE_T__      /* Cray Unicos/Mk */
   186  #define _SIZE_T
   187  #define _SYS_SIZE_T_H
   188  #define _T_SIZE_
   189  #define _T_SIZE
   190  #define __SIZE_T
   191  #define _SIZE_T_
   192  #define _BSD_SIZE_T_
   193  #define _SIZE_T_DEFINED_
   194  #define _SIZE_T_DEFINED
   195  #define _BSD_SIZE_T_DEFINED_    /* Darwin */
   196  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   197  #define ___int_size_t_h
   198  #define _GCC_SIZE_T
   199  #define _SIZET_

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   200  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   201    || defined(__FreeBSD_kernel__)
   202  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   203  #elif defined (__VMS__)
   204  /* __size_t is also a typedef on VMS.  */
   205  #else
   206  #define __size_t
   207  #endif
   208  #ifndef __SIZE_TYPE__
   209  #define __SIZE_TYPE__ long unsigned int
   210  #endif
   211  #if !(defined (__GNUG__) && defined (size_t))
   212  typedef __SIZE_TYPE__ size_t;
   213  #ifdef __BEOS__
   214  typedef long ssize_t;
   215  #endif /* __BEOS__ */
   216  #endif /* !(defined (__GNUG__) && defined (size_t)) */
   217  #endif /* __size_t */
   218  #endif /* _SIZET_ */
   219  #endif /* _GCC_SIZE_T */
   220  #endif /* ___int_size_t_h */
   221  #endif /* _SIZE_T_DECLARED */
   222  #endif /* _BSD_SIZE_T_DEFINED_ */
   223  #endif /* _SIZE_T_DEFINED */
   224  #endif /* _SIZE_T_DEFINED_ */
   225  #endif /* _BSD_SIZE_T_ */
   226  #endif /* _SIZE_T_ */
   227  #endif /* __SIZE_T */
   228  #endif /* _T_SIZE */
   229  #endif /* _T_SIZE_ */
   230  #endif /* _SYS_SIZE_T_H */
   231  #endif /* _SIZE_T */
   232  #endif /* __SIZE_T__ */
   233  #endif /* __size_t__ */
   234  #undef  __need_size_t
   235  #endif /* _STDDEF_H or __need_size_t.  */
   236  
   237  
   238  /* Wide character type.
   239     Locale-writers should change this as necessary to
   240     be big enough to hold unique values not between 0 and 127,
   241     and not (wchar_t) -1, for each defined multibyte character.  */
   242  
   243  /* Define this type if we are doing the whole job,
   244     or if we want this type in particular.  */
   245  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   246  #ifndef __wchar_t__     /* BeOS */
   247  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   248  #ifndef _WCHAR_T
   249  #ifndef _T_WCHAR_
   250  #ifndef _T_WCHAR
   251  #ifndef __WCHAR_T
   252  #ifndef _WCHAR_T_
   253  #ifndef _BSD_WCHAR_T_
   254  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
   255  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   256  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   257  #ifndef _WCHAR_T_DEFINED_
   258  #ifndef _WCHAR_T_DEFINED
   259  #ifndef _WCHAR_T_H
   260  #ifndef ___int_wchar_t_h
   261  #ifndef __INT_WCHAR_T_H
   262  #ifndef _GCC_WCHAR_T
   263  #define __wchar_t__     /* BeOS */
   264  #define __WCHAR_T__     /* Cray Unicos/Mk */
   265  #define _WCHAR_T
   266  #define _T_WCHAR_
   267  #define _T_WCHAR
   268  #define __WCHAR_T
   269  #define _WCHAR_T_
   270  #define _BSD_WCHAR_T_
   271  #define _WCHAR_T_DEFINED_
   272  #define _WCHAR_T_DEFINED
   273  #define _WCHAR_T_H
   274  #define ___int_wchar_t_h

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   275  #define __INT_WCHAR_T_H
   276  #define _GCC_WCHAR_T
   277  #define _WCHAR_T_DECLARED
   278  
   279  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   280     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   281     symbols in the _FOO_T_ family, stays defined even after its
   282     corresponding type is defined).  If we define wchar_t, then we
   283     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   284     we undef _WCHAR_T_, then we must also define rune_t, since 
   285     headers like runetype.h assume that if machine/ansi.h is included,
   286     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   287     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   288     the same type." */
   289  #ifdef _BSD_WCHAR_T_
   290  #undef _BSD_WCHAR_T_
   291  #ifdef _BSD_RUNE_T_
   292  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   293  typedef _BSD_RUNE_T_ rune_t;
   294  #define _BSD_WCHAR_T_DEFINED_
   295  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   296  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   297  /* Why is this file so hard to maintain properly?  In contrast to
   298     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   299     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   300     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   301  #undef _BSD_RUNE_T_
   302  #endif
   303  #endif
   304  #endif
   305  #endif
   306  /* FreeBSD 5 can't be handled well using "traditional" logic above
   307     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   308     rune_t in some cases... */
   309  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   310  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   311  #if __BSD_VISIBLE
   312  #ifndef _RUNE_T_DECLARED
   313  typedef __rune_t        rune_t;
   314  #define _RUNE_T_DECLARED
   315  #endif
   316  #endif
   317  #endif
   318  #endif
   319  
   320  #ifndef __WCHAR_TYPE__
   321  #define __WCHAR_TYPE__ int
   322  #endif
   323  #ifndef __cplusplus
   324  typedef __WCHAR_TYPE__ wchar_t;
   325  #endif
   326  #endif
   327  #endif
   328  #endif
   329  #endif
   330  #endif
   331  #endif
   332  #endif /* _WCHAR_T_DECLARED */
   333  #endif /* _BSD_RUNE_T_DEFINED_ */
   334  #endif
   335  #endif
   336  #endif
   337  #endif
   338  #endif
   339  #endif
   340  #endif
   341  #endif /* __WCHAR_T__ */
   342  #endif /* __wchar_t__ */
   343  #undef  __need_wchar_t
   344  #endif /* _STDDEF_H or __need_wchar_t.  */
   345  
   346  #if defined (__need_wint_t)
   347  #ifndef _WINT_T
   348  #define _WINT_T

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   349  
   350  #ifndef __WINT_TYPE__
   351  #define __WINT_TYPE__ unsigned int
   352  #endif
   353  typedef __WINT_TYPE__ wint_t;
   354  #endif
   355  #undef __need_wint_t
   356  #endif
   357  
   358  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   359      are already defined.  */
   360  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */
   361  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   362  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)
   363  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   364      are probably typos and should be removed before 2.8 is released.  *
        /
   365  #ifdef _GCC_PTRDIFF_T_
   366  #undef _PTRDIFF_T_
   367  #undef _BSD_PTRDIFF_T_
   368  #endif
   369  #ifdef _GCC_SIZE_T_
   370  #undef _SIZE_T_
   371  #undef _BSD_SIZE_T_
   372  #endif
   373  #ifdef _GCC_WCHAR_T_
   374  #undef _WCHAR_T_
   375  #undef _BSD_WCHAR_T_
   376  #endif
   377  /*  The following ones are the real ones.  */
   378  #ifdef _GCC_PTRDIFF_T
   379  #undef _PTRDIFF_T_
   380  #undef _BSD_PTRDIFF_T_
   381  #endif
   382  #ifdef _GCC_SIZE_T
   383  #undef _SIZE_T_
   384  #undef _BSD_SIZE_T_
   385  #endif
   386  #ifdef _GCC_WCHAR_T
   387  #undef _WCHAR_T_
   388  #undef _BSD_WCHAR_T_
   389  #endif
   390  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */
   391  
   392  #endif /* __sys_stdtypes_h */
   393  
   394  /* A null pointer constant.  */
   395  
   396  #if defined (_STDDEF_H) || defined (__need_NULL)
   397  #undef NULL             /* in case <stdio.h> has defined it. */
   398  #ifdef __GNUG__
   399  #define NULL __null
   400  #else   /* G++ */
   401  #ifndef __cplusplus
   402  #define NULL ((void *)0)
   403  #else   /* C++ */
   404  #define NULL 0
   405  #endif  /* C++ */
   406  #endif  /* G++ */
   407  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   408  #undef  __need_NULL
   409  
   410  #ifdef _STDDEF_H
   411  
   412  /* Offset of member MEMBER in a struct of type TYPE. */
   413  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   414  
   415  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   416    || (defined(__cplusplus) && __cplusplus >= 201103L)
   417  #ifndef _GCC_MAX_ALIGN_T
   418  #define _GCC_MAX_ALIGN_T

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   419  /* Type whose alignment is supported in every context and is at least
   420     as great as that of any standard type not using alignment
   421     specifiers.  */
   422  typedef struct {
   423    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));
   424    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   425  } max_align_t;
   426  #endif
   427  #endif /* C11 or C++11.  */
   428  
   429  #if defined(__cplusplus) && __cplusplus >= 201103L
   430  #ifndef _GXX_NULLPTR_T
   431  #define _GXX_NULLPTR_T
   432    typedef decltype(nullptr) nullptr_t;
   433  #endif
   434  #endif /* C++11.  */
   435  
   436  #endif /* _STDDEF_H was defined this time */
   437  
   438  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
   439            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
    33  # include <stddef.h>
    34  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.
    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__
   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */
   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif
   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2
   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  
   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    26  #include <features.h>
Open file: /usr/include/bits/wordsize.h
     1  /* Determine the wordsize from the preprocessor defines.  */
     2  
     3  #if defined __x86_64__ && !defined __ILP32__
     4  # define __WORDSIZE     64
     5  #else
     6  # define __WORDSIZE     32
     7  #endif
     8  
     9  #ifdef __x86_64__
    10  # define __WORDSIZE_TIME64_COMPAT32     1
    11  /* Both x86-64 and x32 use the 64-bit system call interface.  */
    12  # define __SYSCALL_WORDSIZE             64
    13  #endif
Close file: /usr/include/bits/wordsize.h
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];
    65  } __u_quad_t;
    66  #endif
    67  
    68  
    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    70     macros for each of the OS types we define below.  The definitions
    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long
    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.
    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    87     these types, where using the appropriate l or ll format modifiers ca
        n
    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,
    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t
   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else
   128  # error
   129  #endif
Open file: /usr/include/bits/typesizes.h
     1  /* bits/typesizes.h -- underlying types for *_t.  Linux/x86-64 version.
     2     Copyright (C) 2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _BITS_TYPES_H
    20  # error "Never include <bits/typesizes.h> directly; use <sys/types.h> i
        nstead."
    21  #endif
    22  
    23  #ifndef _BITS_TYPESIZES_H
    24  #define _BITS_TYPESIZES_H       1
    25  
    26  /* See <bits/types.h> for the meaning of these macros.  This file exist
        s so
    27     that <bits/types.h> need not vary across different GNU platforms.  *
        /
    28  
    29  /* X32 kernel interface is 64-bit.  */
    30  #if defined __x86_64__ && defined __ILP32__
    31  # define __SYSCALL_SLONG_TYPE   __SQUAD_TYPE
    32  # define __SYSCALL_ULONG_TYPE   __UQUAD_TYPE
    33  #else
    34  # define __SYSCALL_SLONG_TYPE   __SLONGWORD_TYPE
    35  # define __SYSCALL_ULONG_TYPE   __ULONGWORD_TYPE
    36  #endif
    37  
    38  #define __DEV_T_TYPE            __UQUAD_TYPE
    39  #define __UID_T_TYPE            __U32_TYPE
    40  #define __GID_T_TYPE            __U32_TYPE
    41  #define __INO_T_TYPE            __SYSCALL_ULONG_TYPE
    42  #define __INO64_T_TYPE          __UQUAD_TYPE
    43  #define __MODE_T_TYPE           __U32_TYPE
    44  #ifdef __x86_64__
    45  # define __NLINK_T_TYPE         __SYSCALL_ULONG_TYPE
    46  # define __FSWORD_T_TYPE        __SYSCALL_SLONG_TYPE
    47  #else
    48  # define __NLINK_T_TYPE         __UWORD_TYPE
    49  # define __FSWORD_T_TYPE        __SWORD_TYPE
    50  #endif
    51  #define __OFF_T_TYPE            __SYSCALL_SLONG_TYPE
    52  #define __OFF64_T_TYPE          __SQUAD_TYPE
    53  #define __PID_T_TYPE            __S32_TYPE
    54  #define __RLIM_T_TYPE           __SYSCALL_ULONG_TYPE
    55  #define __RLIM64_T_TYPE         __UQUAD_TYPE
    56  #define __BLKCNT_T_TYPE         __SYSCALL_SLONG_TYPE
    57  #define __BLKCNT64_T_TYPE       __SQUAD_TYPE
    58  #define __FSBLKCNT_T_TYPE       __SYSCALL_ULONG_TYPE
    59  #define __FSBLKCNT64_T_TYPE     __UQUAD_TYPE
    60  #define __FSFILCNT_T_TYPE       __SYSCALL_ULONG_TYPE
    61  #define __FSFILCNT64_T_TYPE     __UQUAD_TYPE

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    62  #define __ID_T_TYPE             __U32_TYPE
    63  #define __CLOCK_T_TYPE          __SYSCALL_SLONG_TYPE
    64  #define __TIME_T_TYPE           __SYSCALL_SLONG_TYPE
    65  #define __USECONDS_T_TYPE       __U32_TYPE
    66  #define __SUSECONDS_T_TYPE      __SYSCALL_SLONG_TYPE
    67  #define __DADDR_T_TYPE          __S32_TYPE
    68  #define __KEY_T_TYPE            __S32_TYPE
    69  #define __CLOCKID_T_TYPE        __S32_TYPE
    70  #define __TIMER_T_TYPE          void *
    71  #define __BLKSIZE_T_TYPE        __SYSCALL_SLONG_TYPE
    72  #define __FSID_T_TYPE           struct { int __val[2]; }
    73  #define __SSIZE_T_TYPE          __SWORD_TYPE
    74  
    75  #ifdef __x86_64__
    76  /* Tell the libc code that off_t and off64_t are actually the same type
    77     for all ABI purposes, even if possibly expressed as different base t
        ypes
    78     for C type-checking purposes.  */
    79  # define __OFF_T_MATCHES_OFF64_T        1
    80  
    81  /* Same for ino_t and ino64_t.  */
    82  # define __INO_T_MATCHES_INO64_T        1
    83  #endif
    84  
    85  /* Number of descriptors that can fit in an `fd_set'.  */
    86  #define __FD_SETSIZE            1024
    87  
    88  
    89  #endif /* bits/typesizes.h */
Close file: /usr/include/bits/typesizes.h
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   131  
   132  
   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  
   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   187  
   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */
   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   191  typedef __quad_t *__qaddr_t;
   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE
   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    35  # include <bits/types.h>
    36  # define __need_FILE
    37  # define __need___FILE
    38  #endif /* Don't need FILE.  */
    39  
    40  
    41  #if !defined __FILE_defined && defined __need_FILE
    42  
    43  /* Define outside of namespace so the C++ is happy.  */
    44  struct _IO_FILE;
    45  
    46  __BEGIN_NAMESPACE_STD
    47  /* The opaque type of streams.  This is the definition used elsewhere. 
         */
    48  typedef struct _IO_FILE FILE;
    49  __END_NAMESPACE_STD
    50  #if defined __USE_LARGEFILE64 || defined __USE_SVID || defined __USE_PO
        SIX \
    51      || defined __USE_BSD || defined __USE_ISOC99 || defined __USE_XOPEN
         \
    52      || defined __USE_POSIX2
    53  __USING_NAMESPACE_STD(FILE)
    54  #endif
    55  
    56  # define __FILE_defined 1
    57  #endif /* FILE not defined.  */
    58  #undef  __need_FILE
    59  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    60  
    61  #if !defined ____FILE_defined && defined __need___FILE
    62  
    63  /* The opaque type of streams.  This is the definition used elsewhere. 
         */
    64  typedef struct _IO_FILE __FILE;
    65  
    66  # define ____FILE_defined       1
    67  #endif /* __FILE not defined.  */
    68  #undef  __need___FILE
    69  
    70  
    71  #ifdef  _STDIO_H
    72  #define _STDIO_USES_IOSTREAM
    73  
Open file: /usr/include/libio.h
     1  /* Copyright (C) 1991-1995,1997-2007,2009,2011,2012
     2     Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4     Written by Per Bothner <bothner@cygnus.com>.
     5  
     6     The GNU C Library is free software; you can redistribute it and/or
     7     modify it under the terms of the GNU Lesser General Public
     8     License as published by the Free Software Foundation; either
     9     version 2.1 of the License, or (at your option) any later version.
    10  
    11     The GNU C Library is distributed in the hope that it will be useful,
    12     but WITHOUT ANY WARRANTY; without even the implied warranty of
    13     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    14     Lesser General Public License for more details.
    15  
    16     You should have received a copy of the GNU Lesser General Public
    17     License along with the GNU C Library; if not, see
    18     <http://www.gnu.org/licenses/>.
    19  
    20     As a special exception, if you link the code in this file with
    21     files compiled with a GNU compiler to produce an executable,
    22     that does not cause the resulting executable to be covered by
    23     the GNU Lesser General Public License.  This exception does not
    24     however invalidate any other reasons why the executable file
    25     might be covered by the GNU Lesser General Public License.
    26     This exception applies to code released by its copyright holders
    27     in files containing the exception.  */
    28  
    29  #ifndef _IO_STDIO_H
    30  #define _IO_STDIO_H
    31  
Open file: /usr/include/_G_config.h
     1  /* This file is needed by libio to define various configuration paramet
        ers.
     2     These are always the same in the GNU C library.  */
     3  
     4  #ifndef _G_config_h
     5  #define _G_config_h 1
     6  
     7  /* Define types for libio in terms of the standard internal type names.
          */
     8  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;
    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];
    65  } __u_quad_t;
    66  #endif
    67  
    68  
    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    70     macros for each of the OS types we define below.  The definitions
    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long
    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.
    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    87     these types, where using the appropriate l or ll format modifiers ca
        n
    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,
    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t
   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int
   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else
   128  # error
   129  #endif
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   131  
   132  
   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;
   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  
   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   187  
   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */
   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   191  typedef __quad_t *__qaddr_t;
   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE
   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
     9  #include <bits/types.h>
    10  #define __need_size_t
    11  #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
    12  # define __need_wchar_t
    13  #endif
    14  #define __need_NULL

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

Open file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
     1  /* Copyright (C) 1989-2013 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \
    31      || defined(__need_wint_t)
    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \
    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  
    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.
    47     There's no way to win with the other order!  Sun lossage.  */
    48  
    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif
    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.
   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t
   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif
   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t
   115  #endif
   116  
   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually
   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  
   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF
   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #define _PTRDIFF_T
   137  #define _T_PTRDIFF_
   138  #define _T_PTRDIFF
   139  #define __PTRDIFF_T
   140  #define _PTRDIFF_T_
   141  #define _BSD_PTRDIFF_T_

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   142  #define ___int_ptrdiff_t_h
   143  #define _GCC_PTRDIFF_T
   144  #ifndef __PTRDIFF_TYPE__
   145  #define __PTRDIFF_TYPE__ long int
   146  #endif
   147  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   148  #endif /* _GCC_PTRDIFF_T */
   149  #endif /* ___int_ptrdiff_t_h */
   150  #endif /* _BSD_PTRDIFF_T_ */
   151  #endif /* _PTRDIFF_T_ */
   152  #endif /* __PTRDIFF_T */
   153  #endif /* _T_PTRDIFF */
   154  #endif /* _T_PTRDIFF_ */
   155  #endif /* _PTRDIFF_T */
   156  
   157  /* If this symbol has done its job, get rid of it.  */
   158  #undef  __need_ptrdiff_t
   159  
   160  #endif /* _STDDEF_H or __need_ptrdiff_t.  */
   161  
   162  /* Unsigned type of `sizeof' something.  */
   163  
   164  /* Define this type if we are doing the whole job,
   165     or if we want this type in particular.  */
   166  #if defined (_STDDEF_H) || defined (__need_size_t)
   167  #ifndef __size_t__      /* BeOS */
   168  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   169  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */
   170  #ifndef _SYS_SIZE_T_H
   171  #ifndef _T_SIZE_
   172  #ifndef _T_SIZE
   173  #ifndef __SIZE_T
   174  #ifndef _SIZE_T_
   175  #ifndef _BSD_SIZE_T_
   176  #ifndef _SIZE_T_DEFINED_
   177  #ifndef _SIZE_T_DEFINED
   178  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   179  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   180  #ifndef ___int_size_t_h
   181  #ifndef _GCC_SIZE_T
   182  #ifndef _SIZET_
   183  #ifndef __size_t
   184  #define __size_t__      /* BeOS */
   185  #define __SIZE_T__      /* Cray Unicos/Mk */
   186  #define _SIZE_T
   187  #define _SYS_SIZE_T_H
   188  #define _T_SIZE_
   189  #define _T_SIZE
   190  #define __SIZE_T
   191  #define _SIZE_T_
   192  #define _BSD_SIZE_T_
   193  #define _SIZE_T_DEFINED_
   194  #define _SIZE_T_DEFINED
   195  #define _BSD_SIZE_T_DEFINED_    /* Darwin */
   196  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   197  #define ___int_size_t_h
   198  #define _GCC_SIZE_T
   199  #define _SIZET_
   200  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   201    || defined(__FreeBSD_kernel__)
   202  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   203  #elif defined (__VMS__)
   204  /* __size_t is also a typedef on VMS.  */
   205  #else
   206  #define __size_t
   207  #endif
   208  #ifndef __SIZE_TYPE__
   209  #define __SIZE_TYPE__ long unsigned int
   210  #endif
   211  #if !(defined (__GNUG__) && defined (size_t))
   212  typedef __SIZE_TYPE__ size_t;
   213  #ifdef __BEOS__
   214  typedef long ssize_t;
   215  #endif /* __BEOS__ */
   216  #endif /* !(defined (__GNUG__) && defined (size_t)) */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   217  #endif /* __size_t */
   218  #endif /* _SIZET_ */
   219  #endif /* _GCC_SIZE_T */
   220  #endif /* ___int_size_t_h */
   221  #endif /* _SIZE_T_DECLARED */
   222  #endif /* _BSD_SIZE_T_DEFINED_ */
   223  #endif /* _SIZE_T_DEFINED */
   224  #endif /* _SIZE_T_DEFINED_ */
   225  #endif /* _BSD_SIZE_T_ */
   226  #endif /* _SIZE_T_ */
   227  #endif /* __SIZE_T */
   228  #endif /* _T_SIZE */
   229  #endif /* _T_SIZE_ */
   230  #endif /* _SYS_SIZE_T_H */
   231  #endif /* _SIZE_T */
   232  #endif /* __SIZE_T__ */
   233  #endif /* __size_t__ */
   234  #undef  __need_size_t
   235  #endif /* _STDDEF_H or __need_size_t.  */
   236  
   237  
   238  /* Wide character type.
   239     Locale-writers should change this as necessary to
   240     be big enough to hold unique values not between 0 and 127,
   241     and not (wchar_t) -1, for each defined multibyte character.  */
   242  
   243  /* Define this type if we are doing the whole job,
   244     or if we want this type in particular.  */
   245  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   246  #ifndef __wchar_t__     /* BeOS */
   247  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   248  #ifndef _WCHAR_T
   249  #ifndef _T_WCHAR_
   250  #ifndef _T_WCHAR
   251  #ifndef __WCHAR_T
   252  #ifndef _WCHAR_T_
   253  #ifndef _BSD_WCHAR_T_
   254  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
   255  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   256  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   257  #ifndef _WCHAR_T_DEFINED_
   258  #ifndef _WCHAR_T_DEFINED
   259  #ifndef _WCHAR_T_H
   260  #ifndef ___int_wchar_t_h
   261  #ifndef __INT_WCHAR_T_H
   262  #ifndef _GCC_WCHAR_T
   263  #define __wchar_t__     /* BeOS */
   264  #define __WCHAR_T__     /* Cray Unicos/Mk */
   265  #define _WCHAR_T
   266  #define _T_WCHAR_
   267  #define _T_WCHAR
   268  #define __WCHAR_T
   269  #define _WCHAR_T_
   270  #define _BSD_WCHAR_T_
   271  #define _WCHAR_T_DEFINED_
   272  #define _WCHAR_T_DEFINED
   273  #define _WCHAR_T_H
   274  #define ___int_wchar_t_h
   275  #define __INT_WCHAR_T_H
   276  #define _GCC_WCHAR_T
   277  #define _WCHAR_T_DECLARED
   278  
   279  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   280     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   281     symbols in the _FOO_T_ family, stays defined even after its
   282     corresponding type is defined).  If we define wchar_t, then we
   283     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   284     we undef _WCHAR_T_, then we must also define rune_t, since 
   285     headers like runetype.h assume that if machine/ansi.h is included,
   286     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   287     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   288     the same type." */
   289  #ifdef _BSD_WCHAR_T_
   290  #undef _BSD_WCHAR_T_
   291  #ifdef _BSD_RUNE_T_

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   292  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   293  typedef _BSD_RUNE_T_ rune_t;
   294  #define _BSD_WCHAR_T_DEFINED_
   295  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   296  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   297  /* Why is this file so hard to maintain properly?  In contrast to
   298     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   299     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   300     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   301  #undef _BSD_RUNE_T_
   302  #endif
   303  #endif
   304  #endif
   305  #endif
   306  /* FreeBSD 5 can't be handled well using "traditional" logic above
   307     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   308     rune_t in some cases... */
   309  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   310  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   311  #if __BSD_VISIBLE
   312  #ifndef _RUNE_T_DECLARED
   313  typedef __rune_t        rune_t;
   314  #define _RUNE_T_DECLARED
   315  #endif
   316  #endif
   317  #endif
   318  #endif
   319  
   320  #ifndef __WCHAR_TYPE__
   321  #define __WCHAR_TYPE__ int
   322  #endif
   323  #ifndef __cplusplus
   324  typedef __WCHAR_TYPE__ wchar_t;
   325  #endif
   326  #endif
   327  #endif
   328  #endif
   329  #endif
   330  #endif
   331  #endif
   332  #endif /* _WCHAR_T_DECLARED */
   333  #endif /* _BSD_RUNE_T_DEFINED_ */
   334  #endif
   335  #endif
   336  #endif
   337  #endif
   338  #endif
   339  #endif
   340  #endif
   341  #endif /* __WCHAR_T__ */
   342  #endif /* __wchar_t__ */
   343  #undef  __need_wchar_t
   344  #endif /* _STDDEF_H or __need_wchar_t.  */
   345  
   346  #if defined (__need_wint_t)
   347  #ifndef _WINT_T
   348  #define _WINT_T
   349  
   350  #ifndef __WINT_TYPE__
   351  #define __WINT_TYPE__ unsigned int
   352  #endif
   353  typedef __WINT_TYPE__ wint_t;
   354  #endif
   355  #undef __need_wint_t
   356  #endif
   357  
   358  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   359      are already defined.  */
   360  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */
   361  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   362  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   363  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   364      are probably typos and should be removed before 2.8 is released.  *
        /
   365  #ifdef _GCC_PTRDIFF_T_
   366  #undef _PTRDIFF_T_
   367  #undef _BSD_PTRDIFF_T_
   368  #endif
   369  #ifdef _GCC_SIZE_T_
   370  #undef _SIZE_T_
   371  #undef _BSD_SIZE_T_
   372  #endif
   373  #ifdef _GCC_WCHAR_T_
   374  #undef _WCHAR_T_
   375  #undef _BSD_WCHAR_T_
   376  #endif
   377  /*  The following ones are the real ones.  */
   378  #ifdef _GCC_PTRDIFF_T
   379  #undef _PTRDIFF_T_
   380  #undef _BSD_PTRDIFF_T_
   381  #endif
   382  #ifdef _GCC_SIZE_T
   383  #undef _SIZE_T_
   384  #undef _BSD_SIZE_T_
   385  #endif
   386  #ifdef _GCC_WCHAR_T
   387  #undef _WCHAR_T_
   388  #undef _BSD_WCHAR_T_
   389  #endif
   390  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */
   391  
   392  #endif /* __sys_stdtypes_h */
   393  
   394  /* A null pointer constant.  */
   395  
   396  #if defined (_STDDEF_H) || defined (__need_NULL)
   397  #undef NULL             /* in case <stdio.h> has defined it. */
   398  #ifdef __GNUG__
   399  #define NULL __null
   400  #else   /* G++ */
   401  #ifndef __cplusplus
   402  #define NULL ((void *)0)
   403  #else   /* C++ */
   404  #define NULL 0
   405  #endif  /* C++ */
   406  #endif  /* G++ */
   407  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   408  #undef  __need_NULL
   409  
   410  #ifdef _STDDEF_H
   411  
   412  /* Offset of member MEMBER in a struct of type TYPE. */
   413  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   414  
   415  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   416    || (defined(__cplusplus) && __cplusplus >= 201103L)
   417  #ifndef _GCC_MAX_ALIGN_T
   418  #define _GCC_MAX_ALIGN_T
   419  /* Type whose alignment is supported in every context and is at least
   420     as great as that of any standard type not using alignment
   421     specifiers.  */
   422  typedef struct {
   423    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));
   424    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   425  } max_align_t;
   426  #endif
   427  #endif /* C11 or C++11.  */
   428  
   429  #if defined(__cplusplus) && __cplusplus >= 201103L
   430  #ifndef _GXX_NULLPTR_T
   431  #define _GXX_NULLPTR_T
   432    typedef decltype(nullptr) nullptr_t;
   433  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   434  #endif /* C++11.  */
   435  
   436  #endif /* _STDDEF_H was defined this time */
   437  
   438  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
   439            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
    15  #include <stddef.h>
    16  #define __need_mbstate_t
    17  #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
    18  # define __need_wint_t
    19  #endif
Open file: /usr/include/wchar.h
     1  /* Copyright (C) 1995-2008, 2009, 2010, 2011, 2012 Free Software Founda
        tion, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      ISO C99 Standard: 7.24
    20   *      Extended multibyte and wide character utilities <wchar.h>
    21   */
    22  
    23  #ifndef _WCHAR_H
    24  
    25  #if !defined __need_mbstate_t && !defined __need_wint_t
    26  # define _WCHAR_H 1
    27  # include <features.h>
    28  #endif
    29  
    30  #ifdef _WCHAR_H
    31  /* Get FILE definition.  */
    32  # define __need___FILE
    33  # if defined __USE_UNIX98 || defined __USE_XOPEN2K
    34  #  define __need_FILE
    35  # endif
    36  # include <stdio.h>
    37  /* Get va_list definition.  */
    38  # define __need___va_list
    39  # include <stdarg.h>
    40  
    41  # include <bits/wchar.h>
    42  
    43  /* Get size_t, wchar_t, wint_t and NULL from <stddef.h>.  */
    44  # define __need_size_t
    45  # define __need_wchar_t
    46  # define __need_NULL
    47  #endif
    48  #if defined _WCHAR_H || defined __need_wint_t || !defined __WINT_TYPE__
    49  # undef __need_wint_t
    50  # define __need_wint_t
Open file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
     1  /* Copyright (C) 1989-2013 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \
    31      || defined(__need_wint_t)
    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \
    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  
    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.
    47     There's no way to win with the other order!  Sun lossage.  */
    48  
    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.
   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t
   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif
   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t
   115  #endif
   116  
   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually
   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  
   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF
   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #define _PTRDIFF_T
   137  #define _T_PTRDIFF_
   138  #define _T_PTRDIFF
   139  #define __PTRDIFF_T
   140  #define _PTRDIFF_T_
   141  #define _BSD_PTRDIFF_T_
   142  #define ___int_ptrdiff_t_h
   143  #define _GCC_PTRDIFF_T
   144  #ifndef __PTRDIFF_TYPE__
   145  #define __PTRDIFF_TYPE__ long int
   146  #endif
   147  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   148  #endif /* _GCC_PTRDIFF_T */
   149  #endif /* ___int_ptrdiff_t_h */
   150  #endif /* _BSD_PTRDIFF_T_ */
   151  #endif /* _PTRDIFF_T_ */
   152  #endif /* __PTRDIFF_T */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   153  #endif /* _T_PTRDIFF */
   154  #endif /* _T_PTRDIFF_ */
   155  #endif /* _PTRDIFF_T */
   156  
   157  /* If this symbol has done its job, get rid of it.  */
   158  #undef  __need_ptrdiff_t
   159  
   160  #endif /* _STDDEF_H or __need_ptrdiff_t.  */
   161  
   162  /* Unsigned type of `sizeof' something.  */
   163  
   164  /* Define this type if we are doing the whole job,
   165     or if we want this type in particular.  */
   166  #if defined (_STDDEF_H) || defined (__need_size_t)
   167  #ifndef __size_t__      /* BeOS */
   168  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   169  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */
   170  #ifndef _SYS_SIZE_T_H
   171  #ifndef _T_SIZE_
   172  #ifndef _T_SIZE
   173  #ifndef __SIZE_T
   174  #ifndef _SIZE_T_
   175  #ifndef _BSD_SIZE_T_
   176  #ifndef _SIZE_T_DEFINED_
   177  #ifndef _SIZE_T_DEFINED
   178  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   179  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   180  #ifndef ___int_size_t_h
   181  #ifndef _GCC_SIZE_T
   182  #ifndef _SIZET_
   183  #ifndef __size_t
   184  #define __size_t__      /* BeOS */
   185  #define __SIZE_T__      /* Cray Unicos/Mk */
   186  #define _SIZE_T
   187  #define _SYS_SIZE_T_H
   188  #define _T_SIZE_
   189  #define _T_SIZE
   190  #define __SIZE_T
   191  #define _SIZE_T_
   192  #define _BSD_SIZE_T_
   193  #define _SIZE_T_DEFINED_
   194  #define _SIZE_T_DEFINED
   195  #define _BSD_SIZE_T_DEFINED_    /* Darwin */
   196  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   197  #define ___int_size_t_h
   198  #define _GCC_SIZE_T
   199  #define _SIZET_
   200  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   201    || defined(__FreeBSD_kernel__)
   202  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   203  #elif defined (__VMS__)
   204  /* __size_t is also a typedef on VMS.  */
   205  #else
   206  #define __size_t
   207  #endif
   208  #ifndef __SIZE_TYPE__
   209  #define __SIZE_TYPE__ long unsigned int
   210  #endif
   211  #if !(defined (__GNUG__) && defined (size_t))
   212  typedef __SIZE_TYPE__ size_t;
   213  #ifdef __BEOS__
   214  typedef long ssize_t;
   215  #endif /* __BEOS__ */
   216  #endif /* !(defined (__GNUG__) && defined (size_t)) */
   217  #endif /* __size_t */
   218  #endif /* _SIZET_ */
   219  #endif /* _GCC_SIZE_T */
   220  #endif /* ___int_size_t_h */
   221  #endif /* _SIZE_T_DECLARED */
   222  #endif /* _BSD_SIZE_T_DEFINED_ */
   223  #endif /* _SIZE_T_DEFINED */
   224  #endif /* _SIZE_T_DEFINED_ */
   225  #endif /* _BSD_SIZE_T_ */
   226  #endif /* _SIZE_T_ */
   227  #endif /* __SIZE_T */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   228  #endif /* _T_SIZE */
   229  #endif /* _T_SIZE_ */
   230  #endif /* _SYS_SIZE_T_H */
   231  #endif /* _SIZE_T */
   232  #endif /* __SIZE_T__ */
   233  #endif /* __size_t__ */
   234  #undef  __need_size_t
   235  #endif /* _STDDEF_H or __need_size_t.  */
   236  
   237  
   238  /* Wide character type.
   239     Locale-writers should change this as necessary to
   240     be big enough to hold unique values not between 0 and 127,
   241     and not (wchar_t) -1, for each defined multibyte character.  */
   242  
   243  /* Define this type if we are doing the whole job,
   244     or if we want this type in particular.  */
   245  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   246  #ifndef __wchar_t__     /* BeOS */
   247  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   248  #ifndef _WCHAR_T
   249  #ifndef _T_WCHAR_
   250  #ifndef _T_WCHAR
   251  #ifndef __WCHAR_T
   252  #ifndef _WCHAR_T_
   253  #ifndef _BSD_WCHAR_T_
   254  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
   255  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   256  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   257  #ifndef _WCHAR_T_DEFINED_
   258  #ifndef _WCHAR_T_DEFINED
   259  #ifndef _WCHAR_T_H
   260  #ifndef ___int_wchar_t_h
   261  #ifndef __INT_WCHAR_T_H
   262  #ifndef _GCC_WCHAR_T
   263  #define __wchar_t__     /* BeOS */
   264  #define __WCHAR_T__     /* Cray Unicos/Mk */
   265  #define _WCHAR_T
   266  #define _T_WCHAR_
   267  #define _T_WCHAR
   268  #define __WCHAR_T
   269  #define _WCHAR_T_
   270  #define _BSD_WCHAR_T_
   271  #define _WCHAR_T_DEFINED_
   272  #define _WCHAR_T_DEFINED
   273  #define _WCHAR_T_H
   274  #define ___int_wchar_t_h
   275  #define __INT_WCHAR_T_H
   276  #define _GCC_WCHAR_T
   277  #define _WCHAR_T_DECLARED
   278  
   279  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   280     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   281     symbols in the _FOO_T_ family, stays defined even after its
   282     corresponding type is defined).  If we define wchar_t, then we
   283     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   284     we undef _WCHAR_T_, then we must also define rune_t, since 
   285     headers like runetype.h assume that if machine/ansi.h is included,
   286     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   287     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   288     the same type." */
   289  #ifdef _BSD_WCHAR_T_
   290  #undef _BSD_WCHAR_T_
   291  #ifdef _BSD_RUNE_T_
   292  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   293  typedef _BSD_RUNE_T_ rune_t;
   294  #define _BSD_WCHAR_T_DEFINED_
   295  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   296  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   297  /* Why is this file so hard to maintain properly?  In contrast to
   298     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   299     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   300     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   301  #undef _BSD_RUNE_T_

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   302  #endif
   303  #endif
   304  #endif
   305  #endif
   306  /* FreeBSD 5 can't be handled well using "traditional" logic above
   307     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   308     rune_t in some cases... */
   309  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   310  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   311  #if __BSD_VISIBLE
   312  #ifndef _RUNE_T_DECLARED
   313  typedef __rune_t        rune_t;
   314  #define _RUNE_T_DECLARED
   315  #endif
   316  #endif
   317  #endif
   318  #endif
   319  
   320  #ifndef __WCHAR_TYPE__
   321  #define __WCHAR_TYPE__ int
   322  #endif
   323  #ifndef __cplusplus
   324  typedef __WCHAR_TYPE__ wchar_t;
   325  #endif
   326  #endif
   327  #endif
   328  #endif
   329  #endif
   330  #endif
   331  #endif
   332  #endif /* _WCHAR_T_DECLARED */
   333  #endif /* _BSD_RUNE_T_DEFINED_ */
   334  #endif
   335  #endif
   336  #endif
   337  #endif
   338  #endif
   339  #endif
   340  #endif
   341  #endif /* __WCHAR_T__ */
   342  #endif /* __wchar_t__ */
   343  #undef  __need_wchar_t
   344  #endif /* _STDDEF_H or __need_wchar_t.  */
   345  
   346  #if defined (__need_wint_t)
   347  #ifndef _WINT_T
   348  #define _WINT_T
   349  
   350  #ifndef __WINT_TYPE__
   351  #define __WINT_TYPE__ unsigned int
   352  #endif
   353  typedef __WINT_TYPE__ wint_t;
   354  #endif
   355  #undef __need_wint_t
   356  #endif
   357  
   358  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   359      are already defined.  */
   360  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */
   361  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   362  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)
   363  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   364      are probably typos and should be removed before 2.8 is released.  *
        /
   365  #ifdef _GCC_PTRDIFF_T_
   366  #undef _PTRDIFF_T_
   367  #undef _BSD_PTRDIFF_T_
   368  #endif
   369  #ifdef _GCC_SIZE_T_
   370  #undef _SIZE_T_
   371  #undef _BSD_SIZE_T_
   372  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   373  #ifdef _GCC_WCHAR_T_
   374  #undef _WCHAR_T_
   375  #undef _BSD_WCHAR_T_
   376  #endif
   377  /*  The following ones are the real ones.  */
   378  #ifdef _GCC_PTRDIFF_T
   379  #undef _PTRDIFF_T_
   380  #undef _BSD_PTRDIFF_T_
   381  #endif
   382  #ifdef _GCC_SIZE_T
   383  #undef _SIZE_T_
   384  #undef _BSD_SIZE_T_
   385  #endif
   386  #ifdef _GCC_WCHAR_T
   387  #undef _WCHAR_T_
   388  #undef _BSD_WCHAR_T_
   389  #endif
   390  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */
   391  
   392  #endif /* __sys_stdtypes_h */
   393  
   394  /* A null pointer constant.  */
   395  
   396  #if defined (_STDDEF_H) || defined (__need_NULL)
   397  #undef NULL             /* in case <stdio.h> has defined it. */
   398  #ifdef __GNUG__
   399  #define NULL __null
   400  #else   /* G++ */
   401  #ifndef __cplusplus
   402  #define NULL ((void *)0)
   403  #else   /* C++ */
   404  #define NULL 0
   405  #endif  /* C++ */
   406  #endif  /* G++ */
   407  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   408  #undef  __need_NULL
   409  
   410  #ifdef _STDDEF_H
   411  
   412  /* Offset of member MEMBER in a struct of type TYPE. */
   413  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   414  
   415  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   416    || (defined(__cplusplus) && __cplusplus >= 201103L)
   417  #ifndef _GCC_MAX_ALIGN_T
   418  #define _GCC_MAX_ALIGN_T
   419  /* Type whose alignment is supported in every context and is at least
   420     as great as that of any standard type not using alignment
   421     specifiers.  */
   422  typedef struct {
   423    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));
   424    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   425  } max_align_t;
   426  #endif
   427  #endif /* C11 or C++11.  */
   428  
   429  #if defined(__cplusplus) && __cplusplus >= 201103L
   430  #ifndef _GXX_NULLPTR_T
   431  #define _GXX_NULLPTR_T
   432    typedef decltype(nullptr) nullptr_t;
   433  #endif
   434  #endif /* C++11.  */
   435  
   436  #endif /* _STDDEF_H was defined this time */
   437  
   438  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
   439            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
    51  # include <stddef.h>
    52  
    53  /* We try to get wint_t from <stddef.h>, but not all GCC versions defin
        e it

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    54     there.  So define it ourselves if it remains undefined.  */
    55  # ifndef _WINT_T
    56  /* Integral type unchanged by default argument promotions that can
    57     hold any value corresponding to members of the extended character
    58     set, as well as at least one value that does not correspond to any
    59     member of the extended character set.  */
    60  #  define _WINT_T
    61  typedef unsigned int wint_t;
    62  # else
    63  /* Work around problems with the <stddef.h> file which doesn't put
    64     wint_t in the std namespace.  */
    65  #  if defined __cplusplus && defined _GLIBCPP_USE_NAMESPACES \
    66        && defined __WINT_TYPE__
    67  __BEGIN_NAMESPACE_STD
    68  typedef __WINT_TYPE__ wint_t;
    69  __END_NAMESPACE_STD
    70  #  endif
    71  # endif
    72  
    73  /* Tell the caller that we provide correct C++ prototypes.  */
    74  # if defined __cplusplus && __GNUC_PREREQ (4, 4)
    75  #  define __CORRECT_ISO_CPP_WCHAR_H_PROTO
    76  # endif
    77  #endif
    78  
    79  #if (defined _WCHAR_H || defined __need_mbstate_t) && !defined ____mbst
        ate_t_defined
    80  # define ____mbstate_t_defined  1
    81  /* Conversion state information.  */
    82  typedef struct
    83  {
    84    int __count;
    85    union
    86    {
    87  # ifdef __WINT_TYPE__
    88      __WINT_TYPE__ __wch;
    89  # else
    90      wint_t __wch;
    91  # endif
    92      char __wchb[4];
    93    } __value;            /* Value so far.  */
    94  } __mbstate_t;
    95  #endif
    96  #undef __need_mbstate_t
    97  
    98  
    99  /* The rest of the file is only used if used if __need_mbstate_t is not
   100     defined.  */
   101  #ifdef _WCHAR_H
   102  
   103  # ifndef __mbstate_t_defined
   104  __BEGIN_NAMESPACE_C99
   105  /* Public type.  */
   106  typedef __mbstate_t mbstate_t;
   107  __END_NAMESPACE_C99
   108  #  define __mbstate_t_defined 1
   109  # endif
   110  
   111  #ifdef __USE_GNU
   112  __USING_NAMESPACE_C99(mbstate_t)
   113  #endif
   114  
   115  #ifndef WCHAR_MIN
   116  /* These constants might also be defined in <inttypes.h>.  */
   117  # define WCHAR_MIN __WCHAR_MIN
   118  # define WCHAR_MAX __WCHAR_MAX
   119  #endif
   120  
   121  #ifndef WEOF
   122  # define WEOF (0xffffffffu)
   123  #endif
   124  
   125  /* For XPG4 compliance we have to define the stuff from <wctype.h> here
   126     as well.  */
   127  #if defined __USE_XOPEN && !defined __USE_UNIX98

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   128  # include <wctype.h>
   129  #endif
   130  
   131  
   132  __BEGIN_DECLS
   133  
   134  __BEGIN_NAMESPACE_STD
   135  /* This incomplete type is defined in <time.h> but needed here because
   136     of `wcsftime'.  */
   137  struct tm;
   138  __END_NAMESPACE_STD
   139  /* XXX We have to clean this up at some point.  Since tm is in the std
   140     namespace but wcsftime is in __c99 the type wouldn't be found
   141     without inserting it in the global namespace.  */
   142  __USING_NAMESPACE_STD(tm)
   143  
   144  
   145  __BEGIN_NAMESPACE_STD
   146  /* Copy SRC to DEST.  */
   147  extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   148                          const wchar_t *__restrict __src) __THROW;
   149  /* Copy no more than N wide-characters of SRC to DEST.  */
   150  extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
   151                           const wchar_t *__restrict __src, size_t __n)
   152       __THROW;
   153  
   154  /* Append SRC onto DEST.  */
   155  extern wchar_t *wcscat (wchar_t *__restrict __dest,
   156                          const wchar_t *__restrict __src) __THROW;
   157  /* Append no more than N wide-characters of SRC onto DEST.  */
   158  extern wchar_t *wcsncat (wchar_t *__restrict __dest,
   159                           const wchar_t *__restrict __src, size_t __n)
   160       __THROW;
   161  
   162  /* Compare S1 and S2.  */
   163  extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
   164       __THROW __attribute_pure__;
   165  /* Compare N wide-characters of S1 and S2.  */
   166  extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __
        n)
   167       __THROW __attribute_pure__;
   168  __END_NAMESPACE_STD
   169  
   170  #ifdef __USE_XOPEN2K8
   171  /* Compare S1 and S2, ignoring case.  */
   172  extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) __THRO
        W;
   173  
   174  /* Compare no more than N chars of S1 and S2, ignoring case.  */
   175  extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   176                          size_t __n) __THROW;
   177  
   178  /* Similar to the two functions above but take the information from
   179     the provided locale and not the global locale.  */
   180  # include <xlocale.h>
   181  
   182  extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
   183                           __locale_t __loc) __THROW;
   184  
   185  extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
   186                            size_t __n, __locale_t __loc) __THROW;
   187  #endif
   188  
   189  __BEGIN_NAMESPACE_STD
   190  /* Compare S1 and S2, both interpreted as appropriate to the
   191     LC_COLLATE category of the current locale.  */
   192  extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) __THROW;
   193  /* Transform S2 into array pointed to by S1 such that if wcscmp is
   194     applied to two transformed strings the result is the as applying
   195     `wcscoll' to the original strings.  */
   196  extern size_t wcsxfrm (wchar_t *__restrict __s1,
   197                         const wchar_t *__restrict __s2, size_t __n) __TH
        ROW;
   198  __END_NAMESPACE_STD
   199  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   200  #ifdef __USE_XOPEN2K8
   201  /* Similar to the two functions above but take the information from
   202     the provided locale and not the global locale.  */
   203  
   204  /* Compare S1 and S2, both interpreted as appropriate to the
   205     LC_COLLATE category of the given locale.  */
   206  extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
   207                        __locale_t __loc) __THROW;
   208  
   209  /* Transform S2 into array pointed to by S1 such that if wcscmp is
   210     applied to two transformed strings the result is the as applying
   211     `wcscoll' to the original strings.  */
   212  extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
   213                           size_t __n, __locale_t __loc) __THROW;
   214  
   215  /* Duplicate S, returning an identical malloc'd string.  */
   216  extern wchar_t *wcsdup (const wchar_t *__s) __THROW __attribute_malloc_
        _;
   217  #endif
   218  
   219  __BEGIN_NAMESPACE_STD
   220  /* Find the first occurrence of WC in WCS.  */
   221  #ifdef __CORRECT_ISO_CPP_WCHAR_H_PROTO
   222  extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
   223       __THROW __asm ("wcschr") __attribute_pure__;
   224  extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
   225       __THROW __asm ("wcschr") __attribute_pure__;
   226  #else
   227  extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
   228       __THROW __attribute_pure__;
   229  #endif
   230  /* Find the last occurrence of WC in WCS.  */
   231  #ifdef __CORRECT_ISO_CPP_WCHAR_H_PROTO
   232  extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
   233       __THROW __asm ("wcsrchr") __attribute_pure__;
   234  extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc
        )
   235       __THROW __asm ("wcsrchr") __attribute_pure__;
   236  #else
   237  extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
   238       __THROW __attribute_pure__;
   239  #endif
   240  __END_NAMESPACE_STD
   241  
   242  #ifdef __USE_GNU
   243  /* This function is similar to `wcschr'.  But it returns a pointer to
   244     the closing NUL wide character in case C is not found in S.  */
   245  extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
   246       __THROW __attribute_pure__;
   247  #endif
   248  
   249  __BEGIN_NAMESPACE_STD
   250  /* Return the length of the initial segmet of WCS which
   251     consists entirely of wide characters not in REJECT.  */
   252  extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
   253       __THROW __attribute_pure__;
   254  /* Return the length of the initial segmet of WCS which
   255     consists entirely of wide characters in  ACCEPT.  */
   256  extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
   257       __THROW __attribute_pure__;
   258  /* Find the first occurrence in WCS of any character in ACCEPT.  */
   259  #ifdef __CORRECT_ISO_CPP_WCHAR_H_PROTO
   260  extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
   261       __THROW __asm ("wcspbrk") __attribute_pure__;
   262  extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
   263                                       const wchar_t *__accept)
   264       __THROW __asm ("wcspbrk") __attribute_pure__;
   265  #else
   266  extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)
   267       __THROW __attribute_pure__;
   268  #endif
   269  /* Find the first occurrence of NEEDLE in HAYSTACK.  */
   270  #ifdef __CORRECT_ISO_CPP_WCHAR_H_PROTO
   271  extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__nee
        dle)

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   272       __THROW __asm ("wcsstr") __attribute_pure__;
   273  extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
   274                                      const wchar_t *__needle)
   275       __THROW __asm ("wcsstr") __attribute_pure__;
   276  #else
   277  extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__nee
        dle)
   278       __THROW __attribute_pure__;
   279  #endif
   280  
   281  /* Divide WCS into tokens separated by characters in DELIM.  */
   282  extern wchar_t *wcstok (wchar_t *__restrict __s,
   283                          const wchar_t *__restrict __delim,
   284                          wchar_t **__restrict __ptr) __THROW;
   285  
   286  /* Return the number of wide characters in S.  */
   287  extern size_t wcslen (const wchar_t *__s) __THROW __attribute_pure__;
   288  __END_NAMESPACE_STD
   289  
   290  #ifdef __USE_XOPEN
   291  /* Another name for `wcsstr' from XPG4.  */
   292  # ifdef __CORRECT_ISO_CPP_WCHAR_H_PROTO
   293  extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__nee
        dle)
   294       __THROW __asm ("wcswcs") __attribute_pure__;
   295  extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
   296                                      const wchar_t *__needle)
   297       __THROW __asm ("wcswcs") __attribute_pure__;
   298  # else
   299  extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__nee
        dle)
   300       __THROW __attribute_pure__;
   301  # endif
   302  #endif
   303  
   304  #ifdef __USE_XOPEN2K8
   305  /* Return the number of wide characters in S, but at most MAXLEN.  */
   306  extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
   307       __THROW __attribute_pure__;
   308  #endif
   309  
   310  
   311  __BEGIN_NAMESPACE_STD
   312  /* Search N wide characters of S for C.  */
   313  #ifdef __CORRECT_ISO_CPP_WCHAR_H_PROTO
   314  extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
   315       __THROW __asm ("wmemchr") __attribute_pure__;
   316  extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
   317                                       size_t __n)
   318       __THROW __asm ("wmemchr") __attribute_pure__;
   319  #else
   320  extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)
   321       __THROW __attribute_pure__;
   322  #endif
   323  
   324  /* Compare N wide characters of S1 and S2.  */
   325  extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __
        n)
   326       __THROW __attribute_pure__;
   327  
   328  /* Copy N wide characters of SRC to DEST.  */
   329  extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
   330                           const wchar_t *__restrict __s2, size_t __n) __
        THROW;
   331  
   332  /* Copy N wide characters of SRC to DEST, guaranteeing
   333     correct behavior for overlapping strings.  */
   334  extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __
        n)
   335       __THROW;
   336  
   337  /* Set N wide characters of S to C.  */
   338  extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) __THROW
        ;
   339  __END_NAMESPACE_STD

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   340  
   341  #ifdef __USE_GNU
   342  /* Copy N wide characters of SRC to DEST and return pointer to followin
        g
   343     wide character.  */
   344  extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
   345                            const wchar_t *__restrict __s2, size_t __n)
   346       __THROW;
   347  #endif
   348  
   349  
   350  __BEGIN_NAMESPACE_STD
   351  /* Determine whether C constitutes a valid (one-byte) multibyte
   352     character.  */
   353  extern wint_t btowc (int __c) __THROW;
   354  
   355  /* Determine whether C corresponds to a member of the extended
   356     character set whose multibyte representation is a single byte.  */
   357  extern int wctob (wint_t __c) __THROW;
   358  
   359  /* Determine whether PS points to an object representing the initial
   360     state.  */
   361  extern int mbsinit (const mbstate_t *__ps) __THROW __attribute_pure__;
   362  
   363  /* Write wide character representation of multibyte character pointed
   364     to by S to PWC.  */
   365  extern size_t mbrtowc (wchar_t *__restrict __pwc,
   366                         const char *__restrict __s, size_t __n,
   367                         mbstate_t *__restrict __p) __THROW;
   368  
   369  /* Write multibyte representation of wide character WC to S.  */
   370  extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
   371                         mbstate_t *__restrict __ps) __THROW;
   372  
   373  /* Return number of bytes in multibyte character pointed to by S.  */
   374  extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   375                          mbstate_t *__restrict __ps) __THROW;
   376  extern size_t mbrlen (const char *__restrict __s, size_t __n,
   377                        mbstate_t *__restrict __ps) __THROW;
   378  __END_NAMESPACE_STD
   379  
   380  #ifdef __USE_EXTERN_INLINES
   381  /* Define inline function as optimization.  */
   382  
   383  /* We can use the BTOWC and WCTOB optimizations since we know that all
   384     locales must use ASCII encoding for the values in the ASCII range
   385     and because the wchar_t encoding is always ISO 10646.  */
   386  extern wint_t __btowc_alias (int __c) __asm ("btowc");
   387  __extern_inline wint_t
   388  __NTH (btowc (int __c))
   389  { return (__builtin_constant_p (__c) && __c >= '\0' && __c <= '\x7f'
   390            ? (wint_t) __c : __btowc_alias (__c)); }
   391  
   392  extern int __wctob_alias (wint_t __c) __asm ("wctob");
   393  __extern_inline int
   394  __NTH (wctob (wint_t __wc))
   395  { return (__builtin_constant_p (__wc) && __wc >= L'\0' && __wc <= L'\x7
        f'
   396            ? (int) __wc : __wctob_alias (__wc)); }
   397  
   398  __extern_inline size_t
   399  __NTH (mbrlen (const char *__restrict __s, size_t __n,
   400                 mbstate_t *__restrict __ps))
   401  { return (__ps != NULL
   402            ? mbrtowc (NULL, __s, __n, __ps) : __mbrlen (__s, __n, NULL))
        ; }
   403  #endif
   404  
   405  __BEGIN_NAMESPACE_STD
   406  /* Write wide character representation of multibyte character string
   407     SRC to DST.  */
   408  extern size_t mbsrtowcs (wchar_t *__restrict __dst,
   409                           const char **__restrict __src, size_t __len,
   410                           mbstate_t *__restrict __ps) __THROW;
   411  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   412  /* Write multibyte character representation of wide character string
   413     SRC to DST.  */
   414  extern size_t wcsrtombs (char *__restrict __dst,
   415                           const wchar_t **__restrict __src, size_t __len
        ,
   416                           mbstate_t *__restrict __ps) __THROW;
   417  __END_NAMESPACE_STD
   418  
   419  
   420  #ifdef  __USE_XOPEN2K8
   421  /* Write wide character representation of at most NMC bytes of the
   422     multibyte character string SRC to DST.  */
   423  extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
   424                            const char **__restrict __src, size_t __nmc,
   425                            size_t __len, mbstate_t *__restrict __ps) __T
        HROW;
   426  
   427  /* Write multibyte character representation of at most NWC characters
   428     from the wide character string SRC to DST.  */
   429  extern size_t wcsnrtombs (char *__restrict __dst,
   430                            const wchar_t **__restrict __src,
   431                            size_t __nwc, size_t __len,
   432                            mbstate_t *__restrict __ps) __THROW;
   433  #endif  /* use POSIX 2008 */
   434  
   435  
   436  /* The following functions are extensions found in X/Open CAE.  */
   437  #ifdef __USE_XOPEN
   438  /* Determine number of column positions required for C.  */
   439  extern int wcwidth (wchar_t __c) __THROW;
   440  
   441  /* Determine number of column positions required for first N wide
   442     characters (or fewer if S ends before this) in S.  */
   443  extern int wcswidth (const wchar_t *__s, size_t __n) __THROW;
   444  #endif  /* Use X/Open.  */
   445  
   446  
   447  __BEGIN_NAMESPACE_STD
   448  /* Convert initial portion of the wide string NPTR to `double'
   449     representation.  */
   450  extern double wcstod (const wchar_t *__restrict __nptr,
   451                        wchar_t **__restrict __endptr) __THROW;
   452  __END_NAMESPACE_STD
   453  
   454  #ifdef __USE_ISOC99
   455  __BEGIN_NAMESPACE_C99
   456  /* Likewise for `float' and `long double' sizes of floating-point numbe
        rs.  */
   457  extern float wcstof (const wchar_t *__restrict __nptr,
   458                       wchar_t **__restrict __endptr) __THROW;
   459  extern long double wcstold (const wchar_t *__restrict __nptr,
   460                              wchar_t **__restrict __endptr) __THROW;
   461  __END_NAMESPACE_C99
   462  #endif /* C99 */
   463  
   464  
   465  __BEGIN_NAMESPACE_STD
   466  /* Convert initial portion of wide string NPTR to `long int'
   467     representation.  */
   468  extern long int wcstol (const wchar_t *__restrict __nptr,
   469                          wchar_t **__restrict __endptr, int __base) __TH
        ROW;
   470  
   471  /* Convert initial portion of wide string NPTR to `unsigned long int'
   472     representation.  */
   473  extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
   474                                    wchar_t **__restrict __endptr, int __
        base)
   475       __THROW;
   476  __END_NAMESPACE_STD
   477  
   478  #if defined __USE_ISOC99 || (defined __GNUC__ && defined __USE_GNU)
   479  __BEGIN_NAMESPACE_C99
   480  /* Convert initial portion of wide string NPTR to `long long int'
   481     representation.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   482  __extension__
   483  extern long long int wcstoll (const wchar_t *__restrict __nptr,
   484                                wchar_t **__restrict __endptr, int __base
        )
   485       __THROW;
   486  
   487  /* Convert initial portion of wide string NPTR to `unsigned long long i
        nt'
   488     representation.  */
   489  __extension__
   490  extern unsigned long long int wcstoull (const wchar_t *__restrict __npt
        r,
   491                                          wchar_t **__restrict __endptr,
   492                                          int __base) __THROW;
   493  __END_NAMESPACE_C99
   494  #endif /* ISO C99 or GCC and GNU.  */
   495  
   496  #if defined __GNUC__ && defined __USE_GNU
   497  /* Convert initial portion of wide string NPTR to `long long int'
   498     representation.  */
   499  __extension__
   500  extern long long int wcstoq (const wchar_t *__restrict __nptr,
   501                               wchar_t **__restrict __endptr, int __base)
   502       __THROW;
   503  
   504  /* Convert initial portion of wide string NPTR to `unsigned long long i
        nt'
   505     representation.  */
   506  __extension__
   507  extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr
        ,
   508                                         wchar_t **__restrict __endptr,
   509                                         int __base) __THROW;
   510  #endif /* GCC and use GNU.  */
   511  
   512  #ifdef __USE_GNU
   513  /* The concept of one static locale per category is not very well
   514     thought out.  Many applications will need to process its data using
   515     information from several different locales.  Another application is
   516     the implementation of the internationalization handling in the
   517     upcoming ISO C++ standard library.  To support this another set of
   518     the functions using locale data exist which have an additional
   519     argument.
   520  
   521     Attention: all these functions are *not* standardized in any form.
   522     This is a proof-of-concept implementation.  */
   523  
   524  /* Structure for reentrant locale using functions.  This is an
   525     (almost) opaque type for the user level programs.  */
   526  # include <xlocale.h>
   527  
   528  /* Special versions of the functions above which take the locale to
   529     use as an additional parameter.  */
   530  extern long int wcstol_l (const wchar_t *__restrict __nptr,
   531                            wchar_t **__restrict __endptr, int __base,
   532                            __locale_t __loc) __THROW;
   533  
   534  extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
   535                                      wchar_t **__restrict __endptr,
   536                                      int __base, __locale_t __loc) __THR
        OW;
   537  
   538  __extension__
   539  extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
   540                                  wchar_t **__restrict __endptr,
   541                                  int __base, __locale_t __loc) __THROW;
   542  
   543  __extension__
   544  extern unsigned long long int wcstoull_l (const wchar_t *__restrict __n
        ptr,
   545                                            wchar_t **__restrict __endptr
        ,
   546                                            int __base, __locale_t __loc)
   547       __THROW;
   548  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   549  extern double wcstod_l (const wchar_t *__restrict __nptr,
   550                          wchar_t **__restrict __endptr, __locale_t __loc
        )
   551       __THROW;
   552  
   553  extern float wcstof_l (const wchar_t *__restrict __nptr,
   554                         wchar_t **__restrict __endptr, __locale_t __loc)
   555       __THROW;
   556  
   557  extern long double wcstold_l (const wchar_t *__restrict __nptr,
   558                                wchar_t **__restrict __endptr,
   559                                __locale_t __loc) __THROW;
   560  #endif  /* use GNU */
   561  
   562  
   563  #ifdef __USE_XOPEN2K8
   564  /* Copy SRC to DEST, returning the address of the terminating L'\0' in
   565     DEST.  */
   566  extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   567                          const wchar_t *__restrict __src) __THROW;
   568  
   569  /* Copy no more than N characters of SRC to DEST, returning the address
         of
   570     the last character written into DEST.  */
   571  extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
   572                           const wchar_t *__restrict __src, size_t __n)
   573       __THROW;
   574  
   575  
   576  /* Wide character I/O functions.  */
   577  
   578  /* Like OPEN_MEMSTREAM, but the stream is wide oriented and produces
   579     a wide character string.  */
   580  extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) 
        __THROW;
   581  #endif
   582  
   583  #if defined __USE_ISOC95 || defined __USE_UNIX98
   584  __BEGIN_NAMESPACE_STD
   585  
   586  /* Select orientation for stream.  */
   587  extern int fwide (__FILE *__fp, int __mode) __THROW;
   588  
   589  
   590  /* Write formatted output to STREAM.
   591  
   592     This function is a possible cancellation point and therefore not
   593     marked with __THROW.  */
   594  extern int fwprintf (__FILE *__restrict __stream,
   595                       const wchar_t *__restrict __format, ...)
   596       /* __attribute__ ((__format__ (__wprintf__, 2, 3))) */;
   597  /* Write formatted output to stdout.
   598  
   599     This function is a possible cancellation point and therefore not
   600     marked with __THROW.  */
   601  extern int wprintf (const wchar_t *__restrict __format, ...)
   602       /* __attribute__ ((__format__ (__wprintf__, 1, 2))) */;
   603  /* Write formatted output of at most N characters to S.  */
   604  extern int swprintf (wchar_t *__restrict __s, size_t __n,
   605                       const wchar_t *__restrict __format, ...)
   606       __THROW /* __attribute__ ((__format__ (__wprintf__, 3, 4))) */;
   607  
   608  /* Write formatted output to S from argument list ARG.
   609  
   610     This function is a possible cancellation point and therefore not
   611     marked with __THROW.  */
   612  extern int vfwprintf (__FILE *__restrict __s,
   613                        const wchar_t *__restrict __format,
   614                        __gnuc_va_list __arg)
   615       /* __attribute__ ((__format__ (__wprintf__, 2, 0))) */;
   616  /* Write formatted output to stdout from argument list ARG.
   617  
   618     This function is a possible cancellation point and therefore not
   619     marked with __THROW.  */
   620  extern int vwprintf (const wchar_t *__restrict __format,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   621                       __gnuc_va_list __arg)
   622       /* __attribute__ ((__format__ (__wprintf__, 1, 0))) */;
   623  /* Write formatted output of at most N character to S from argument
   624     list ARG.  */
   625  extern int vswprintf (wchar_t *__restrict __s, size_t __n,
   626                        const wchar_t *__restrict __format,
   627                        __gnuc_va_list __arg)
   628       __THROW /* __attribute__ ((__format__ (__wprintf__, 3, 0))) */;
   629  
   630  
   631  /* Read formatted input from STREAM.
   632  
   633     This function is a possible cancellation point and therefore not
   634     marked with __THROW.  */
   635  extern int fwscanf (__FILE *__restrict __stream,
   636                      const wchar_t *__restrict __format, ...)
   637       /* __attribute__ ((__format__ (__wscanf__, 2, 3))) */;
   638  /* Read formatted input from stdin.
   639  
   640     This function is a possible cancellation point and therefore not
   641     marked with __THROW.  */
   642  extern int wscanf (const wchar_t *__restrict __format, ...)
   643       /* __attribute__ ((__format__ (__wscanf__, 1, 2))) */;
   644  /* Read formatted input from S.  */
   645  extern int swscanf (const wchar_t *__restrict __s,
   646                      const wchar_t *__restrict __format, ...)
   647       __THROW /* __attribute__ ((__format__ (__wscanf__, 2, 3))) */;
   648  
   649  # if defined __USE_ISOC99 && !defined __USE_GNU \
   650       && (!defined __LDBL_COMPAT || !defined __REDIRECT) \
   651       && (defined __STRICT_ANSI__ || defined __USE_XOPEN2K)
   652  #  ifdef __REDIRECT
   653  /* For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[
   654     GNU extension which conflicts with valid %a followed by letter
   655     s, S or [.  */
   656  extern int __REDIRECT (fwscanf, (__FILE *__restrict __stream,
   657                                   const wchar_t *__restrict __format, ..
        .),
   658                         __isoc99_fwscanf)
   659       /* __attribute__ ((__format__ (__wscanf__, 2, 3))) */;
   660  extern int __REDIRECT (wscanf, (const wchar_t *__restrict __format, ...
        ),
   661                         __isoc99_wscanf)
   662       /* __attribute__ ((__format__ (__wscanf__, 1, 2))) */;
   663  extern int __REDIRECT_NTH (swscanf, (const wchar_t *__restrict __s,
   664                                       const wchar_t *__restrict __format
        ,
   665                                       ...), __isoc99_swscanf)
   666       /* __attribute__ ((__format__ (__wscanf__, 2, 3))) */;
   667  #  else
   668  extern int __isoc99_fwscanf (__FILE *__restrict __stream,
   669                               const wchar_t *__restrict __format, ...);
   670  extern int __isoc99_wscanf (const wchar_t *__restrict __format, ...);
   671  extern int __isoc99_swscanf (const wchar_t *__restrict __s,
   672                               const wchar_t *__restrict __format, ...)
   673       __THROW;
   674  #   define fwscanf __isoc99_fwscanf
   675  #   define wscanf __isoc99_wscanf
   676  #   define swscanf __isoc99_swscanf
   677  #  endif
   678  # endif
   679  
   680  __END_NAMESPACE_STD
   681  #endif /* Use ISO C95, C99 and Unix98. */
   682  
   683  #ifdef __USE_ISOC99
   684  __BEGIN_NAMESPACE_C99
   685  /* Read formatted input from S into argument list ARG.
   686  
   687     This function is a possible cancellation point and therefore not
   688     marked with __THROW.  */
   689  extern int vfwscanf (__FILE *__restrict __s,
   690                       const wchar_t *__restrict __format,
   691                       __gnuc_va_list __arg)
   692       /* __attribute__ ((__format__ (__wscanf__, 2, 0))) */;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   693  /* Read formatted input from stdin into argument list ARG.
   694  
   695     This function is a possible cancellation point and therefore not
   696     marked with __THROW.  */
   697  extern int vwscanf (const wchar_t *__restrict __format,
   698                      __gnuc_va_list __arg)
   699       /* __attribute__ ((__format__ (__wscanf__, 1, 0))) */;
   700  /* Read formatted input from S into argument list ARG.  */
   701  extern int vswscanf (const wchar_t *__restrict __s,
   702                       const wchar_t *__restrict __format,
   703                       __gnuc_va_list __arg)
   704       __THROW /* __attribute__ ((__format__ (__wscanf__, 2, 0))) */;
   705  
   706  # if !defined __USE_GNU \
   707       && (!defined __LDBL_COMPAT || !defined __REDIRECT) \
   708       && (defined __STRICT_ANSI__ || defined __USE_XOPEN2K)
   709  #  ifdef __REDIRECT
   710  extern int __REDIRECT (vfwscanf, (__FILE *__restrict __s,
   711                                    const wchar_t *__restrict __format,
   712                                    __gnuc_va_list __arg), __isoc99_vfwsc
        anf)
   713       /* __attribute__ ((__format__ (__wscanf__, 2, 0))) */;
   714  extern int __REDIRECT (vwscanf, (const wchar_t *__restrict __format,
   715                                   __gnuc_va_list __arg), __isoc99_vwscan
        f)
   716       /* __attribute__ ((__format__ (__wscanf__, 1, 0))) */;
   717  extern int __REDIRECT_NTH (vswscanf, (const wchar_t *__restrict __s,
   718                                        const wchar_t *__restrict __forma
        t,
   719                                        __gnuc_va_list __arg), __isoc99_v
        swscanf)
   720       /* __attribute__ ((__format__ (__wscanf__, 2, 0))) */;
   721  #  else
   722  extern int __isoc99_vfwscanf (__FILE *__restrict __s,
   723                                const wchar_t *__restrict __format,
   724                                __gnuc_va_list __arg);
   725  extern int __isoc99_vwscanf (const wchar_t *__restrict __format,
   726                               __gnuc_va_list __arg);
   727  extern int __isoc99_vswscanf (const wchar_t *__restrict __s,
   728                                const wchar_t *__restrict __format,
   729                                __gnuc_va_list __arg) __THROW;
   730  #   define vfwscanf __isoc99_vfwscanf
   731  #   define vwscanf __isoc99_vwscanf
   732  #   define vswscanf __isoc99_vswscanf
   733  #  endif
   734  # endif
   735  
   736  __END_NAMESPACE_C99
   737  #endif /* Use ISO C99. */
   738  
   739  
   740  __BEGIN_NAMESPACE_STD
   741  /* Read a character from STREAM.
   742  
   743     These functions are possible cancellation points and therefore not
   744     marked with __THROW.  */
   745  extern wint_t fgetwc (__FILE *__stream);
   746  extern wint_t getwc (__FILE *__stream);
   747  
   748  /* Read a character from stdin.
   749  
   750     This function is a possible cancellation point and therefore not
   751     marked with __THROW.  */
   752  extern wint_t getwchar (void);
   753  
   754  
   755  /* Write a character to STREAM.
   756  
   757     These functions are possible cancellation points and therefore not
   758     marked with __THROW.  */
   759  extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
   760  extern wint_t putwc (wchar_t __wc, __FILE *__stream);
   761  
   762  /* Write a character to stdout.
   763  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   764     This function is a possible cancellation point and therefore not
   765     marked with __THROW.  */
   766  extern wint_t putwchar (wchar_t __wc);
   767  
   768  
   769  /* Get a newline-terminated wide character string of finite length
   770     from STREAM.
   771  
   772     This function is a possible cancellation point and therefore not
   773     marked with __THROW.  */
   774  extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   775                          __FILE *__restrict __stream);
   776  
   777  /* Write a string to STREAM.
   778  
   779     This function is a possible cancellation point and therefore not
   780     marked with __THROW.  */
   781  extern int fputws (const wchar_t *__restrict __ws,
   782                     __FILE *__restrict __stream);
   783  
   784  
   785  /* Push a character back onto the input buffer of STREAM.
   786  
   787     This function is a possible cancellation point and therefore not
   788     marked with __THROW.  */
   789  extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
   790  __END_NAMESPACE_STD
   791  
   792  
   793  #ifdef __USE_GNU
   794  /* These are defined to be equivalent to the `char' functions defined
   795     in POSIX.1:1996.
   796  
   797     These functions are not part of POSIX and therefore no official
   798     cancellation point.  But due to similarity with an POSIX interface
   799     or due to the implementation they are cancellation points and
   800     therefore not marked with __THROW.  */
   801  extern wint_t getwc_unlocked (__FILE *__stream);
   802  extern wint_t getwchar_unlocked (void);
   803  
   804  /* This is the wide character version of a GNU extension.
   805  
   806     This function is not part of POSIX and therefore no official
   807     cancellation point.  But due to similarity with an POSIX interface
   808     or due to the implementation it is a cancellation point and
   809     therefore not marked with __THROW.  */
   810  extern wint_t fgetwc_unlocked (__FILE *__stream);
   811  
   812  /* Faster version when locking is not necessary.
   813  
   814     This function is not part of POSIX and therefore no official
   815     cancellation point.  But due to similarity with an POSIX interface
   816     or due to the implementation it is a cancellation point and
   817     therefore not marked with __THROW.  */
   818  extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
   819  
   820  /* These are defined to be equivalent to the `char' functions defined
   821     in POSIX.1:1996.
   822  
   823     These functions are not part of POSIX and therefore no official
   824     cancellation point.  But due to similarity with an POSIX interface
   825     or due to the implementation they are cancellation points and
   826     therefore not marked with __THROW.  */
   827  extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
   828  extern wint_t putwchar_unlocked (wchar_t __wc);
   829  
   830  
   831  /* This function does the same as `fgetws' but does not lock the stream
        .
   832  
   833     This function is not part of POSIX and therefore no official
   834     cancellation point.  But due to similarity with an POSIX interface
   835     or due to the implementation it is a cancellation point and
   836     therefore not marked with __THROW.  */
   837  extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   838                                   __FILE *__restrict __stream);
   839  
   840  /* This function does the same as `fputws' but does not lock the stream
        .
   841  
   842     This function is not part of POSIX and therefore no official
   843     cancellation point.  But due to similarity with an POSIX interface
   844     or due to the implementation it is a cancellation point and
   845     therefore not marked with __THROW.  */
   846  extern int fputws_unlocked (const wchar_t *__restrict __ws,
   847                              __FILE *__restrict __stream);
   848  #endif
   849  
   850  
   851  __BEGIN_NAMESPACE_C99
   852  /* Format TP into S according to FORMAT.
   853     Write no more than MAXSIZE wide characters and return the number
   854     of wide characters written, or 0 if it would exceed MAXSIZE.  */
   855  extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   856                          const wchar_t *__restrict __format,
   857                          const struct tm *__restrict __tp) __THROW;
   858  __END_NAMESPACE_C99
   859  
   860  # ifdef __USE_GNU
   861  # include <xlocale.h>
   862  
   863  /* Similar to `wcsftime' but takes the information from
   864     the provided locale and not the global locale.  */
   865  extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
   866                            const wchar_t *__restrict __format,
   867                            const struct tm *__restrict __tp,
   868                            __locale_t __loc) __THROW;
   869  # endif
   870  
   871  /* The X/Open standard demands that most of the functions defined in
   872     the <wctype.h> header must also appear here.  This is probably
   873     because some X/Open members wrote their implementation before the
   874     ISO C standard was published and introduced the better solution.
   875     We have to provide these definitions for compliance reasons but we
   876     do this nonsense only if really necessary.  */
   877  #if defined __USE_UNIX98 && !defined __USE_GNU
   878  # define __need_iswxxx
   879  # include <wctype.h>
   880  #endif
   881  
   882  /* Define some macros helping to catch buffer overflows.  */
   883  #if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
   884  # include <bits/wchar2.h>
   885  #endif
   886  
   887  #ifdef __LDBL_COMPAT
   888  # include <bits/wchar-ldbl.h>
   889  #endif
   890  
   891  __END_DECLS
   892  
   893  #endif  /* _WCHAR_H defined */
   894  
   895  #endif /* wchar.h  */
   896  
   897  /* Undefine all __need_* constants in case we are included to get those
   898     constants but the whole file was already read.  */
   899  #undef __need_mbstate_t
   900  #undef __need_wint_t
Close file: /usr/include/wchar.h
    20  #include <wchar.h>
    21  typedef struct
    22  {
    23    __off_t __pos;
    24    __mbstate_t __state;
    25  } _G_fpos_t;
    26  typedef struct
    27  {
    28    __off64_t __pos;
    29    __mbstate_t __state;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    30  } _G_fpos64_t;
    31  #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
    32  # include <gconv.h>
    33  typedef union
    34  {
    35    struct __gconv_info __cd;
    36    struct
    37    {
    38      struct __gconv_info __cd;
    39      struct __gconv_step_data __data;
    40    } __combined;
    41  } _G_iconv_t;
    42  #endif
    43  
    44  
    45  /* These library features are always available in the GNU C library.  *
        /
    46  #define _G_va_list __gnuc_va_list
    47  
    48  #define _G_HAVE_MMAP 1
    49  #define _G_HAVE_MREMAP 1
    50  
    51  #define _G_IO_IO_FILE_VERSION 0x20001
    52  
    53  /* This is defined by <bits/stat.h> if `st_blksize' exists.  */
    54  #define _G_HAVE_ST_BLKSIZE defined (_STATBUF_ST_BLKSIZE)
    55  
    56  #define _G_BUFSIZ 8192
    57  
    58  #endif  /* _G_config.h */
Close file: /usr/include/_G_config.h
    32  #include <_G_config.h>
    33  /* ALL of these should be defined in _G_config.h */
    34  #define _IO_fpos_t _G_fpos_t
    35  #define _IO_fpos64_t _G_fpos64_t
    36  #define _IO_size_t size_t
    37  #define _IO_ssize_t __ssize_t
    38  #define _IO_off_t __off_t
    39  #define _IO_off64_t __off64_t
    40  #define _IO_pid_t __pid_t
    41  #define _IO_uid_t __uid_t
    42  #define _IO_iconv_t _G_iconv_t
    43  #define _IO_HAVE_ST_BLKSIZE _G_HAVE_ST_BLKSIZE
    44  #define _IO_BUFSIZ _G_BUFSIZ
    45  #define _IO_va_list _G_va_list
    46  #define _IO_wint_t wint_t
    47  
    48  /* This define avoids name pollution if we're using GNU stdarg.h */
    49  #define __need___va_list
Open file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stdarg.h
     1  /* Copyright (C) 1989-2013 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.15  Variable arguments  <stdarg.h>

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    26   */
    27  
    28  #ifndef _STDARG_H
    29  #ifndef _ANSI_STDARG_H_
    30  #ifndef __need___va_list
    31  #define _STDARG_H
    32  #define _ANSI_STDARG_H_
    33  #endif /* not __need___va_list */
    34  #undef __need___va_list
    35  
    36  /* Define __gnuc_va_list.  */
    37  
    38  #ifndef __GNUC_VA_LIST
    39  #define __GNUC_VA_LIST
    40  typedef __builtin_va_list __gnuc_va_list;
    41  #endif
    42  
    43  /* Define the standard macros for the user,
    44     if this invocation was from the user program.  */
    45  #ifdef _STDARG_H
    46  
    47  #define va_start(v,l)   __builtin_va_start(v,l)
    48  #define va_end(v)       __builtin_va_end(v)
    49  #define va_arg(v,l)     __builtin_va_arg(v,l)
    50  #if !defined(__STRICT_ANSI__) || __STDC_VERSION__ + 0 >= 199900L || def
        ined(__GXX_EXPERIMENTAL_CXX0X__)
    51  #define va_copy(d,s)    __builtin_va_copy(d,s)
    52  #endif
    53  #define __va_copy(d,s)  __builtin_va_copy(d,s)
    54  
    55  /* Define va_list, if desired, from __gnuc_va_list. */
    56  /* We deliberately do not define va_list when called from
    57     stdio.h, because ANSI C says that stdio.h is not supposed to define
    58     va_list.  stdio.h needs to have access to that data type, 
    59     but must not use that name.  It should use the name __gnuc_va_list,
    60     which is safe because it is reserved for the implementation.  */
    61  
    62  #ifdef _BSD_VA_LIST
    63  #undef _BSD_VA_LIST
    64  #endif
    65  
    66  #if defined(__svr4__) || (defined(_SCO_DS) && !defined(__VA_LIST))
    67  /* SVR4.2 uses _VA_LIST for an internal alias for va_list,
    68     so we must avoid testing it and setting it here.
    69     SVR4 uses _VA_LIST as a flag in stdarg.h, but we should
    70     have no conflict with that.  */
    71  #ifndef _VA_LIST_
    72  #define _VA_LIST_
    73  #ifdef __i860__
    74  #ifndef _VA_LIST
    75  #define _VA_LIST va_list
    76  #endif
    77  #endif /* __i860__ */
    78  typedef __gnuc_va_list va_list;
    79  #ifdef _SCO_DS
    80  #define __VA_LIST
    81  #endif
    82  #endif /* _VA_LIST_ */
    83  #else /* not __svr4__ || _SCO_DS */
    84  
    85  /* The macro _VA_LIST_ is the same thing used by this file in Ultrix.
    86     But on BSD NET2 we must not test or define or undef it.
    87     (Note that the comments in NET 2's ansi.h
    88     are incorrect for _VA_LIST_--see stdio.h!)  */
    89  #if !defined (_VA_LIST_) || defined (__BSD_NET2__) || defined (____386B
        SD____) || defined (__bsdi__) || defined (__sequent__) || defined (__Fr
        eeBSD__) || defined(WINNT)
    90  /* The macro _VA_LIST_DEFINED is used in Windows NT 3.5  */
    91  #ifndef _VA_LIST_DEFINED
    92  /* The macro _VA_LIST is used in SCO Unix 3.2.  */
    93  #ifndef _VA_LIST
    94  /* The macro _VA_LIST_T_H is used in the Bull dpx2  */
    95  #ifndef _VA_LIST_T_H
    96  /* The macro __va_list__ is used by BeOS.  */
    97  #ifndef __va_list__

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    98  typedef __gnuc_va_list va_list;
    99  #endif /* not __va_list__ */
   100  #endif /* not _VA_LIST_T_H */
   101  #endif /* not _VA_LIST */
   102  #endif /* not _VA_LIST_DEFINED */
   103  #if !(defined (__BSD_NET2__) || defined (____386BSD____) || defined (__
        bsdi__) || defined (__sequent__) || defined (__FreeBSD__))
   104  #define _VA_LIST_
   105  #endif
   106  #ifndef _VA_LIST
   107  #define _VA_LIST
   108  #endif
   109  #ifndef _VA_LIST_DEFINED
   110  #define _VA_LIST_DEFINED
   111  #endif
   112  #ifndef _VA_LIST_T_H
   113  #define _VA_LIST_T_H
   114  #endif
   115  #ifndef __va_list__
   116  #define __va_list__
   117  #endif
   118  
   119  #endif /* not _VA_LIST_, except on certain systems */
   120  
   121  #endif /* not __svr4__ */
   122  
   123  #endif /* _STDARG_H */
   124  
   125  #endif /* not _ANSI_STDARG_H_ */
   126  #endif /* not _STDARG_H */
Close file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stdarg.h
    50  #include <stdarg.h>
    51  #ifdef __GNUC_VA_LIST
    52  # undef _IO_va_list
    53  # define _IO_va_list __gnuc_va_list
    54  #endif /* __GNUC_VA_LIST */
    55  
    56  #ifndef __P
    57  # include <sys/cdefs.h>
    58  #endif /*!__P*/
    59  
    60  #define _IO_UNIFIED_JUMPTABLES 1
    61  
    62  #ifndef EOF
    63  # define EOF (-1)
    64  #endif
    65  #ifndef NULL
    66  # if defined __GNUG__ && \
    67      (__GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 8))
    68  #  define NULL (__null)
    69  # else
    70  #  if !defined(__cplusplus)
    71  #   define NULL ((void*)0)
    72  #  else
    73  #   define NULL (0)
    74  #  endif
    75  # endif
    76  #endif
    77  
    78  #define _IOS_INPUT      1
    79  #define _IOS_OUTPUT     2
    80  #define _IOS_ATEND      4
    81  #define _IOS_APPEND     8
    82  #define _IOS_TRUNC      16
    83  #define _IOS_NOCREATE   32
    84  #define _IOS_NOREPLACE  64
    85  #define _IOS_BIN        128
    86  
    87  /* Magic numbers and bits for the _flags field.
    88     The magic numbers use the high-order bits of _flags;
    89     the remaining bits are available for variable flags.
    90     Note: The magic numbers must all be negative if stdio
    91     emulation is desired. */
    92  
    93  #define _IO_MAGIC 0xFBAD0000 /* Magic number */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    94  #define _OLD_STDIO_MAGIC 0xFABC0000 /* Emulate old stdio. */
    95  #define _IO_MAGIC_MASK 0xFFFF0000
    96  #define _IO_USER_BUF 1 /* User owns buffer; don't delete it on close. *
        /
    97  #define _IO_UNBUFFERED 2
    98  #define _IO_NO_READS 4 /* Reading not allowed */
    99  #define _IO_NO_WRITES 8 /* Writing not allowd */
   100  #define _IO_EOF_SEEN 0x10
   101  #define _IO_ERR_SEEN 0x20
   102  #define _IO_DELETE_DONT_CLOSE 0x40 /* Don't call close(_fileno) on clea
        nup. */
   103  #define _IO_LINKED 0x80 /* Set if linked (using _chain) to streambuf::_
        list_all.*/
   104  #define _IO_IN_BACKUP 0x100
   105  #define _IO_LINE_BUF 0x200
   106  #define _IO_TIED_PUT_GET 0x400 /* Set if put and get pointer logicly ti
        ed. */
   107  #define _IO_CURRENTLY_PUTTING 0x800
   108  #define _IO_IS_APPENDING 0x1000
   109  #define _IO_IS_FILEBUF 0x2000
   110  #define _IO_BAD_SEEN 0x4000
   111  #define _IO_USER_LOCK 0x8000
   112  
   113  #define _IO_FLAGS2_MMAP 1
   114  #define _IO_FLAGS2_NOTCANCEL 2
   115  #ifdef _LIBC
   116  # define _IO_FLAGS2_FORTIFY 4
   117  #endif
   118  #define _IO_FLAGS2_USER_WBUF 8
   119  #ifdef _LIBC
   120  # define _IO_FLAGS2_SCANF_STD 16
   121  # define _IO_FLAGS2_NOCLOSE 32
   122  # define _IO_FLAGS2_CLOEXEC 64
   123  #endif
   124  
   125  /* These are "formatting flags" matching the iostream fmtflags enum val
        ues. */
   126  #define _IO_SKIPWS 01
   127  #define _IO_LEFT 02
   128  #define _IO_RIGHT 04
   129  #define _IO_INTERNAL 010
   130  #define _IO_DEC 020
   131  #define _IO_OCT 040
   132  #define _IO_HEX 0100
   133  #define _IO_SHOWBASE 0200
   134  #define _IO_SHOWPOINT 0400
   135  #define _IO_UPPERCASE 01000
   136  #define _IO_SHOWPOS 02000
   137  #define _IO_SCIENTIFIC 04000
   138  #define _IO_FIXED 010000
   139  #define _IO_UNITBUF 020000
   140  #define _IO_STDIO 040000
   141  #define _IO_DONT_CLOSE 0100000
   142  #define _IO_BOOLALPHA 0200000
   143  
   144  
   145  struct _IO_jump_t;  struct _IO_FILE;
   146  
   147  /* Handle lock.  */
   148  #ifdef _IO_MTSAFE_IO
   149  # if defined __GLIBC__ && __GLIBC__ >= 2
   150  #  include <bits/stdio-lock.h>
   151  # else
   152  /*# include <comthread.h>*/
   153  # endif
   154  #else
   155  typedef void _IO_lock_t;
   156  #endif
   157  
   158  
   159  /* A streammarker remembers a position in a buffer. */
   160  
   161  struct _IO_marker {
   162    struct _IO_marker *_next;
   163    struct _IO_FILE *_sbuf;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   164    /* If _pos >= 0
   165   it points to _buf->Gbase()+_pos. FIXME comment */
   166    /* if _pos < 0, it points to _buf->eBptr()+_pos. FIXME comment */
   167    int _pos;
   168  #if 0
   169      void set_streampos(streampos sp) { _spos = sp; }
   170      void set_offset(int offset) { _pos = offset; _spos = (streampos)(-2
        ); }
   171    public:
   172      streammarker(streambuf *sb);
   173      ~streammarker();
   174      int saving() { return  _spos == -2; }
   175      int delta(streammarker&);
   176      int delta();
   177  #endif
   178  };
   179  
   180  /* This is the structure from the libstdc++ codecvt class.  */
   181  enum __codecvt_result
   182  {
   183    __codecvt_ok,
   184    __codecvt_partial,
   185    __codecvt_error,
   186    __codecvt_noconv
   187  };
   188  
   189  #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
   190  /* The order of the elements in the following struct must match the ord
        er
   191     of the virtual functions in the libstdc++ codecvt class.  */
   192  struct _IO_codecvt
   193  {
   194    void (*__codecvt_destr) (struct _IO_codecvt *);
   195    enum __codecvt_result (*__codecvt_do_out) (struct _IO_codecvt *,
   196                                               __mbstate_t *,
   197                                               const wchar_t *,
   198                                               const wchar_t *,
   199                                               const wchar_t **, char *,
   200                                               char *, char **);
   201    enum __codecvt_result (*__codecvt_do_unshift) (struct _IO_codecvt *,
   202                                                   __mbstate_t *, char *,
   203                                                   char *, char **);
   204    enum __codecvt_result (*__codecvt_do_in) (struct _IO_codecvt *,
   205                                              __mbstate_t *,
   206                                              const char *, const char *,
   207                                              const char **, wchar_t *,
   208                                              wchar_t *, wchar_t **);
   209    int (*__codecvt_do_encoding) (struct _IO_codecvt *);
   210    int (*__codecvt_do_always_noconv) (struct _IO_codecvt *);
   211    int (*__codecvt_do_length) (struct _IO_codecvt *, __mbstate_t *,
   212                                const char *, const char *, _IO_size_t);
   213    int (*__codecvt_do_max_length) (struct _IO_codecvt *);
   214  
   215    _IO_iconv_t __cd_in;
   216    _IO_iconv_t __cd_out;
   217  };
   218  
   219  /* Extra data for wide character streams.  */
   220  struct _IO_wide_data
   221  {
   222    wchar_t *_IO_read_ptr;        /* Current read pointer */
   223    wchar_t *_IO_read_end;        /* End of get area. */
   224    wchar_t *_IO_read_base;       /* Start of putback+get area. */
   225    wchar_t *_IO_write_base;      /* Start of put area. */
   226    wchar_t *_IO_write_ptr;       /* Current put pointer. */
   227    wchar_t *_IO_write_end;       /* End of put area. */
   228    wchar_t *_IO_buf_base;        /* Start of reserve area. */
   229    wchar_t *_IO_buf_end;         /* End of reserve area. */
   230    /* The following fields are used to support backing up and undo. */
   231    wchar_t *_IO_save_base;       /* Pointer to start of non-current get 
        area. */
   232    wchar_t *_IO_backup_base;     /* Pointer to first valid character of
   233                                     backup area */
   234    wchar_t *_IO_save_end;        /* Pointer to end of non-current get ar
        ea. */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   235  
   236    __mbstate_t _IO_state;
   237    __mbstate_t _IO_last_state;
   238    struct _IO_codecvt _codecvt;
   239  
   240    wchar_t _shortbuf[1];
   241  
   242    const struct _IO_jump_t *_wide_vtable;
   243  };
   244  #endif
   245  
   246  struct _IO_FILE {
   247    int _flags;           /* High-order word is _IO_MAGIC; rest is flags.
         */
   248  #define _IO_file_flags _flags
   249  
   250    /* The following pointers correspond to the C++ streambuf protocol. *
        /
   251    /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. 
        */
   252    char* _IO_read_ptr;   /* Current read pointer */
   253    char* _IO_read_end;   /* End of get area. */
   254    char* _IO_read_base;  /* Start of putback+get area. */
   255    char* _IO_write_base; /* Start of put area. */
   256    char* _IO_write_ptr;  /* Current put pointer. */
   257    char* _IO_write_end;  /* End of put area. */
   258    char* _IO_buf_base;   /* Start of reserve area. */
   259    char* _IO_buf_end;    /* End of reserve area. */
   260    /* The following fields are used to support backing up and undo. */
   261    char *_IO_save_base; /* Pointer to start of non-current get area. */
   262    char *_IO_backup_base;  /* Pointer to first valid character of backup
         area */
   263    char *_IO_save_end; /* Pointer to end of non-current get area. */
   264  
   265    struct _IO_marker *_markers;
   266  
   267    struct _IO_FILE *_chain;
   268  
   269    int _fileno;
   270  #if 0
   271    int _blksize;
   272  #else
   273    int _flags2;
   274  #endif
   275    _IO_off_t _old_offset; /* This used to be _offset but it's too small.
          */
   276  
   277  #define __HAVE_COLUMN /* temporary */
   278    /* 1+column number of pbase(); 0 is unknown. */
   279    unsigned short _cur_column;
   280    signed char _vtable_offset;
   281    char _shortbuf[1];
   282  
   283    /*  char* _save_gptr;  char* _save_egptr; */
   284  
   285    _IO_lock_t *_lock;
   286  #ifdef _IO_USE_OLD_IO_FILE
   287  };
   288  
   289  struct _IO_FILE_complete
   290  {
   291    struct _IO_FILE _file;
   292  #endif
   293  #if defined _G_IO_IO_FILE_VERSION && _G_IO_IO_FILE_VERSION == 0x20001
   294    _IO_off64_t _offset;
   295  # if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
   296    /* Wide character stream stuff.  */
   297    struct _IO_codecvt *_codecvt;
   298    struct _IO_wide_data *_wide_data;
   299    struct _IO_FILE *_freeres_list;
   300    void *_freeres_buf;
   301    size_t _freeres_size;
   302  # else
   303    void *__pad1;
   304    void *__pad2;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   305    void *__pad3;
   306    void *__pad4;
   307    size_t __pad5;
   308  # endif
   309    int _mode;
   310    /* Make sure we don't get into trouble again.  */
   311    char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_
        t)];
   312  #endif
   313  };
   314  
   315  #ifndef __cplusplus
   316  typedef struct _IO_FILE _IO_FILE;
   317  #endif
   318  
   319  struct _IO_FILE_plus;
   320  
   321  extern struct _IO_FILE_plus _IO_2_1_stdin_;
   322  extern struct _IO_FILE_plus _IO_2_1_stdout_;
   323  extern struct _IO_FILE_plus _IO_2_1_stderr_;
   324  #ifndef _LIBC
   325  #define _IO_stdin ((_IO_FILE*)(&_IO_2_1_stdin_))
   326  #define _IO_stdout ((_IO_FILE*)(&_IO_2_1_stdout_))
   327  #define _IO_stderr ((_IO_FILE*)(&_IO_2_1_stderr_))
   328  #else
   329  extern _IO_FILE *_IO_stdin attribute_hidden;
   330  extern _IO_FILE *_IO_stdout attribute_hidden;
   331  extern _IO_FILE *_IO_stderr attribute_hidden;
   332  #endif
   333  
   334  
   335  /* Functions to do I/O and file management for a stream.  */
   336  
   337  /* Read NBYTES bytes from COOKIE into a buffer pointed to by BUF.
   338     Return number of bytes read.  */
   339  typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __n
        bytes);
   340  
   341  /* Write N bytes pointed to by BUF to COOKIE.  Write all N bytes
   342     unless there is an error.  Return number of bytes written.  If
   343     there is an error, return 0 and do not write anything.  If the file
   344     has been opened for append (__mode.__append set), then set the file
   345     pointer to the end of the file and then do the write; if not, just
   346     write at the current file pointer.  */
   347  typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
   348                                   size_t __n);
   349  
   350  /* Move COOKIE's file position to *POS bytes from the
   351     beginning of the file (if W is SEEK_SET),
   352     the current position (if W is SEEK_CUR),
   353     or the end of the file (if W is SEEK_END).
   354     Set *POS to the new file position.
   355     Returns zero if successful, nonzero if not.  */
   356  typedef int __io_seek_fn (void *__cookie, _IO_off64_t *__pos, int __w);
   357  
   358  /* Close COOKIE.  */
   359  typedef int __io_close_fn (void *__cookie);
   360  
   361  
   362  #ifdef _GNU_SOURCE
   363  /* User-visible names for the above.  */
   364  typedef __io_read_fn cookie_read_function_t;
   365  typedef __io_write_fn cookie_write_function_t;
   366  typedef __io_seek_fn cookie_seek_function_t;
   367  typedef __io_close_fn cookie_close_function_t;
   368  
   369  /* The structure with the cookie function pointers.  */
   370  typedef struct
   371  {
   372    __io_read_fn *read;           /* Read bytes.  */
   373    __io_write_fn *write;         /* Write bytes.  */
   374    __io_seek_fn *seek;           /* Seek/tell file position.  */
   375    __io_close_fn *close;         /* Close file.  */
   376  } _IO_cookie_io_functions_t;
   377  typedef _IO_cookie_io_functions_t cookie_io_functions_t;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   378  
   379  struct _IO_cookie_file;
   380  
   381  /* Initialize one of those.  */
   382  extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __rea
        d_write,
   383                               void *__cookie, _IO_cookie_io_functions_t 
        __fns);
   384  #endif
   385  
   386  
   387  #ifdef __cplusplus
   388  extern "C" {
   389  #endif
   390  
   391  extern int __underflow (_IO_FILE *);
   392  extern int __uflow (_IO_FILE *);
   393  extern int __overflow (_IO_FILE *, int);
   394  #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
   395  extern _IO_wint_t __wunderflow (_IO_FILE *);
   396  extern _IO_wint_t __wuflow (_IO_FILE *);
   397  extern _IO_wint_t __woverflow (_IO_FILE *, _IO_wint_t);
   398  #endif
   399  
   400  #if  __GNUC__ >= 3
   401  # define _IO_BE(expr, res) __builtin_expect ((expr), res)
   402  #else
   403  # define _IO_BE(expr, res) (expr)
   404  #endif
   405  
   406  #define _IO_getc_unlocked(_fp) \
   407         (_IO_BE ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end, 0) \
   408          ? __uflow (_fp) : *(unsigned char *) (_fp)->_IO_read_ptr++)
   409  #define _IO_peekc_unlocked(_fp) \
   410         (_IO_BE ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end, 0) \
   411            && __underflow (_fp) == EOF ? EOF \
   412          : *(unsigned char *) (_fp)->_IO_read_ptr)
   413  #define _IO_putc_unlocked(_ch, _fp) \
   414     (_IO_BE ((_fp)->_IO_write_ptr >= (_fp)->_IO_write_end, 0) \
   415      ? __overflow (_fp, (unsigned char) (_ch)) \
   416      : (unsigned char) (*(_fp)->_IO_write_ptr++ = (_ch)))
   417  
   418  #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
   419  # define _IO_getwc_unlocked(_fp) \
   420    (_IO_BE ((_fp)->_wide_data == NULL                                    
        \
   421             || ((_fp)->_wide_data->_IO_read_ptr                          
        \
   422                 >= (_fp)->_wide_data->_IO_read_end), 0)                  
        \
   423     ? __wuflow (_fp) : (_IO_wint_t) *(_fp)->_wide_data->_IO_read_ptr++)
   424  # define _IO_putwc_unlocked(_wch, _fp) \
   425    (_IO_BE ((_fp)->_wide_data == NULL                                    
        \
   426             || ((_fp)->_wide_data->_IO_write_ptr                         
        \
   427                 >= (_fp)->_wide_data->_IO_write_end), 0)                 
        \
   428     ? __woverflow (_fp, _wch)                                            
        \
   429     : (_IO_wint_t) (*(_fp)->_wide_data->_IO_write_ptr++ = (_wch)))
   430  #endif
   431  
   432  #define _IO_feof_unlocked(__fp) (((__fp)->_flags & _IO_EOF_SEEN) != 0)
   433  #define _IO_ferror_unlocked(__fp) (((__fp)->_flags & _IO_ERR_SEEN) != 0
        )
   434  
   435  extern int _IO_getc (_IO_FILE *__fp);
   436  extern int _IO_putc (int __c, _IO_FILE *__fp);
   437  extern int _IO_feof (_IO_FILE *__fp) __THROW;
   438  extern int _IO_ferror (_IO_FILE *__fp) __THROW;
   439  
   440  extern int _IO_peekc_locked (_IO_FILE *__fp);
   441  
   442  /* This one is for Emacs. */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   443  #define _IO_PENDING_OUTPUT_COUNT(_fp)   \
   444          ((_fp)->_IO_write_ptr - (_fp)->_IO_write_base)
   445  
   446  extern void _IO_flockfile (_IO_FILE *) __THROW;
   447  extern void _IO_funlockfile (_IO_FILE *) __THROW;
   448  extern int _IO_ftrylockfile (_IO_FILE *) __THROW;
   449  
   450  #ifdef _IO_MTSAFE_IO
   451  # define _IO_peekc(_fp) _IO_peekc_locked (_fp)
   452  # define _IO_flockfile(_fp) \
   453    if (((_fp)->_flags & _IO_USER_LOCK) == 0) _IO_flockfile (_fp)
   454  # define _IO_funlockfile(_fp) \
   455    if (((_fp)->_flags & _IO_USER_LOCK) == 0) _IO_funlockfile (_fp)
   456  #else
   457  # define _IO_peekc(_fp) _IO_peekc_unlocked (_fp)
   458  # define _IO_flockfile(_fp) /**/
   459  # define _IO_funlockfile(_fp) /**/
   460  # define _IO_ftrylockfile(_fp) /**/
   461  # define _IO_cleanup_region_start(_fct, _fp) /**/
   462  # define _IO_cleanup_region_end(_Doit) /**/
   463  #endif /* !_IO_MTSAFE_IO */
   464  
   465  extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   466                          _IO_va_list, int *__restrict);
   467  extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
   468                           _IO_va_list);
   469  extern _IO_ssize_t _IO_padn (_IO_FILE *, int, _IO_ssize_t);
   470  extern _IO_size_t _IO_sgetn (_IO_FILE *, void *, _IO_size_t);
   471  
   472  extern _IO_off64_t _IO_seekoff (_IO_FILE *, _IO_off64_t, int, int);
   473  extern _IO_off64_t _IO_seekpos (_IO_FILE *, _IO_off64_t, int);
   474  
   475  extern void _IO_free_backup_area (_IO_FILE *) __THROW;
   476  
   477  #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
   478  extern _IO_wint_t _IO_getwc (_IO_FILE *__fp);
   479  extern _IO_wint_t _IO_putwc (wchar_t __wc, _IO_FILE *__fp);
   480  extern int _IO_fwide (_IO_FILE *__fp, int __mode) __THROW;
   481  # if __GNUC__ >= 2
   482  /* While compiling glibc we have to handle compatibility with very old
   483     versions.  */
   484  #  if defined _LIBC && defined SHARED
   485  #   include <shlib-compat.h>
   486  #   if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_1)
   487  #    define _IO_fwide_maybe_incompatible \
   488    (__builtin_expect (&_IO_stdin_used == NULL, 0))
   489  extern const int _IO_stdin_used;
   490  weak_extern (_IO_stdin_used);
   491  #   endif
   492  #  endif
   493  #  ifndef _IO_fwide_maybe_incompatible
   494  #   define _IO_fwide_maybe_incompatible (0)
   495  #  endif
   496  /* A special optimized version of the function above.  It optimizes the
   497     case of initializing an unoriented byte stream.  */
   498  #  define _IO_fwide(__fp, __mode) \
   499    ({ int __result = (__mode);                                           
              \
   500       if (__result < 0 && ! _IO_fwide_maybe_incompatible)                
              \
   501         {                                                                
              \
   502           if ((__fp)->_mode == 0)                                        
              \
   503             /* We know that all we have to do is to set the flag.  */    
              \
   504             (__fp)->_mode = -1;                                          
              \
   505           __result = (__fp)->_mode;                                      
              \
   506         }                                                                
              \
   507       else if (__builtin_constant_p (__mode) && (__mode) == 0)           
              \

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   508         __result = _IO_fwide_maybe_incompatible ? -1 : (__fp)->_mode;    
              \
   509       else                                                               
              \
   510         __result = _IO_fwide (__fp, __result);                           
              \
   511       __result; })
   512  # endif
   513  
   514  extern int _IO_vfwscanf (_IO_FILE * __restrict, const wchar_t * __restr
        ict,
   515                           _IO_va_list, int *__restrict);
   516  extern int _IO_vfwprintf (_IO_FILE *__restrict, const wchar_t *__restri
        ct,
   517                            _IO_va_list);
   518  extern _IO_ssize_t _IO_wpadn (_IO_FILE *, wint_t, _IO_ssize_t);
   519  extern void _IO_free_wbackup_area (_IO_FILE *) __THROW;
   520  #endif
   521  
   522  #ifdef __LDBL_COMPAT
   523  # include <bits/libio-ldbl.h>
   524  #endif
   525  
   526  #ifdef __cplusplus
   527  }
   528  #endif
   529  
   530  #endif /* _IO_STDIO_H */
Close file: /usr/include/libio.h
    74  #include <libio.h>
    75  
    76  #if defined __USE_XOPEN || defined __USE_XOPEN2K8
    77  # ifdef __GNUC__
    78  #  ifndef _VA_LIST_DEFINED
    79  typedef _G_va_list va_list;
    80  #   define _VA_LIST_DEFINED
    81  #  endif
    82  # else
Open file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stdarg.h
     1  /* Copyright (C) 1989-2013 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.15  Variable arguments  <stdarg.h>
    26   */
    27  
    28  #ifndef _STDARG_H
    29  #ifndef _ANSI_STDARG_H_
    30  #ifndef __need___va_list
    31  #define _STDARG_H
    32  #define _ANSI_STDARG_H_
    33  #endif /* not __need___va_list */
    34  #undef __need___va_list
    35  
    36  /* Define __gnuc_va_list.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    37  
    38  #ifndef __GNUC_VA_LIST
    39  #define __GNUC_VA_LIST
    40  typedef __builtin_va_list __gnuc_va_list;
    41  #endif
    42  
    43  /* Define the standard macros for the user,
    44     if this invocation was from the user program.  */
    45  #ifdef _STDARG_H
    46  
    47  #define va_start(v,l)   __builtin_va_start(v,l)
    48  #define va_end(v)       __builtin_va_end(v)
    49  #define va_arg(v,l)     __builtin_va_arg(v,l)
    50  #if !defined(__STRICT_ANSI__) || __STDC_VERSION__ + 0 >= 199900L || def
        ined(__GXX_EXPERIMENTAL_CXX0X__)
    51  #define va_copy(d,s)    __builtin_va_copy(d,s)
    52  #endif
    53  #define __va_copy(d,s)  __builtin_va_copy(d,s)
    54  
    55  /* Define va_list, if desired, from __gnuc_va_list. */
    56  /* We deliberately do not define va_list when called from
    57     stdio.h, because ANSI C says that stdio.h is not supposed to define
    58     va_list.  stdio.h needs to have access to that data type, 
    59     but must not use that name.  It should use the name __gnuc_va_list,
    60     which is safe because it is reserved for the implementation.  */
    61  
    62  #ifdef _BSD_VA_LIST
    63  #undef _BSD_VA_LIST
    64  #endif
    65  
    66  #if defined(__svr4__) || (defined(_SCO_DS) && !defined(__VA_LIST))
    67  /* SVR4.2 uses _VA_LIST for an internal alias for va_list,
    68     so we must avoid testing it and setting it here.
    69     SVR4 uses _VA_LIST as a flag in stdarg.h, but we should
    70     have no conflict with that.  */
    71  #ifndef _VA_LIST_
    72  #define _VA_LIST_
    73  #ifdef __i860__
    74  #ifndef _VA_LIST
    75  #define _VA_LIST va_list
    76  #endif
    77  #endif /* __i860__ */
    78  typedef __gnuc_va_list va_list;
    79  #ifdef _SCO_DS
    80  #define __VA_LIST
    81  #endif
    82  #endif /* _VA_LIST_ */
    83  #else /* not __svr4__ || _SCO_DS */
    84  
    85  /* The macro _VA_LIST_ is the same thing used by this file in Ultrix.
    86     But on BSD NET2 we must not test or define or undef it.
    87     (Note that the comments in NET 2's ansi.h
    88     are incorrect for _VA_LIST_--see stdio.h!)  */
    89  #if !defined (_VA_LIST_) || defined (__BSD_NET2__) || defined (____386B
        SD____) || defined (__bsdi__) || defined (__sequent__) || defined (__Fr
        eeBSD__) || defined(WINNT)
    90  /* The macro _VA_LIST_DEFINED is used in Windows NT 3.5  */
    91  #ifndef _VA_LIST_DEFINED
    92  /* The macro _VA_LIST is used in SCO Unix 3.2.  */
    93  #ifndef _VA_LIST
    94  /* The macro _VA_LIST_T_H is used in the Bull dpx2  */
    95  #ifndef _VA_LIST_T_H
    96  /* The macro __va_list__ is used by BeOS.  */
    97  #ifndef __va_list__
    98  typedef __gnuc_va_list va_list;
    99  #endif /* not __va_list__ */
   100  #endif /* not _VA_LIST_T_H */
   101  #endif /* not _VA_LIST */
   102  #endif /* not _VA_LIST_DEFINED */
   103  #if !(defined (__BSD_NET2__) || defined (____386BSD____) || defined (__
        bsdi__) || defined (__sequent__) || defined (__FreeBSD__))
   104  #define _VA_LIST_
   105  #endif
   106  #ifndef _VA_LIST
   107  #define _VA_LIST

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   108  #endif
   109  #ifndef _VA_LIST_DEFINED
   110  #define _VA_LIST_DEFINED
   111  #endif
   112  #ifndef _VA_LIST_T_H
   113  #define _VA_LIST_T_H
   114  #endif
   115  #ifndef __va_list__
   116  #define __va_list__
   117  #endif
   118  
   119  #endif /* not _VA_LIST_, except on certain systems */
   120  
   121  #endif /* not __svr4__ */
   122  
   123  #endif /* _STDARG_H */
   124  
   125  #endif /* not _ANSI_STDARG_H_ */
   126  #endif /* not _STDARG_H */
Close file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stdarg.h
    83  #  include <stdarg.h>
    84  # endif
    85  #endif
    86  
    87  #ifdef __USE_XOPEN2K8
    88  # ifndef __off_t_defined
    89  # ifndef __USE_FILE_OFFSET64
    90  typedef __off_t off_t;
    91  # else
    92  typedef __off64_t off_t;
    93  # endif
    94  # define __off_t_defined
    95  # endif
    96  # if defined __USE_LARGEFILE64 && !defined __off64_t_defined
    97  typedef __off64_t off64_t;
    98  # define __off64_t_defined
    99  # endif
   100  
   101  # ifndef __ssize_t_defined
   102  typedef __ssize_t ssize_t;
   103  # define __ssize_t_defined
   104  # endif
   105  #endif
   106  
   107  /* The type of the second argument to `fgetpos' and `fsetpos'.  */
   108  __BEGIN_NAMESPACE_STD
   109  #ifndef __USE_FILE_OFFSET64
   110  typedef _G_fpos_t fpos_t;
   111  #else
   112  typedef _G_fpos64_t fpos_t;
   113  #endif
   114  __END_NAMESPACE_STD
   115  #ifdef __USE_LARGEFILE64
   116  typedef _G_fpos64_t fpos64_t;
   117  #endif
   118  
   119  /* The possibilities for the third argument to `setvbuf'.  */
   120  #define _IOFBF 0                /* Fully buffered.  */
   121  #define _IOLBF 1                /* Line buffered.  */
   122  #define _IONBF 2                /* No buffering.  */
   123  
   124  
   125  /* Default buffer size.  */
   126  #ifndef BUFSIZ
   127  # define BUFSIZ _IO_BUFSIZ
   128  #endif
   129  
   130  
   131  /* End of file character.
   132     Some things throughout the library rely on this being -1.  */
   133  #ifndef EOF
   134  # define EOF (-1)
   135  #endif
   136  
   137  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   138  /* The possibilities for the third argument to `fseek'.
   139     These values should not be changed.  */
   140  #define SEEK_SET        0       /* Seek from beginning of file.  */
   141  #define SEEK_CUR        1       /* Seek from current position.  */
   142  #define SEEK_END        2       /* Seek from end of file.  */
   143  #ifdef __USE_GNU
   144  # define SEEK_DATA      3       /* Seek to next data.  */
   145  # define SEEK_HOLE      4       /* Seek to next hole.  */
   146  #endif
   147  
   148  
   149  #if defined __USE_SVID || defined __USE_XOPEN
   150  /* Default path prefix for `tempnam' and `tmpnam'.  */
   151  # define P_tmpdir       "/tmp"
   152  #endif
   153  
   154  
   155  /* Get the values:
   156     L_tmpnam     How long an array of chars must be to be passed to `tmp
        nam'.
   157     TMP_MAX      The minimum number of unique filenames generated by tmp
        nam
   158                  (and tempnam when it uses tmpnam's name space),
   159                  or tempnam (the two are separate).
   160     L_ctermid    How long an array to pass to `ctermid'.
   161     L_cuserid    How long an array to pass to `cuserid'.
   162     FOPEN_MAX    Minimum number of files that can be open at once.
   163     FILENAME_MAX Maximum length of a filename.  */
Open file: /usr/include/bits/stdio_lim.h
     1  /* Copyright (C) 1994, 1997, 1998, 1999, 2009 Free Software Foundation,
         Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #if !defined _STDIO_H && !defined __need_FOPEN_MAX && !defined __need_I
        OV_MAX
    19  # error "Never include <bits/stdio_lim.h> directly; use <stdio.h> inste
        ad."
    20  #endif
    21  
    22  #ifdef _STDIO_H
    23  # define L_tmpnam 20
    24  # define TMP_MAX 238328
    25  # define FILENAME_MAX 4096
    26  
    27  # ifdef __USE_POSIX
    28  #  define L_ctermid 9
    29  #  if !defined __USE_XOPEN2K || defined __USE_GNU
    30  #   define L_cuserid 9
    31  #  endif
    32  # endif
    33  #endif
    34  
    35  #if defined __need_FOPEN_MAX || defined _STDIO_H
    36  # undef  FOPEN_MAX
    37  # define FOPEN_MAX 16
    38  #endif
    39  
    40  #if defined __need_IOV_MAX && !defined IOV_MAX
    41  # define IOV_MAX 1024
    42  #endif
Close file: /usr/include/bits/stdio_lim.h

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   164  #include <bits/stdio_lim.h>
   165  
   166  
   167  /* Standard streams.  */
   168  extern struct _IO_FILE *stdin;          /* Standard input stream.  */
   169  extern struct _IO_FILE *stdout;         /* Standard output stream.  */
   170  extern struct _IO_FILE *stderr;         /* Standard error output stream
        .  */
   171  /* C89/C99 say they're macros.  Make them happy.  */
   172  #define stdin stdin
   173  #define stdout stdout
   174  #define stderr stderr
   175  
   176  __BEGIN_NAMESPACE_STD
   177  /* Remove file FILENAME.  */
   178  extern int remove (const char *__filename) __THROW;
   179  /* Rename file OLD to NEW.  */
   180  extern int rename (const char *__old, const char *__new) __THROW;
   181  __END_NAMESPACE_STD
   182  
   183  #ifdef __USE_ATFILE
   184  /* Rename file OLD relative to OLDFD to NEW relative to NEWFD.  */
   185  extern int renameat (int __oldfd, const char *__old, int __newfd,
   186                       const char *__new) __THROW;
   187  #endif
   188  
   189  __BEGIN_NAMESPACE_STD
   190  /* Create a temporary file and open it read/write.
   191  
   192     This function is a possible cancellation point and therefore not
   193     marked with __THROW.  */
   194  #ifndef __USE_FILE_OFFSET64
   195  extern FILE *tmpfile (void) __wur;
   196  #else
   197  # ifdef __REDIRECT
   198  extern FILE *__REDIRECT (tmpfile, (void), tmpfile64) __wur;
   199  # else
   200  #  define tmpfile tmpfile64
   201  # endif
   202  #endif
   203  
   204  #ifdef __USE_LARGEFILE64
   205  extern FILE *tmpfile64 (void) __wur;
   206  #endif
   207  
   208  /* Generate a temporary filename.  */
   209  extern char *tmpnam (char *__s) __THROW __wur;
   210  __END_NAMESPACE_STD
   211  
   212  #ifdef __USE_MISC
   213  /* This is the reentrant variant of `tmpnam'.  The only difference is
   214     that it does not allow S to be NULL.  */
   215  extern char *tmpnam_r (char *__s) __THROW __wur;
   216  #endif
   217  
   218  
   219  #if defined __USE_SVID || defined __USE_XOPEN
   220  /* Generate a unique temporary filename using up to five characters of 
        PFX
   221     if it is not NULL.  The directory to put this file in is searched fo
        r
   222     as follows: First the environment variable "TMPDIR" is checked.
   223     If it contains the name of a writable directory, that directory is u
        sed.
   224     If not and if DIR is not NULL, that value is checked.  If that fails
        ,
   225     P_tmpdir is tried and finally "/tmp".  The storage for the filename
   226     is allocated by `malloc'.  */
   227  extern char *tempnam (const char *__dir, const char *__pfx)
   228       __THROW __attribute_malloc__ __wur;
   229  #endif
   230  
   231  
   232  __BEGIN_NAMESPACE_STD
   233  /* Close STREAM.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   234  
   235     This function is a possible cancellation point and therefore not
   236     marked with __THROW.  */
   237  extern int fclose (FILE *__stream);
   238  /* Flush STREAM, or all streams if STREAM is NULL.
   239  
   240     This function is a possible cancellation point and therefore not
   241     marked with __THROW.  */
   242  extern int fflush (FILE *__stream);
   243  __END_NAMESPACE_STD
   244  
   245  #ifdef __USE_MISC
   246  /* Faster versions when locking is not required.
   247  
   248     This function is not part of POSIX and therefore no official
   249     cancellation point.  But due to similarity with an POSIX interface
   250     or due to the implementation it is a cancellation point and
   251     therefore not marked with __THROW.  */
   252  extern int fflush_unlocked (FILE *__stream);
   253  #endif
   254  
   255  #ifdef __USE_GNU
   256  /* Close all streams.
   257  
   258     This function is not part of POSIX and therefore no official
   259     cancellation point.  But due to similarity with an POSIX interface
   260     or due to the implementation it is a cancellation point and
   261     therefore not marked with __THROW.  */
   262  extern int fcloseall (void);
   263  #endif
   264  
   265  
   266  __BEGIN_NAMESPACE_STD
   267  #ifndef __USE_FILE_OFFSET64
   268  /* Open a file and create a new stream for it.
   269  
   270     This function is a possible cancellation point and therefore not
   271     marked with __THROW.  */
   272  extern FILE *fopen (const char *__restrict __filename,
   273                      const char *__restrict __modes) __wur;
   274  /* Open a file, replacing an existing stream with it.
   275  
   276     This function is a possible cancellation point and therefore not
   277     marked with __THROW.  */
   278  extern FILE *freopen (const char *__restrict __filename,
   279                        const char *__restrict __modes,
   280                        FILE *__restrict __stream) __wur;
   281  #else
   282  # ifdef __REDIRECT
   283  extern FILE *__REDIRECT (fopen, (const char *__restrict __filename,
   284                                   const char *__restrict __modes), fopen
        64)
   285    __wur;
   286  extern FILE *__REDIRECT (freopen, (const char *__restrict __filename,
   287                                     const char *__restrict __modes,
   288                                     FILE *__restrict __stream), freopen6
        4)
   289    __wur;
   290  # else
   291  #  define fopen fopen64
   292  #  define freopen freopen64
   293  # endif
   294  #endif
   295  __END_NAMESPACE_STD
   296  #ifdef __USE_LARGEFILE64
   297  extern FILE *fopen64 (const char *__restrict __filename,
   298                        const char *__restrict __modes) __wur;
   299  extern FILE *freopen64 (const char *__restrict __filename,
   300                          const char *__restrict __modes,
   301                          FILE *__restrict __stream) __wur;
   302  #endif
   303  
   304  #ifdef  __USE_POSIX
   305  /* Create a new stream that refers to an existing system file descripto
        r.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   306  extern FILE *fdopen (int __fd, const char *__modes) __THROW __wur;
   307  #endif
   308  
   309  #ifdef  __USE_GNU
   310  /* Create a new stream that refers to the given magic cookie,
   311     and uses the given functions for input and output.  */
   312  extern FILE *fopencookie (void *__restrict __magic_cookie,
   313                            const char *__restrict __modes,
   314                            _IO_cookie_io_functions_t __io_funcs) __THROW
         __wur;
   315  #endif
   316  
   317  #ifdef __USE_XOPEN2K8
   318  /* Create a new stream that refers to a memory buffer.  */
   319  extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
   320    __THROW __wur;
   321  
   322  /* Open a stream that writes into a malloc'd buffer that is expanded as
   323     necessary.  *BUFLOC and *SIZELOC are updated with the buffer's locat
        ion
   324     and the number of characters written on fflush or fclose.  */
   325  extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __THRO
        W __wur;
   326  #endif
   327  
   328  
   329  __BEGIN_NAMESPACE_STD
   330  /* If BUF is NULL, make STREAM unbuffered.
   331     Else make it use buffer BUF, of size BUFSIZ.  */
   332  extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) 
        __THROW;
   333  /* Make STREAM use buffering mode MODE.
   334     If BUF is not NULL, use N bytes of it for buffering;
   335     else allocate an internal buffer N bytes long.  */
   336  extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
   337                      int __modes, size_t __n) __THROW;
   338  __END_NAMESPACE_STD
   339  
   340  #ifdef  __USE_BSD
   341  /* If BUF is NULL, make STREAM unbuffered.
   342     Else make it use SIZE bytes of BUF for buffering.  */
   343  extern void setbuffer (FILE *__restrict __stream, char *__restrict __bu
        f,
   344                         size_t __size) __THROW;
   345  
   346  /* Make STREAM line-buffered.  */
   347  extern void setlinebuf (FILE *__stream) __THROW;
   348  #endif
   349  
   350  
   351  __BEGIN_NAMESPACE_STD
   352  /* Write formatted output to STREAM.
   353  
   354     This function is a possible cancellation point and therefore not
   355     marked with __THROW.  */
   356  extern int fprintf (FILE *__restrict __stream,
   357                      const char *__restrict __format, ...);
   358  /* Write formatted output to stdout.
   359  
   360     This function is a possible cancellation point and therefore not
   361     marked with __THROW.  */
   362  extern int printf (const char *__restrict __format, ...);
   363  /* Write formatted output to S.  */
   364  extern int sprintf (char *__restrict __s,
   365                      const char *__restrict __format, ...) __THROWNL;
   366  
   367  /* Write formatted output to S from argument list ARG.
   368  
   369     This function is a possible cancellation point and therefore not
   370     marked with __THROW.  */
   371  extern int vfprintf (FILE *__restrict __s, const char *__restrict __for
        mat,
   372                       _G_va_list __arg);
   373  /* Write formatted output to stdout from argument list ARG.
   374  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   375     This function is a possible cancellation point and therefore not
   376     marked with __THROW.  */
   377  extern int vprintf (const char *__restrict __format, _G_va_list __arg);
   378  /* Write formatted output to S from argument list ARG.  */
   379  extern int vsprintf (char *__restrict __s, const char *__restrict __for
        mat,
   380                       _G_va_list __arg) __THROWNL;
   381  __END_NAMESPACE_STD
   382  
   383  #if defined __USE_BSD || defined __USE_ISOC99 || defined __USE_UNIX98
   384  __BEGIN_NAMESPACE_C99
   385  /* Maximum chars of output to write in MAXLEN.  */
   386  extern int snprintf (char *__restrict __s, size_t __maxlen,
   387                       const char *__restrict __format, ...)
   388       __THROWNL __attribute__ ((__format__ (__printf__, 3, 4)));
   389  
   390  extern int vsnprintf (char *__restrict __s, size_t __maxlen,
   391                        const char *__restrict __format, _G_va_list __arg
        )
   392       __THROWNL __attribute__ ((__format__ (__printf__, 3, 0)));
   393  __END_NAMESPACE_C99
   394  #endif
   395  
   396  #ifdef __USE_GNU
   397  /* Write formatted output to a string dynamically allocated with `mallo
        c'.
   398     Store the address of the string in *PTR.  */
   399  extern int vasprintf (char **__restrict __ptr, const char *__restrict _
        _f,
   400                        _G_va_list __arg)
   401       __THROWNL __attribute__ ((__format__ (__printf__, 2, 0))) __wur;
   402  extern int __asprintf (char **__restrict __ptr,
   403                         const char *__restrict __fmt, ...)
   404       __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
   405  extern int asprintf (char **__restrict __ptr,
   406                       const char *__restrict __fmt, ...)
   407       __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
   408  #endif
   409  
   410  #ifdef __USE_XOPEN2K8
   411  /* Write formatted output to a file descriptor.  */
   412  extern int vdprintf (int __fd, const char *__restrict __fmt,
   413                       _G_va_list __arg)
   414       __attribute__ ((__format__ (__printf__, 2, 0)));
   415  extern int dprintf (int __fd, const char *__restrict __fmt, ...)
   416       __attribute__ ((__format__ (__printf__, 2, 3)));
   417  #endif
   418  
   419  
   420  __BEGIN_NAMESPACE_STD
   421  /* Read formatted input from STREAM.
   422  
   423     This function is a possible cancellation point and therefore not
   424     marked with __THROW.  */
   425  extern int fscanf (FILE *__restrict __stream,
   426                     const char *__restrict __format, ...) __wur;
   427  /* Read formatted input from stdin.
   428  
   429     This function is a possible cancellation point and therefore not
   430     marked with __THROW.  */
   431  extern int scanf (const char *__restrict __format, ...) __wur;
   432  /* Read formatted input from S.  */
   433  extern int sscanf (const char *__restrict __s,
   434                     const char *__restrict __format, ...) __THROW;
   435  
   436  #if defined __USE_ISOC99 && !defined __USE_GNU \
   437      && (!defined __LDBL_COMPAT || !defined __REDIRECT) \
   438      && (defined __STRICT_ANSI__ || defined __USE_XOPEN2K)
   439  # ifdef __REDIRECT
   440  /* For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[
   441     GNU extension which conflicts with valid %a followed by letter
   442     s, S or [.  */
   443  extern int __REDIRECT (fscanf, (FILE *__restrict __stream,
   444                                  const char *__restrict __format, ...),
   445                         __isoc99_fscanf) __wur;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   446  extern int __REDIRECT (scanf, (const char *__restrict __format, ...),
   447                         __isoc99_scanf) __wur;
   448  extern int __REDIRECT_NTH (sscanf, (const char *__restrict __s,
   449                                      const char *__restrict __format, ..
        .),
   450                             __isoc99_sscanf);
   451  # else
   452  extern int __isoc99_fscanf (FILE *__restrict __stream,
   453                              const char *__restrict __format, ...) __wur
        ;
   454  extern int __isoc99_scanf (const char *__restrict __format, ...) __wur;
   455  extern int __isoc99_sscanf (const char *__restrict __s,
   456                              const char *__restrict __format, ...) __THR
        OW;
   457  #  define fscanf __isoc99_fscanf
   458  #  define scanf __isoc99_scanf
   459  #  define sscanf __isoc99_sscanf
   460  # endif
   461  #endif
   462  
   463  __END_NAMESPACE_STD
   464  
   465  #ifdef  __USE_ISOC99
   466  __BEGIN_NAMESPACE_C99
   467  /* Read formatted input from S into argument list ARG.
   468  
   469     This function is a possible cancellation point and therefore not
   470     marked with __THROW.  */
   471  extern int vfscanf (FILE *__restrict __s, const char *__restrict __form
        at,
   472                      _G_va_list __arg)
   473       __attribute__ ((__format__ (__scanf__, 2, 0))) __wur;
   474  
   475  /* Read formatted input from stdin into argument list ARG.
   476  
   477     This function is a possible cancellation point and therefore not
   478     marked with __THROW.  */
   479  extern int vscanf (const char *__restrict __format, _G_va_list __arg)
   480       __attribute__ ((__format__ (__scanf__, 1, 0))) __wur;
   481  
   482  /* Read formatted input from S into argument list ARG.  */
   483  extern int vsscanf (const char *__restrict __s,
   484                      const char *__restrict __format, _G_va_list __arg)
   485       __THROW __attribute__ ((__format__ (__scanf__, 2, 0)));
   486  
   487  # if !defined __USE_GNU \
   488       && (!defined __LDBL_COMPAT || !defined __REDIRECT) \
   489       && (defined __STRICT_ANSI__ || defined __USE_XOPEN2K)
   490  #  ifdef __REDIRECT
   491  /* For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[
   492     GNU extension which conflicts with valid %a followed by letter
   493     s, S or [.  */
   494  extern int __REDIRECT (vfscanf,
   495                         (FILE *__restrict __s,
   496                          const char *__restrict __format, _G_va_list __a
        rg),
   497                         __isoc99_vfscanf)
   498       __attribute__ ((__format__ (__scanf__, 2, 0))) __wur;
   499  extern int __REDIRECT (vscanf, (const char *__restrict __format,
   500                                  _G_va_list __arg), __isoc99_vscanf)
   501       __attribute__ ((__format__ (__scanf__, 1, 0))) __wur;
   502  extern int __REDIRECT_NTH (vsscanf,
   503                             (const char *__restrict __s,
   504                              const char *__restrict __format,
   505                              _G_va_list __arg), __isoc99_vsscanf)
   506       __attribute__ ((__format__ (__scanf__, 2, 0)));
   507  #  else
   508  extern int __isoc99_vfscanf (FILE *__restrict __s,
   509                               const char *__restrict __format,
   510                               _G_va_list __arg) __wur;
   511  extern int __isoc99_vscanf (const char *__restrict __format,
   512                              _G_va_list __arg) __wur;
   513  extern int __isoc99_vsscanf (const char *__restrict __s,
   514                               const char *__restrict __format,
   515                               _G_va_list __arg) __THROW;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   516  #   define vfscanf __isoc99_vfscanf
   517  #   define vscanf __isoc99_vscanf
   518  #   define vsscanf __isoc99_vsscanf
   519  #  endif
   520  # endif
   521  
   522  __END_NAMESPACE_C99
   523  #endif /* Use ISO C9x.  */
   524  
   525  
   526  __BEGIN_NAMESPACE_STD
   527  /* Read a character from STREAM.
   528  
   529     These functions are possible cancellation points and therefore not
   530     marked with __THROW.  */
   531  extern int fgetc (FILE *__stream);
   532  extern int getc (FILE *__stream);
   533  
   534  /* Read a character from stdin.
   535  
   536     This function is a possible cancellation point and therefore not
   537     marked with __THROW.  */
   538  extern int getchar (void);
   539  __END_NAMESPACE_STD
   540  
   541  /* The C standard explicitly says this is a macro, so we always do the
   542     optimization for it.  */
   543  #define getc(_fp) _IO_getc (_fp)
   544  
   545  #if defined __USE_POSIX || defined __USE_MISC
   546  /* These are defined in POSIX.1:1996.
   547  
   548     These functions are possible cancellation points and therefore not
   549     marked with __THROW.  */
   550  extern int getc_unlocked (FILE *__stream);
   551  extern int getchar_unlocked (void);
   552  #endif /* Use POSIX or MISC.  */
   553  
   554  #ifdef __USE_MISC
   555  /* Faster version when locking is not necessary.
   556  
   557     This function is not part of POSIX and therefore no official
   558     cancellation point.  But due to similarity with an POSIX interface
   559     or due to the implementation it is a cancellation point and
   560     therefore not marked with __THROW.  */
   561  extern int fgetc_unlocked (FILE *__stream);
   562  #endif /* Use MISC.  */
   563  
   564  
   565  __BEGIN_NAMESPACE_STD
   566  /* Write a character to STREAM.
   567  
   568     These functions are possible cancellation points and therefore not
   569     marked with __THROW.
   570  
   571     These functions is a possible cancellation point and therefore not
   572     marked with __THROW.  */
   573  extern int fputc (int __c, FILE *__stream);
   574  extern int putc (int __c, FILE *__stream);
   575  
   576  /* Write a character to stdout.
   577  
   578     This function is a possible cancellation point and therefore not
   579     marked with __THROW.  */
   580  extern int putchar (int __c);
   581  __END_NAMESPACE_STD
   582  
   583  /* The C standard explicitly says this can be a macro,
   584     so we always do the optimization for it.  */
   585  #define putc(_ch, _fp) _IO_putc (_ch, _fp)
   586  
   587  #ifdef __USE_MISC
   588  /* Faster version when locking is not necessary.
   589  
   590     This function is not part of POSIX and therefore no official

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   591     cancellation point.  But due to similarity with an POSIX interface
   592     or due to the implementation it is a cancellation point and
   593     therefore not marked with __THROW.  */
   594  extern int fputc_unlocked (int __c, FILE *__stream);
   595  #endif /* Use MISC.  */
   596  
   597  #if defined __USE_POSIX || defined __USE_MISC
   598  /* These are defined in POSIX.1:1996.
   599  
   600     These functions are possible cancellation points and therefore not
   601     marked with __THROW.  */
   602  extern int putc_unlocked (int __c, FILE *__stream);
   603  extern int putchar_unlocked (int __c);
   604  #endif /* Use POSIX or MISC.  */
   605  
   606  
   607  #if defined __USE_SVID || defined __USE_MISC \
   608      || (defined __USE_XOPEN && !defined __USE_XOPEN2K)
   609  /* Get a word (int) from STREAM.  */
   610  extern int getw (FILE *__stream);
   611  
   612  /* Write a word (int) to STREAM.  */
   613  extern int putw (int __w, FILE *__stream);
   614  #endif
   615  
   616  
   617  __BEGIN_NAMESPACE_STD
   618  /* Get a newline-terminated string of finite length from STREAM.
   619  
   620     This function is a possible cancellation point and therefore not
   621     marked with __THROW.  */
   622  extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __s
        tream)
   623       __wur;
   624  
   625  #if !defined __USE_ISOC11 \
   626      || (defined __cplusplus && __cplusplus <= 201103L)
   627  /* Get a newline-terminated string from stdin, removing the newline.
   628     DO NOT USE THIS FUNCTION!!  There is no limit on how much it will re
        ad.
   629  
   630     The function has been officially removed in ISO C11.  This opportuni
        ty
   631     is used to also remove it from the GNU feature list.  It is now only
   632     available when explicitly using an old ISO C, Unix, or POSIX standar
        d.
   633     GCC defines _GNU_SOURCE when building C++ code and the function is s
        till
   634     in C++11, so it is also available for C++.
   635  
   636     This function is a possible cancellation point and therefore not
   637     marked with __THROW.  */
   638  extern char *gets (char *__s) __wur __attribute_deprecated__;
   639  #endif
   640  __END_NAMESPACE_STD
   641  
   642  #ifdef __USE_GNU
   643  /* This function does the same as `fgets' but does not lock the stream.
   644  
   645     This function is not part of POSIX and therefore no official
   646     cancellation point.  But due to similarity with an POSIX interface
   647     or due to the implementation it is a cancellation point and
   648     therefore not marked with __THROW.  */
   649  extern char *fgets_unlocked (char *__restrict __s, int __n,
   650                               FILE *__restrict __stream) __wur;
   651  #endif
   652  
   653  
   654  #ifdef  __USE_XOPEN2K8
   655  /* Read up to (and including) a DELIMITER from STREAM into *LINEPTR
   656     (and null-terminate it). *LINEPTR is a pointer returned from malloc 
        (or
   657     NULL), pointing to *N characters of space.  It is realloc'd as
   658     necessary.  Returns the number of characters read (not including the
   659     null terminator), or -1 on error or EOF.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   660  
   661     These functions are not part of POSIX and therefore no official
   662     cancellation point.  But due to similarity with an POSIX interface
   663     or due to the implementation they are cancellation points and
   664     therefore not marked with __THROW.  */
   665  extern _IO_ssize_t __getdelim (char **__restrict __lineptr,
   666                                 size_t *__restrict __n, int __delimiter,
   667                                 FILE *__restrict __stream) __wur;
   668  extern _IO_ssize_t getdelim (char **__restrict __lineptr,
   669                               size_t *__restrict __n, int __delimiter,
   670                               FILE *__restrict __stream) __wur;
   671  
   672  /* Like `getdelim', but reads up to a newline.
   673  
   674     This function is not part of POSIX and therefore no official
   675     cancellation point.  But due to similarity with an POSIX interface
   676     or due to the implementation it is a cancellation point and
   677     therefore not marked with __THROW.  */
   678  extern _IO_ssize_t getline (char **__restrict __lineptr,
   679                              size_t *__restrict __n,
   680                              FILE *__restrict __stream) __wur;
   681  #endif
   682  
   683  
   684  __BEGIN_NAMESPACE_STD
   685  /* Write a string to STREAM.
   686  
   687     This function is a possible cancellation point and therefore not
   688     marked with __THROW.  */
   689  extern int fputs (const char *__restrict __s, FILE *__restrict __stream
        );
   690  
   691  /* Write a string, followed by a newline, to stdout.
   692  
   693     This function is a possible cancellation point and therefore not
   694     marked with __THROW.  */
   695  extern int puts (const char *__s);
   696  
   697  
   698  /* Push a character back onto the input buffer of STREAM.
   699  
   700     This function is a possible cancellation point and therefore not
   701     marked with __THROW.  */
   702  extern int ungetc (int __c, FILE *__stream);
   703  
   704  
   705  /* Read chunks of generic data from STREAM.
   706  
   707     This function is a possible cancellation point and therefore not
   708     marked with __THROW.  */
   709  extern size_t fread (void *__restrict __ptr, size_t __size,
   710                       size_t __n, FILE *__restrict __stream) __wur;
   711  /* Write chunks of generic data to STREAM.
   712  
   713     This function is a possible cancellation point and therefore not
   714     marked with __THROW.  */
   715  extern size_t fwrite (const void *__restrict __ptr, size_t __size,
   716                        size_t __n, FILE *__restrict __s);
   717  __END_NAMESPACE_STD
   718  
   719  #ifdef __USE_GNU
   720  /* This function does the same as `fputs' but does not lock the stream.
   721  
   722     This function is not part of POSIX and therefore no official
   723     cancellation point.  But due to similarity with an POSIX interface
   724     or due to the implementation it is a cancellation point and
   725     therefore not marked with __THROW.  */
   726  extern int fputs_unlocked (const char *__restrict __s,
   727                             FILE *__restrict __stream);
   728  #endif
   729  
   730  #ifdef __USE_MISC
   731  /* Faster versions when locking is not necessary.
   732  
   733     These functions are not part of POSIX and therefore no official

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   734     cancellation point.  But due to similarity with an POSIX interface
   735     or due to the implementation they are cancellation points and
   736     therefore not marked with __THROW.  */
   737  extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
   738                                size_t __n, FILE *__restrict __stream) __
        wur;
   739  extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __s
        ize,
   740                                 size_t __n, FILE *__restrict __stream);
   741  #endif
   742  
   743  
   744  __BEGIN_NAMESPACE_STD
   745  /* Seek to a certain position on STREAM.
   746  
   747     This function is a possible cancellation point and therefore not
   748     marked with __THROW.  */
   749  extern int fseek (FILE *__stream, long int __off, int __whence);
   750  /* Return the current position of STREAM.
   751  
   752     This function is a possible cancellation point and therefore not
   753     marked with __THROW.  */
   754  extern long int ftell (FILE *__stream) __wur;
   755  /* Rewind to the beginning of STREAM.
   756  
   757     This function is a possible cancellation point and therefore not
   758     marked with __THROW.  */
   759  extern void rewind (FILE *__stream);
   760  __END_NAMESPACE_STD
   761  
   762  /* The Single Unix Specification, Version 2, specifies an alternative,
   763     more adequate interface for the two functions above which deal with
   764     file offset.  `long int' is not the right type.  These definitions
   765     are originally defined in the Large File Support API.  */
   766  
   767  #if defined __USE_LARGEFILE || defined __USE_XOPEN2K
   768  # ifndef __USE_FILE_OFFSET64
   769  /* Seek to a certain position on STREAM.
   770  
   771     This function is a possible cancellation point and therefore not
   772     marked with __THROW.  */
   773  extern int fseeko (FILE *__stream, __off_t __off, int __whence);
   774  /* Return the current position of STREAM.
   775  
   776     This function is a possible cancellation point and therefore not
   777     marked with __THROW.  */
   778  extern __off_t ftello (FILE *__stream) __wur;
   779  # else
   780  #  ifdef __REDIRECT
   781  extern int __REDIRECT (fseeko,
   782                         (FILE *__stream, __off64_t __off, int __whence),
   783                         fseeko64);
   784  extern __off64_t __REDIRECT (ftello, (FILE *__stream), ftello64);
   785  #  else
   786  #   define fseeko fseeko64
   787  #   define ftello ftello64
   788  #  endif
   789  # endif
   790  #endif
   791  
   792  __BEGIN_NAMESPACE_STD
   793  #ifndef __USE_FILE_OFFSET64
   794  /* Get STREAM's position.
   795  
   796     This function is a possible cancellation point and therefore not
   797     marked with __THROW.  */
   798  extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos
        );
   799  /* Set STREAM's position.
   800  
   801     This function is a possible cancellation point and therefore not
   802     marked with __THROW.  */
   803  extern int fsetpos (FILE *__stream, const fpos_t *__pos);
   804  #else
   805  # ifdef __REDIRECT

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   806  extern int __REDIRECT (fgetpos, (FILE *__restrict __stream,
   807                                   fpos_t *__restrict __pos), fgetpos64);
   808  extern int __REDIRECT (fsetpos,
   809                         (FILE *__stream, const fpos_t *__pos), fsetpos64
        );
   810  # else
   811  #  define fgetpos fgetpos64
   812  #  define fsetpos fsetpos64
   813  # endif
   814  #endif
   815  __END_NAMESPACE_STD
   816  
   817  #ifdef __USE_LARGEFILE64
   818  extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
   819  extern __off64_t ftello64 (FILE *__stream) __wur;
   820  extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict _
        _pos);
   821  extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);
   822  #endif
   823  
   824  __BEGIN_NAMESPACE_STD
   825  /* Clear the error and EOF indicators for STREAM.  */
   826  extern void clearerr (FILE *__stream) __THROW;
   827  /* Return the EOF indicator for STREAM.  */
   828  extern int feof (FILE *__stream) __THROW __wur;
   829  /* Return the error indicator for STREAM.  */
   830  extern int ferror (FILE *__stream) __THROW __wur;
   831  __END_NAMESPACE_STD
   832  
   833  #ifdef __USE_MISC
   834  /* Faster versions when locking is not required.  */
   835  extern void clearerr_unlocked (FILE *__stream) __THROW;
   836  extern int feof_unlocked (FILE *__stream) __THROW __wur;
   837  extern int ferror_unlocked (FILE *__stream) __THROW __wur;
   838  #endif
   839  
   840  
   841  __BEGIN_NAMESPACE_STD
   842  /* Print a message describing the meaning of the value of errno.
   843  
   844     This function is a possible cancellation point and therefore not
   845     marked with __THROW.  */
   846  extern void perror (const char *__s);
   847  __END_NAMESPACE_STD
   848  
   849  /* Provide the declarations for `sys_errlist' and `sys_nerr' if they
   850     are available on this system.  Even if available, these variables
   851     should not be used directly.  The `strerror' function provides
   852     all the necessary functionality.  */
Open file: /usr/include/bits/sys_errlist.h
     1  /* Declare sys_errlist and sys_nerr, or don't.  Compatibility (do) vers
        ion.
     2     Copyright (C) 2002, 2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _STDIO_H
    20  # error "Never include <bits/sys_errlist.h> directly; use <stdio.h> ins
        tead."
    21  #endif
    22  
    23  /* sys_errlist and sys_nerr are deprecated.  Use strerror instead.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    24  
    25  #ifdef  __USE_BSD
    26  extern int sys_nerr;
    27  extern const char *const sys_errlist[];
    28  #endif
    29  #ifdef  __USE_GNU
    30  extern int _sys_nerr;
    31  extern const char *const _sys_errlist[];
    32  #endif
Close file: /usr/include/bits/sys_errlist.h
   853  #include <bits/sys_errlist.h>
   854  
   855  
   856  #ifdef  __USE_POSIX
   857  /* Return the system file descriptor for STREAM.  */
   858  extern int fileno (FILE *__stream) __THROW __wur;
   859  #endif /* Use POSIX.  */
   860  
   861  #ifdef __USE_MISC
   862  /* Faster version when locking is not required.  */
   863  extern int fileno_unlocked (FILE *__stream) __THROW __wur;
   864  #endif
   865  
   866  
   867  #if (defined __USE_POSIX2 || defined __USE_SVID  || defined __USE_BSD |
        | \
   868       defined __USE_MISC)
   869  /* Create a new stream connected to a pipe running the given command.
   870  
   871     This function is a possible cancellation point and therefore not
   872     marked with __THROW.  */
   873  extern FILE *popen (const char *__command, const char *__modes) __wur;
   874  
   875  /* Close a stream opened by popen and return the status of its child.
   876  
   877     This function is a possible cancellation point and therefore not
   878     marked with __THROW.  */
   879  extern int pclose (FILE *__stream);
   880  #endif
   881  
   882  
   883  #ifdef  __USE_POSIX
   884  /* Return the name of the controlling terminal.  */
   885  extern char *ctermid (char *__s) __THROW;
   886  #endif /* Use POSIX.  */
   887  
   888  
   889  #ifdef __USE_XOPEN
   890  /* Return the name of the current user.  */
   891  extern char *cuserid (char *__s);
   892  #endif /* Use X/Open, but not issue 6.  */
   893  
   894  
   895  #ifdef  __USE_GNU
   896  struct obstack;                 /* See <obstack.h>.  */
   897  
   898  /* Write formatted output to an obstack.  */
   899  extern int obstack_printf (struct obstack *__restrict __obstack,
   900                             const char *__restrict __format, ...)
   901       __THROWNL __attribute__ ((__format__ (__printf__, 2, 3)));
   902  extern int obstack_vprintf (struct obstack *__restrict __obstack,
   903                              const char *__restrict __format,
   904                              _G_va_list __args)
   905       __THROWNL __attribute__ ((__format__ (__printf__, 2, 0)));
   906  #endif /* Use GNU.  */
   907  
   908  
   909  #if defined __USE_POSIX || defined __USE_MISC
   910  /* These are defined in POSIX.1:1996.  */
   911  
   912  /* Acquire ownership of STREAM.  */
   913  extern void flockfile (FILE *__stream) __THROW;
   914  
   915  /* Try to acquire ownership of STREAM but do not block if it is not
   916     possible.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   917  extern int ftrylockfile (FILE *__stream) __THROW __wur;
   918  
   919  /* Relinquish the ownership granted for STREAM.  */
   920  extern void funlockfile (FILE *__stream) __THROW;
   921  #endif /* POSIX || misc */
   922  
   923  #if defined __USE_XOPEN && !defined __USE_XOPEN2K && !defined __USE_GNU
   924  /* The X/Open standard requires some functions and variables to be
   925     declared here which do not belong into this header.  But we have to
   926     follow.  In GNU mode we don't do this nonsense.  */
   927  # define __need_getopt
   928  # include <getopt.h>
   929  #endif  /* X/Open, but not issue 6 and not for GNU.  */
   930  
   931  /* If we are compiling with optimizing read this file.  It contains
   932     several optimizing inline functions and macros.  */
   933  #ifdef __USE_EXTERN_INLINES
   934  # include <bits/stdio.h>
   935  #endif
   936  #if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
   937  # include <bits/stdio2.h>
   938  #endif
   939  #ifdef __LDBL_COMPAT
   940  # include <bits/stdio-ldbl.h>
   941  #endif
   942  
   943  __END_DECLS
   944  
   945  #endif /* <stdio.h> included.  */
   946  
   947  #endif /* !_STDIO_H */
Close file: /usr/include/stdio.h
     6  #include <stdio.h>
Open file: /usr/include/stdlib.h
     1  /* Copyright (C) 1991-2007, 2009-2011, 2012 Free Software Foundation, I
        nc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      ISO C99 Standard: 7.20 General utilities        <stdlib.h>
    20   */
    21  
    22  #ifndef _STDLIB_H
    23  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.
    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__
   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */
   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif
   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2
   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  
   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    24  #include <features.h>
    25  
    26  /* Get size_t, wchar_t and NULL from <stddef.h>.  */
    27  #define         __need_size_t
    28  #ifndef __need_malloc_and_calloc
    29  # define        __need_wchar_t
    30  # define        __need_NULL
    31  #endif
Open file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
     1  /* Copyright (C) 1989-2013 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    31      || defined(__need_wint_t)
    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \
    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  
    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.
    47     There's no way to win with the other order!  Sun lossage.  */
    48  
    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif
    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t
   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif
   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t
   115  #endif
   116  
   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually
   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  
   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF
   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #define _PTRDIFF_T
   137  #define _T_PTRDIFF_
   138  #define _T_PTRDIFF
   139  #define __PTRDIFF_T
   140  #define _PTRDIFF_T_
   141  #define _BSD_PTRDIFF_T_
   142  #define ___int_ptrdiff_t_h
   143  #define _GCC_PTRDIFF_T
   144  #ifndef __PTRDIFF_TYPE__
   145  #define __PTRDIFF_TYPE__ long int
   146  #endif
   147  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   148  #endif /* _GCC_PTRDIFF_T */
   149  #endif /* ___int_ptrdiff_t_h */
   150  #endif /* _BSD_PTRDIFF_T_ */
   151  #endif /* _PTRDIFF_T_ */
   152  #endif /* __PTRDIFF_T */
   153  #endif /* _T_PTRDIFF */
   154  #endif /* _T_PTRDIFF_ */
   155  #endif /* _PTRDIFF_T */
   156  
   157  /* If this symbol has done its job, get rid of it.  */
   158  #undef  __need_ptrdiff_t
   159  
   160  #endif /* _STDDEF_H or __need_ptrdiff_t.  */
   161  
   162  /* Unsigned type of `sizeof' something.  */
   163  
   164  /* Define this type if we are doing the whole job,
   165     or if we want this type in particular.  */
   166  #if defined (_STDDEF_H) || defined (__need_size_t)
   167  #ifndef __size_t__      /* BeOS */
   168  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   169  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */
   170  #ifndef _SYS_SIZE_T_H
   171  #ifndef _T_SIZE_
   172  #ifndef _T_SIZE
   173  #ifndef __SIZE_T

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   174  #ifndef _SIZE_T_
   175  #ifndef _BSD_SIZE_T_
   176  #ifndef _SIZE_T_DEFINED_
   177  #ifndef _SIZE_T_DEFINED
   178  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   179  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   180  #ifndef ___int_size_t_h
   181  #ifndef _GCC_SIZE_T
   182  #ifndef _SIZET_
   183  #ifndef __size_t
   184  #define __size_t__      /* BeOS */
   185  #define __SIZE_T__      /* Cray Unicos/Mk */
   186  #define _SIZE_T
   187  #define _SYS_SIZE_T_H
   188  #define _T_SIZE_
   189  #define _T_SIZE
   190  #define __SIZE_T
   191  #define _SIZE_T_
   192  #define _BSD_SIZE_T_
   193  #define _SIZE_T_DEFINED_
   194  #define _SIZE_T_DEFINED
   195  #define _BSD_SIZE_T_DEFINED_    /* Darwin */
   196  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   197  #define ___int_size_t_h
   198  #define _GCC_SIZE_T
   199  #define _SIZET_
   200  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   201    || defined(__FreeBSD_kernel__)
   202  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   203  #elif defined (__VMS__)
   204  /* __size_t is also a typedef on VMS.  */
   205  #else
   206  #define __size_t
   207  #endif
   208  #ifndef __SIZE_TYPE__
   209  #define __SIZE_TYPE__ long unsigned int
   210  #endif
   211  #if !(defined (__GNUG__) && defined (size_t))
   212  typedef __SIZE_TYPE__ size_t;
   213  #ifdef __BEOS__
   214  typedef long ssize_t;
   215  #endif /* __BEOS__ */
   216  #endif /* !(defined (__GNUG__) && defined (size_t)) */
   217  #endif /* __size_t */
   218  #endif /* _SIZET_ */
   219  #endif /* _GCC_SIZE_T */
   220  #endif /* ___int_size_t_h */
   221  #endif /* _SIZE_T_DECLARED */
   222  #endif /* _BSD_SIZE_T_DEFINED_ */
   223  #endif /* _SIZE_T_DEFINED */
   224  #endif /* _SIZE_T_DEFINED_ */
   225  #endif /* _BSD_SIZE_T_ */
   226  #endif /* _SIZE_T_ */
   227  #endif /* __SIZE_T */
   228  #endif /* _T_SIZE */
   229  #endif /* _T_SIZE_ */
   230  #endif /* _SYS_SIZE_T_H */
   231  #endif /* _SIZE_T */
   232  #endif /* __SIZE_T__ */
   233  #endif /* __size_t__ */
   234  #undef  __need_size_t
   235  #endif /* _STDDEF_H or __need_size_t.  */
   236  
   237  
   238  /* Wide character type.
   239     Locale-writers should change this as necessary to
   240     be big enough to hold unique values not between 0 and 127,
   241     and not (wchar_t) -1, for each defined multibyte character.  */
   242  
   243  /* Define this type if we are doing the whole job,
   244     or if we want this type in particular.  */
   245  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   246  #ifndef __wchar_t__     /* BeOS */
   247  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   248  #ifndef _WCHAR_T

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   249  #ifndef _T_WCHAR_
   250  #ifndef _T_WCHAR
   251  #ifndef __WCHAR_T
   252  #ifndef _WCHAR_T_
   253  #ifndef _BSD_WCHAR_T_
   254  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
   255  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   256  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   257  #ifndef _WCHAR_T_DEFINED_
   258  #ifndef _WCHAR_T_DEFINED
   259  #ifndef _WCHAR_T_H
   260  #ifndef ___int_wchar_t_h
   261  #ifndef __INT_WCHAR_T_H
   262  #ifndef _GCC_WCHAR_T
   263  #define __wchar_t__     /* BeOS */
   264  #define __WCHAR_T__     /* Cray Unicos/Mk */
   265  #define _WCHAR_T
   266  #define _T_WCHAR_
   267  #define _T_WCHAR
   268  #define __WCHAR_T
   269  #define _WCHAR_T_
   270  #define _BSD_WCHAR_T_
   271  #define _WCHAR_T_DEFINED_
   272  #define _WCHAR_T_DEFINED
   273  #define _WCHAR_T_H
   274  #define ___int_wchar_t_h
   275  #define __INT_WCHAR_T_H
   276  #define _GCC_WCHAR_T
   277  #define _WCHAR_T_DECLARED
   278  
   279  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   280     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   281     symbols in the _FOO_T_ family, stays defined even after its
   282     corresponding type is defined).  If we define wchar_t, then we
   283     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   284     we undef _WCHAR_T_, then we must also define rune_t, since 
   285     headers like runetype.h assume that if machine/ansi.h is included,
   286     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   287     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   288     the same type." */
   289  #ifdef _BSD_WCHAR_T_
   290  #undef _BSD_WCHAR_T_
   291  #ifdef _BSD_RUNE_T_
   292  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   293  typedef _BSD_RUNE_T_ rune_t;
   294  #define _BSD_WCHAR_T_DEFINED_
   295  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   296  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   297  /* Why is this file so hard to maintain properly?  In contrast to
   298     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   299     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   300     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   301  #undef _BSD_RUNE_T_
   302  #endif
   303  #endif
   304  #endif
   305  #endif
   306  /* FreeBSD 5 can't be handled well using "traditional" logic above
   307     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   308     rune_t in some cases... */
   309  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   310  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   311  #if __BSD_VISIBLE
   312  #ifndef _RUNE_T_DECLARED
   313  typedef __rune_t        rune_t;
   314  #define _RUNE_T_DECLARED
   315  #endif
   316  #endif
   317  #endif
   318  #endif
   319  
   320  #ifndef __WCHAR_TYPE__
   321  #define __WCHAR_TYPE__ int
   322  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   323  #ifndef __cplusplus
   324  typedef __WCHAR_TYPE__ wchar_t;
   325  #endif
   326  #endif
   327  #endif
   328  #endif
   329  #endif
   330  #endif
   331  #endif
   332  #endif /* _WCHAR_T_DECLARED */
   333  #endif /* _BSD_RUNE_T_DEFINED_ */
   334  #endif
   335  #endif
   336  #endif
   337  #endif
   338  #endif
   339  #endif
   340  #endif
   341  #endif /* __WCHAR_T__ */
   342  #endif /* __wchar_t__ */
   343  #undef  __need_wchar_t
   344  #endif /* _STDDEF_H or __need_wchar_t.  */
   345  
   346  #if defined (__need_wint_t)
   347  #ifndef _WINT_T
   348  #define _WINT_T
   349  
   350  #ifndef __WINT_TYPE__
   351  #define __WINT_TYPE__ unsigned int
   352  #endif
   353  typedef __WINT_TYPE__ wint_t;
   354  #endif
   355  #undef __need_wint_t
   356  #endif
   357  
   358  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   359      are already defined.  */
   360  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */
   361  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   362  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)
   363  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   364      are probably typos and should be removed before 2.8 is released.  *
        /
   365  #ifdef _GCC_PTRDIFF_T_
   366  #undef _PTRDIFF_T_
   367  #undef _BSD_PTRDIFF_T_
   368  #endif
   369  #ifdef _GCC_SIZE_T_
   370  #undef _SIZE_T_
   371  #undef _BSD_SIZE_T_
   372  #endif
   373  #ifdef _GCC_WCHAR_T_
   374  #undef _WCHAR_T_
   375  #undef _BSD_WCHAR_T_
   376  #endif
   377  /*  The following ones are the real ones.  */
   378  #ifdef _GCC_PTRDIFF_T
   379  #undef _PTRDIFF_T_
   380  #undef _BSD_PTRDIFF_T_
   381  #endif
   382  #ifdef _GCC_SIZE_T
   383  #undef _SIZE_T_
   384  #undef _BSD_SIZE_T_
   385  #endif
   386  #ifdef _GCC_WCHAR_T
   387  #undef _WCHAR_T_
   388  #undef _BSD_WCHAR_T_
   389  #endif
   390  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */
   391  
   392  #endif /* __sys_stdtypes_h */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   393  
   394  /* A null pointer constant.  */
   395  
   396  #if defined (_STDDEF_H) || defined (__need_NULL)
   397  #undef NULL             /* in case <stdio.h> has defined it. */
   398  #ifdef __GNUG__
   399  #define NULL __null
   400  #else   /* G++ */
   401  #ifndef __cplusplus
   402  #define NULL ((void *)0)
   403  #else   /* C++ */
   404  #define NULL 0
   405  #endif  /* C++ */
   406  #endif  /* G++ */
   407  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   408  #undef  __need_NULL
   409  
   410  #ifdef _STDDEF_H
   411  
   412  /* Offset of member MEMBER in a struct of type TYPE. */
   413  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   414  
   415  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   416    || (defined(__cplusplus) && __cplusplus >= 201103L)
   417  #ifndef _GCC_MAX_ALIGN_T
   418  #define _GCC_MAX_ALIGN_T
   419  /* Type whose alignment is supported in every context and is at least
   420     as great as that of any standard type not using alignment
   421     specifiers.  */
   422  typedef struct {
   423    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));
   424    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   425  } max_align_t;
   426  #endif
   427  #endif /* C11 or C++11.  */
   428  
   429  #if defined(__cplusplus) && __cplusplus >= 201103L
   430  #ifndef _GXX_NULLPTR_T
   431  #define _GXX_NULLPTR_T
   432    typedef decltype(nullptr) nullptr_t;
   433  #endif
   434  #endif /* C++11.  */
   435  
   436  #endif /* _STDDEF_H was defined this time */
   437  
   438  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
   439            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
    32  #include <stddef.h>
    33  
    34  __BEGIN_DECLS
    35  
    36  #ifndef __need_malloc_and_calloc
    37  #define _STDLIB_H       1
    38  
    39  #if (defined __USE_XOPEN || defined __USE_XOPEN2K8) && !defined _SYS_WA
        IT_H
    40  /* XPG requires a few symbols from <sys/wait.h> being defined.  */
Open file: /usr/include/bits/waitflags.h
     1  /* Definitions of flag bits for `waitpid' et al.
     2     Copyright (C) 1992,1996,1997,2000,2004,2005 Free Software Foundation
        , Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #if !defined _SYS_WAIT_H && !defined _STDLIB_H
    20  # error "Never include <bits/waitflags.h> directly; use <sys/wait.h> in
        stead."
    21  #endif
    22  
    23  
    24  /* Bits in the third argument to `waitpid'.  */
    25  #define WNOHANG         1       /* Don't block waiting.  */
    26  #define WUNTRACED       2       /* Report status of stopped children.  
        */
    27  
    28  /* Bits in the fourth argument to `waitid'.  */
    29  #define WSTOPPED        2       /* Report stopped child (same as WUNTRA
        CED). */
    30  #define WEXITED         4       /* Report dead child.  */
    31  #define WCONTINUED      8       /* Report continued child.  */
    32  #define WNOWAIT         0x01000000 /* Don't reap, just poll status.  */
    33  
    34  #define __WNOTHREAD     0x20000000 /* Don't wait on children of other t
        hreads
    35                                        in this group */
    36  #define __WALL          0x40000000 /* Wait for any child.  */
    37  #define __WCLONE        0x80000000 /* Wait for cloned process.  */
Close file: /usr/include/bits/waitflags.h
    41  # include <bits/waitflags.h>
Open file: /usr/include/bits/waitstatus.h
     1  /* Definitions of status bits for `wait' et al.
     2     Copyright (C) 1992,1994,1996,1997,2000,2004 Free Software Foundation
        , Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #if !defined _SYS_WAIT_H && !defined _STDLIB_H
    20  # error "Never include <bits/waitstatus.h> directly; use <sys/wait.h> i
        nstead."
    21  #endif
    22  
    23  
    24  /* Everything extant so far uses these same bits.  */
    25  
    26  
    27  /* If WIFEXITED(STATUS), the low-order 8 bits of the status.  */
    28  #define __WEXITSTATUS(status)   (((status) & 0xff00) >> 8)
    29  
    30  /* If WIFSIGNALED(STATUS), the terminating signal.  */
    31  #define __WTERMSIG(status)      ((status) & 0x7f)
    32  
    33  /* If WIFSTOPPED(STATUS), the signal that stopped the child.  */
    34  #define __WSTOPSIG(status)      __WEXITSTATUS(status)
    35  
    36  /* Nonzero if STATUS indicates normal termination.  */
    37  #define __WIFEXITED(status)     (__WTERMSIG(status) == 0)
    38  
    39  /* Nonzero if STATUS indicates termination by a signal.  */
    40  #define __WIFSIGNALED(status) \
    41    (((signed char) (((status) & 0x7f) + 1) >> 1) > 0)
    42  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    43  /* Nonzero if STATUS indicates the child is stopped.  */
    44  #define __WIFSTOPPED(status)    (((status) & 0xff) == 0x7f)
    45  
    46  /* Nonzero if STATUS indicates the child continued after a stop.  We on
        ly
    47     define this if <bits/waitflags.h> provides the WCONTINUED flag bit. 
         */
    48  #ifdef WCONTINUED
    49  # define __WIFCONTINUED(status) ((status) == __W_CONTINUED)
    50  #endif
    51  
    52  /* Nonzero if STATUS indicates the child dumped core.  */
    53  #define __WCOREDUMP(status)     ((status) & __WCOREFLAG)
    54  
    55  /* Macros for constructing status values.  */
    56  #define __W_EXITCODE(ret, sig)  ((ret) << 8 | (sig))
    57  #define __W_STOPCODE(sig)       ((sig) << 8 | 0x7f)
    58  #define __W_CONTINUED           0xffff
    59  #define __WCOREFLAG             0x80
    60  
    61  
    62  #ifdef  __USE_BSD
    63  
Open file: /usr/include/endian.h
     1  /* Copyright (C) 1992-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _ENDIAN_H
    19  #define _ENDIAN_H       1
    20  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.
    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__
   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */
   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif
   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2
   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  
   385  #endif  /* !ASSEMBLER */
   386  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    21  #include <features.h>
    22  
    23  /* Definitions for byte order, according to significance of bytes,
    24     from low addresses to high addresses.  The value is what you get by
    25     putting '4' in the most significant byte, '3' in the second most
    26     significant byte, '2' in the second least significant byte, and '1'
    27     in the least significant byte, and then writing down one digit for
    28     each byte, starting with the byte at the lowest address at the left,
    29     and proceeding to the byte with the highest address at the right.  *
        /
    30  
    31  #define __LITTLE_ENDIAN 1234
    32  #define __BIG_ENDIAN    4321
    33  #define __PDP_ENDIAN    3412
    34  
    35  /* This file defines `__BYTE_ORDER' for the particular machine.  */
Open file: /usr/include/bits/endian.h
     1  /* i386/x86_64 are little-endian.  */
     2  
     3  #ifndef _ENDIAN_H
     4  # error "Never use <bits/endian.h> directly; include <endian.h> instead
        ."
     5  #endif
     6  
     7  #define __BYTE_ORDER __LITTLE_ENDIAN
Close file: /usr/include/bits/endian.h
    36  #include <bits/endian.h>
    37  
    38  /* Some machines may need to use a different endianness for floating po
        int
    39     values.  */
    40  #ifndef __FLOAT_WORD_ORDER
    41  # define __FLOAT_WORD_ORDER __BYTE_ORDER
    42  #endif
    43  
    44  #ifdef  __USE_BSD
    45  # define LITTLE_ENDIAN  __LITTLE_ENDIAN
    46  # define BIG_ENDIAN     __BIG_ENDIAN
    47  # define PDP_ENDIAN     __PDP_ENDIAN
    48  # define BYTE_ORDER     __BYTE_ORDER
    49  #endif
    50  
    51  #if __BYTE_ORDER == __LITTLE_ENDIAN
    52  # define __LONG_LONG_PAIR(HI, LO) LO, HI
    53  #elif __BYTE_ORDER == __BIG_ENDIAN
    54  # define __LONG_LONG_PAIR(HI, LO) HI, LO
    55  #endif
    56  
    57  
    58  #if defined __USE_BSD && !defined __ASSEMBLER__
    59  /* Conversion interfaces.  */
Open file: /usr/include/bits/byteswap.h
     1  /* Macros to swap the order of bytes in integer values.
     2     Copyright (C) 1997-2012   Free Software Foundation, Inc.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #if !defined _BYTESWAP_H && !defined _NETINET_IN_H && !defined _ENDIAN_
        H
    20  # error "Never use <bits/byteswap.h> directly; include <byteswap.h> ins
        tead."
    21  #endif
    22  
    23  #ifndef _BITS_BYTESWAP_H
    24  #define _BITS_BYTESWAP_H 1
    25  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.
    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__
   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */
   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif
   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2
   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  
   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    26  #include <features.h>
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;
    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];
    65  } __u_quad_t;
    66  #endif
    67  
    68  
    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    70     macros for each of the OS types we define below.  The definitions

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long
    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.
    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    87     these types, where using the appropriate l or ll format modifiers ca
        n
    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,
    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t
   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int
   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else
   128  # error
   129  #endif
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   131  
   132  
   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;
   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  
   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   187  
   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */
   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   191  typedef __quad_t *__qaddr_t;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE
   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    27  #include <bits/types.h>
Open file: /usr/include/bits/wordsize.h
     1  /* Determine the wordsize from the preprocessor defines.  */
     2  
     3  #if defined __x86_64__ && !defined __ILP32__
     4  # define __WORDSIZE     64
     5  #else
     6  # define __WORDSIZE     32
     7  #endif
     8  
     9  #ifdef __x86_64__
    10  # define __WORDSIZE_TIME64_COMPAT32     1
    11  /* Both x86-64 and x32 use the 64-bit system call interface.  */
    12  # define __SYSCALL_WORDSIZE             64
    13  #endif
Close file: /usr/include/bits/wordsize.h
    28  #include <bits/wordsize.h>
    29  
    30  /* Swap bytes in 16 bit value.  */
    31  #define __bswap_constant_16(x) \
    32       ((unsigned short int) ((((x) >> 8) & 0xff) | (((x) & 0xff) << 8)))
    33  
    34  /* Get __bswap_16.  */
Open file: /usr/include/bits/byteswap-16.h
     1  /* Macros to swap the order of bytes in 16-bit integer values.
     2     Copyright (C) 2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _BITS_BYTESWAP_H
    20  # error "Never use <bits/byteswap-16.h> directly; include <byteswap.h> 
        instead."
    21  #endif
    22  
    23  #ifdef __GNUC__
    24  # if __GNUC__ >= 2
    25  #  define __bswap_16(x) \
    26       (__extension__                                                     
              \
    27        ({ unsigned short int __v, __x = (unsigned short int) (x);        
              \
    28           if (__builtin_constant_p (__x))                                
              \
    29             __v = __bswap_constant_16 (__x);                             
              \
    30           else                                                           
              \
    31             __asm__ ("rorw $8, %w0"                                      
              \

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    32                      : "=r" (__v)                                        
              \
    33                      : "0" (__x)                                         
              \
    34                      : "cc");                                            
              \
    35           __v; }))
    36  # else
    37  /* This is better than nothing.  */
    38  #  define __bswap_16(x) \
    39       (__extension__                                                     
              \
    40        ({ unsigned short int __x = (unsigned short int) (x);             
              \
    41           __bswap_constant_16 (__x); }))
    42  # endif
    43  #else
    44  static __inline unsigned short int
    45  __bswap_16 (unsigned short int __bsx)
    46  {
    47    return __bswap_constant_16 (__bsx);
    48  }
    49  #endif
Close file: /usr/include/bits/byteswap-16.h
    35  #include <bits/byteswap-16.h>
    36  
    37  /* Swap bytes in 32 bit value.  */
    38  #define __bswap_constant_32(x) \
    39       ((((x) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >>  8) |         
              \
    40        (((x) & 0x0000ff00) <<  8) | (((x) & 0x000000ff) << 24))
    41  
    42  #ifdef __GNUC__
    43  # if __GNUC_PREREQ (4, 3)
    44  static __inline unsigned int
    45  __bswap_32 (unsigned int __bsx)
    46  {
    47    return __builtin_bswap32 (__bsx);
    48  }
    49  # elif __GNUC__ >= 2
    50  #  if __WORDSIZE == 64 || (defined __i486__ || defined __pentium__      
              \
    51                             || defined __pentiumpro__ || defined __penti
        um4__  \
    52                             || defined __k8__ || defined __athlon__      
              \
    53                             || defined __k6__ || defined __nocona__      
              \
    54                             || defined __core2__ || defined __geode__    
              \
    55                             || defined __amdfam10__)
    56  /* To swap the bytes in a word the i486 processors and up provide the
    57     `bswap' opcode.  On i386 we have to use three instructions.  */
    58  #   define __bswap_32(x) \
    59        (__extension__                                                    
              \
    60         ({ unsigned int __v, __x = (x);                                  
              \
    61            if (__builtin_constant_p (__x))                               
              \
    62              __v = __bswap_constant_32 (__x);                            
              \
    63            else                                                          
              \
    64              __asm__ ("bswap %0" : "=r" (__v) : "0" (__x));              
              \
    65            __v; }))
    66  #  else
    67  #   define __bswap_32(x)                                                
              \
    68        (__extension__                                                    
              \
    69         ({ unsigned int __v, __x = (x);                                  
              \

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    70            if (__builtin_constant_p (__x))                               
              \
    71              __v = __bswap_constant_32 (__x);                            
              \
    72            else                                                          
              \
    73              __asm__ ("rorw $8, %w0;"                                    
              \
    74                       "rorl $16, %0;"                                    
              \
    75                       "rorw $8, %w0"                                     
              \
    76                       : "=r" (__v)                                       
              \
    77                       : "0" (__x)                                        
              \
    78                       : "cc");                                           
              \
    79            __v; }))
    80  #  endif
    81  # else
    82  #  define __bswap_32(x) \
    83       (__extension__                                                     
              \
    84        ({ unsigned int __x = (x); __bswap_constant_32 (__x); }))
    85  # endif
    86  #else
    87  static __inline unsigned int
    88  __bswap_32 (unsigned int __bsx)
    89  {
    90    return __bswap_constant_32 (__bsx);
    91  }
    92  #endif
    93  
    94  
    95  #if __GNUC_PREREQ (2, 0)
    96  /* Swap bytes in 64 bit value.  */
    97  # define __bswap_constant_64(x) \
    98       (__extension__ ((((x) & 0xff00000000000000ull) >> 56)              
              \
    99                       | (((x) & 0x00ff000000000000ull) >> 40)            
              \
   100                       | (((x) & 0x0000ff0000000000ull) >> 24)            
              \
   101                       | (((x) & 0x000000ff00000000ull) >> 8)             
              \
   102                       | (((x) & 0x00000000ff000000ull) << 8)             
              \
   103                       | (((x) & 0x0000000000ff0000ull) << 24)            
              \
   104                       | (((x) & 0x000000000000ff00ull) << 40)            
              \
   105                       | (((x) & 0x00000000000000ffull) << 56)))
   106  
   107  # if __GNUC_PREREQ (4, 3)
   108  static __inline __uint64_t
   109  __bswap_64 (__uint64_t __bsx)
   110  {
   111    return __builtin_bswap64 (__bsx);
   112  }
   113  # elif __WORDSIZE == 64
   114  #  define __bswap_64(x) \
   115       (__extension__                                                     
              \
   116        ({ __uint64_t __v, __x = (x);                                     
              \
   117           if (__builtin_constant_p (__x))                                
              \
   118             __v = __bswap_constant_64 (__x);                             
              \
   119           else                                                           
              \
   120             __asm__ ("bswap %q0" : "=r" (__v) : "0" (__x));              
              \
   121           __v; }))

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   122  # else
   123  #  define __bswap_64(x) \
   124       (__extension__                                                    
               \
   125        ({ union { __extension__ __uint64_t __ll;                        
               \
   126                   unsigned int __l[2]; } __w, __r;                      
               \
   127           if (__builtin_constant_p (x))                                 
               \
   128             __r.__ll = __bswap_constant_64 (x);                         
               \
   129           else                                                          
               \
   130             {                                                           
               \
   131               __w.__ll = (x);                                           
               \
   132               __r.__l[0] = __bswap_32 (__w.__l[1]);                     
               \
   133               __r.__l[1] = __bswap_32 (__w.__l[0]);                     
               \
   134             }                                                           
               \
   135           __r.__ll; }))
   136  # endif
   137  #elif __GLIBC_HAVE_LONG_LONG
   138  # define __bswap_constant_64(x) \
   139       ((((x) & 0xff00000000000000ull) >> 56)                             
              \
   140        | (((x) & 0x00ff000000000000ull) >> 40)                           
              \
   141        | (((x) & 0x0000ff0000000000ull) >> 24)                           
              \
   142        | (((x) & 0x000000ff00000000ull) >> 8)                            
              \
   143        | (((x) & 0x00000000ff000000ull) << 8)                            
              \
   144        | (((x) & 0x0000000000ff0000ull) << 24)                           
              \
   145        | (((x) & 0x000000000000ff00ull) << 40)                           
              \
   146        | (((x) & 0x00000000000000ffull) << 56))
   147  
   148  static __inline __uint64_t
   149  __bswap_64 (__uint64_t __bsx)
   150  {
   151    return __bswap_constant_64 (__bsx);
   152  }
   153  #endif
   154  
   155  #endif /* _BITS_BYTESWAP_H */
Close file: /usr/include/bits/byteswap.h
    60  # include <bits/byteswap.h>
    61  
    62  # if __BYTE_ORDER == __LITTLE_ENDIAN
    63  #  define htobe16(x) __bswap_16 (x)
    64  #  define htole16(x) (x)
    65  #  define be16toh(x) __bswap_16 (x)
    66  #  define le16toh(x) (x)
    67  
    68  #  define htobe32(x) __bswap_32 (x)
    69  #  define htole32(x) (x)
    70  #  define be32toh(x) __bswap_32 (x)
    71  #  define le32toh(x) (x)
    72  
    73  #  if __GLIBC_HAVE_LONG_LONG
    74  #   define htobe64(x) __bswap_64 (x)
    75  #   define htole64(x) (x)
    76  #   define be64toh(x) __bswap_64 (x)
    77  #   define le64toh(x) (x)
    78  #  endif
    79  
    80  # else
    81  #  define htobe16(x) (x)

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    82  #  define htole16(x) __bswap_16 (x)
    83  #  define be16toh(x) (x)
    84  #  define le16toh(x) __bswap_16 (x)
    85  
    86  #  define htobe32(x) (x)
    87  #  define htole32(x) __bswap_32 (x)
    88  #  define be32toh(x) (x)
    89  #  define le32toh(x) __bswap_32 (x)
    90  
    91  #  if __GLIBC_HAVE_LONG_LONG
    92  #   define htobe64(x) (x)
    93  #   define htole64(x) __bswap_64 (x)
    94  #   define be64toh(x) (x)
    95  #   define le64toh(x) __bswap_64 (x)
    96  #  endif
    97  # endif
    98  #endif
    99  
   100  #endif  /* endian.h */
Close file: /usr/include/endian.h
    64  # include <endian.h>
    65  
    66  union wait
    67    {
    68      int w_status;
    69      struct
    70        {
    71  # if    __BYTE_ORDER == __LITTLE_ENDIAN
    72          unsigned int __w_termsig:7; /* Terminating signal.  */
    73          unsigned int __w_coredump:1; /* Set if dumped core.  */
    74          unsigned int __w_retcode:8; /* Return code if exited normally. 
         */
    75          unsigned int:16;
    76  # endif                         /* Little endian.  */
    77  # if    __BYTE_ORDER == __BIG_ENDIAN
    78          unsigned int:16;
    79          unsigned int __w_retcode:8;
    80          unsigned int __w_coredump:1;
    81          unsigned int __w_termsig:7;
    82  # endif                         /* Big endian.  */
    83        } __wait_terminated;
    84      struct
    85        {
    86  # if    __BYTE_ORDER == __LITTLE_ENDIAN
    87          unsigned int __w_stopval:8; /* W_STOPPED if stopped.  */
    88          unsigned int __w_stopsig:8; /* Stopping signal.  */
    89          unsigned int:16;
    90  # endif                         /* Little endian.  */
    91  # if    __BYTE_ORDER == __BIG_ENDIAN
    92          unsigned int:16;
    93          unsigned int __w_stopsig:8; /* Stopping signal.  */
    94          unsigned int __w_stopval:8; /* W_STOPPED if stopped.  */
    95  # endif                         /* Big endian.  */
    96        } __wait_stopped;
    97    };
    98  
    99  # define w_termsig      __wait_terminated.__w_termsig
   100  # define w_coredump     __wait_terminated.__w_coredump
   101  # define w_retcode      __wait_terminated.__w_retcode
   102  # define w_stopsig      __wait_stopped.__w_stopsig
   103  # define w_stopval      __wait_stopped.__w_stopval
   104  
   105  #endif  /* Use BSD.  */
Close file: /usr/include/bits/waitstatus.h
    42  # include <bits/waitstatus.h>
    43  
    44  # ifdef __USE_BSD
    45  
    46  /* Lots of hair to allow traditional BSD use of `union wait'
    47     as well as POSIX.1 use of `int' for the status word.  */
    48  
    49  #  if defined __GNUC__ && !defined __cplusplus
    50  #   define __WAIT_INT(status) \
    51    (__extension__ (((union { __typeof(status) __in; int __i; }) \
    52                     { .__in = (status) }).__i))

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    53  #  else
    54  #   define __WAIT_INT(status)   (*(int *) &(status))
    55  #  endif
    56  
    57  /* This is the type of the argument to `wait'.  The funky union
    58     causes redeclarations with either `int *' or `union wait *' to be
    59     allowed without complaint.  __WAIT_STATUS_DEFN is the type used in
    60     the actual function definitions.  */
    61  
    62  #  if !defined __GNUC__ || __GNUC__ < 2 || defined __cplusplus
    63  #   define __WAIT_STATUS        void *
    64  #   define __WAIT_STATUS_DEFN   void *
    65  #  else
    66  /* This works in GCC 2.6.1 and later.  */
    67  typedef union
    68    {
    69      union wait *__uptr;
    70      int *__iptr;
    71    } __WAIT_STATUS __attribute__ ((__transparent_union__));
    72  #   define __WAIT_STATUS_DEFN   int *
    73  #  endif
    74  
    75  # else /* Don't use BSD.  */
    76  
    77  #  define __WAIT_INT(status)    (status)
    78  #  define __WAIT_STATUS         int *
    79  #  define __WAIT_STATUS_DEFN    int *
    80  
    81  # endif /* Use BSD.  */
    82  
    83  /* Define the macros <sys/wait.h> also would define this way.  */
    84  # define WEXITSTATUS(status)    __WEXITSTATUS (__WAIT_INT (status))
    85  # define WTERMSIG(status)       __WTERMSIG (__WAIT_INT (status))
    86  # define WSTOPSIG(status)       __WSTOPSIG (__WAIT_INT (status))
    87  # define WIFEXITED(status)      __WIFEXITED (__WAIT_INT (status))
    88  # define WIFSIGNALED(status)    __WIFSIGNALED (__WAIT_INT (status))
    89  # define WIFSTOPPED(status)     __WIFSTOPPED (__WAIT_INT (status))
    90  # ifdef __WIFCONTINUED
    91  #  define WIFCONTINUED(status)  __WIFCONTINUED (__WAIT_INT (status))
    92  # endif
    93  #endif  /* X/Open or XPG7 and <sys/wait.h> not included.  */
    94  
    95  __BEGIN_NAMESPACE_STD
    96  /* Returned by `div'.  */
    97  typedef struct
    98    {
    99      int quot;                   /* Quotient.  */
   100      int rem;                    /* Remainder.  */
   101    } div_t;
   102  
   103  /* Returned by `ldiv'.  */
   104  #ifndef __ldiv_t_defined
   105  typedef struct
   106    {
   107      long int quot;              /* Quotient.  */
   108      long int rem;               /* Remainder.  */
   109    } ldiv_t;
   110  # define __ldiv_t_defined       1
   111  #endif
   112  __END_NAMESPACE_STD
   113  
   114  #if defined __USE_ISOC99 && !defined __lldiv_t_defined
   115  __BEGIN_NAMESPACE_C99
   116  /* Returned by `lldiv'.  */
   117  __extension__ typedef struct
   118    {
   119      long long int quot;         /* Quotient.  */
   120      long long int rem;          /* Remainder.  */
   121    } lldiv_t;
   122  # define __lldiv_t_defined      1
   123  __END_NAMESPACE_C99
   124  #endif
   125  
   126  
   127  /* The largest number rand will return (same as INT_MAX).  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   128  #define RAND_MAX        2147483647
   129  
   130  
   131  /* We define these the same for all machines.
   132     Changes from this to the outside world should be done in `_exit'.  *
        /
   133  #define EXIT_FAILURE    1       /* Failing exit status.  */
   134  #define EXIT_SUCCESS    0       /* Successful exit status.  */
   135  
   136  
   137  /* Maximum length of a multibyte character in the current locale.  */
   138  #define MB_CUR_MAX      (__ctype_get_mb_cur_max ())
   139  extern size_t __ctype_get_mb_cur_max (void) __THROW __wur;
   140  
   141  
   142  __BEGIN_NAMESPACE_STD
   143  /* Convert a string to a floating-point number.  */
   144  extern double atof (const char *__nptr)
   145       __THROW __attribute_pure__ __nonnull ((1)) __wur;
   146  /* Convert a string to an integer.  */
   147  extern int atoi (const char *__nptr)
   148       __THROW __attribute_pure__ __nonnull ((1)) __wur;
   149  /* Convert a string to a long integer.  */
   150  extern long int atol (const char *__nptr)
   151       __THROW __attribute_pure__ __nonnull ((1)) __wur;
   152  __END_NAMESPACE_STD
   153  
   154  #if defined __USE_ISOC99 || (defined __GLIBC_HAVE_LONG_LONG && defined 
        __USE_MISC)
   155  __BEGIN_NAMESPACE_C99
   156  /* Convert a string to a long long integer.  */
   157  __extension__ extern long long int atoll (const char *__nptr)
   158       __THROW __attribute_pure__ __nonnull ((1)) __wur;
   159  __END_NAMESPACE_C99
   160  #endif
   161  
   162  __BEGIN_NAMESPACE_STD
   163  /* Convert a string to a floating-point number.  */
   164  extern double strtod (const char *__restrict __nptr,
   165                        char **__restrict __endptr)
   166       __THROW __nonnull ((1));
   167  __END_NAMESPACE_STD
   168  
   169  #ifdef  __USE_ISOC99
   170  __BEGIN_NAMESPACE_C99
   171  /* Likewise for `float' and `long double' sizes of floating-point numbe
        rs.  */
   172  extern float strtof (const char *__restrict __nptr,
   173                       char **__restrict __endptr) __THROW __nonnull ((1)
        );
   174  
   175  extern long double strtold (const char *__restrict __nptr,
   176                              char **__restrict __endptr)
   177       __THROW __nonnull ((1));
   178  __END_NAMESPACE_C99
   179  #endif
   180  
   181  __BEGIN_NAMESPACE_STD
   182  /* Convert a string to a long integer.  */
   183  extern long int strtol (const char *__restrict __nptr,
   184                          char **__restrict __endptr, int __base)
   185       __THROW __nonnull ((1));
   186  /* Convert a string to an unsigned long integer.  */
   187  extern unsigned long int strtoul (const char *__restrict __nptr,
   188                                    char **__restrict __endptr, int __bas
        e)
   189       __THROW __nonnull ((1));
   190  __END_NAMESPACE_STD
   191  
   192  #if defined __GLIBC_HAVE_LONG_LONG && defined __USE_BSD
   193  /* Convert a string to a quadword integer.  */
   194  __extension__
   195  extern long long int strtoq (const char *__restrict __nptr,
   196                               char **__restrict __endptr, int __base)
   197       __THROW __nonnull ((1));

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   198  /* Convert a string to an unsigned quadword integer.  */
   199  __extension__
   200  extern unsigned long long int strtouq (const char *__restrict __nptr,
   201                                         char **__restrict __endptr, int 
        __base)
   202       __THROW __nonnull ((1));
   203  #endif /* GCC and use BSD.  */
   204  
   205  #if defined __USE_ISOC99 || (defined __GLIBC_HAVE_LONG_LONG && defined 
        __USE_MISC)
   206  __BEGIN_NAMESPACE_C99
   207  /* Convert a string to a quadword integer.  */
   208  __extension__
   209  extern long long int strtoll (const char *__restrict __nptr,
   210                                char **__restrict __endptr, int __base)
   211       __THROW __nonnull ((1));
   212  /* Convert a string to an unsigned quadword integer.  */
   213  __extension__
   214  extern unsigned long long int strtoull (const char *__restrict __nptr,
   215                                          char **__restrict __endptr, int
         __base)
   216       __THROW __nonnull ((1));
   217  __END_NAMESPACE_C99
   218  #endif /* ISO C99 or GCC and use MISC.  */
   219  
   220  
   221  #ifdef __USE_GNU
   222  /* The concept of one static locale per category is not very well
   223     thought out.  Many applications will need to process its data using
   224     information from several different locales.  Another problem is
   225     the implementation of the internationalization handling in the
   226     ISO C++ standard library.  To support this another set of
   227     the functions using locale data exist which take an additional
   228     argument.
   229  
   230     Attention: even though several *_l interfaces are part of POSIX:2008
        ,
   231     these are not.  */
   232  
   233  /* Structure for reentrant locale using functions.  This is an
   234     (almost) opaque type for the user level programs.  */
   235  # include <xlocale.h>
   236  
   237  /* Special versions of the functions above which take the locale to
   238     use as an additional parameter.  */
   239  extern long int strtol_l (const char *__restrict __nptr,
   240                            char **__restrict __endptr, int __base,
   241                            __locale_t __loc) __THROW __nonnull ((1, 4));
   242  
   243  extern unsigned long int strtoul_l (const char *__restrict __nptr,
   244                                      char **__restrict __endptr,
   245                                      int __base, __locale_t __loc)
   246       __THROW __nonnull ((1, 4));
   247  
   248  __extension__
   249  extern long long int strtoll_l (const char *__restrict __nptr,
   250                                  char **__restrict __endptr, int __base,
   251                                  __locale_t __loc)
   252       __THROW __nonnull ((1, 4));
   253  
   254  __extension__
   255  extern unsigned long long int strtoull_l (const char *__restrict __nptr
        ,
   256                                            char **__restrict __endptr,
   257                                            int __base, __locale_t __loc)
   258       __THROW __nonnull ((1, 4));
   259  
   260  extern double strtod_l (const char *__restrict __nptr,
   261                          char **__restrict __endptr, __locale_t __loc)
   262       __THROW __nonnull ((1, 3));
   263  
   264  extern float strtof_l (const char *__restrict __nptr,
   265                         char **__restrict __endptr, __locale_t __loc)
   266       __THROW __nonnull ((1, 3));
   267  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   268  extern long double strtold_l (const char *__restrict __nptr,
   269                                char **__restrict __endptr,
   270                                __locale_t __loc)
   271       __THROW __nonnull ((1, 3));
   272  #endif /* GNU */
   273  
   274  
   275  #ifdef __USE_EXTERN_INLINES
   276  __BEGIN_NAMESPACE_STD
   277  __extern_inline int
   278  __NTH (atoi (const char *__nptr))
   279  {
   280    return (int) strtol (__nptr, (char **) NULL, 10);
   281  }
   282  __extern_inline long int
   283  __NTH (atol (const char *__nptr))
   284  {
   285    return strtol (__nptr, (char **) NULL, 10);
   286  }
   287  __END_NAMESPACE_STD
   288  
   289  # if defined __USE_MISC || defined __USE_ISOC99
   290  __BEGIN_NAMESPACE_C99
   291  __extension__ __extern_inline long long int
   292  __NTH (atoll (const char *__nptr))
   293  {
   294    return strtoll (__nptr, (char **) NULL, 10);
   295  }
   296  __END_NAMESPACE_C99
   297  # endif
   298  #endif /* Optimizing and Inlining.  */
   299  
   300  
   301  #if defined __USE_SVID || defined __USE_XOPEN_EXTENDED
   302  /* Convert N to base 64 using the digits "./0-9A-Za-z", least-significa
        nt
   303     digit first.  Returns a pointer to static storage overwritten by the
   304     next call.  */
   305  extern char *l64a (long int __n) __THROW __wur;
   306  
   307  /* Read a number from a string S in base 64 as above.  */
   308  extern long int a64l (const char *__s)
   309       __THROW __attribute_pure__ __nonnull ((1)) __wur;
   310  
   311  #endif  /* Use SVID || extended X/Open.  */
   312  
   313  #if defined __USE_SVID || defined __USE_XOPEN_EXTENDED || defined __USE
        _BSD
Open file: /usr/include/sys/types.h
     1  /* Copyright (C) 1991,1992,1994-2002,2006,2010 Free Software Foundation
        , Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      POSIX Standard: 2.6 Primitive System Data Types <sys/types.h>
    20   */
    21  
    22  #ifndef _SYS_TYPES_H
    23  #define _SYS_TYPES_H    1
    24  
Open file: /usr/include/features.h

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  
   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    25  #include <features.h>
    26  
    27  __BEGIN_DECLS
    28  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;
    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];
    65  } __u_quad_t;
    66  #endif
    67  
    68  
    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    70     macros for each of the OS types we define below.  The definitions
    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long
    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.
    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    87     these types, where using the appropriate l or ll format modifiers ca
        n

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,
    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t
   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int
   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else
   128  # error
   129  #endif
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   131  
   132  
   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;
   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  
   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   187  
   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */
   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   191  typedef __quad_t *__qaddr_t;
   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE
   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    29  #include <bits/types.h>
    30  
    31  #ifdef  __USE_BSD
    32  # ifndef __u_char_defined
    33  typedef __u_char u_char;
    34  typedef __u_short u_short;
    35  typedef __u_int u_int;
    36  typedef __u_long u_long;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    37  typedef __quad_t quad_t;
    38  typedef __u_quad_t u_quad_t;
    39  typedef __fsid_t fsid_t;
    40  #  define __u_char_defined
    41  # endif
    42  #endif
    43  
    44  typedef __loff_t loff_t;
    45  
    46  #ifndef __ino_t_defined
    47  # ifndef __USE_FILE_OFFSET64
    48  typedef __ino_t ino_t;
    49  # else
    50  typedef __ino64_t ino_t;
    51  # endif
    52  # define __ino_t_defined
    53  #endif
    54  #if defined __USE_LARGEFILE64 && !defined __ino64_t_defined
    55  typedef __ino64_t ino64_t;
    56  # define __ino64_t_defined
    57  #endif
    58  
    59  #ifndef __dev_t_defined
    60  typedef __dev_t dev_t;
    61  # define __dev_t_defined
    62  #endif
    63  
    64  #ifndef __gid_t_defined
    65  typedef __gid_t gid_t;
    66  # define __gid_t_defined
    67  #endif
    68  
    69  #ifndef __mode_t_defined
    70  typedef __mode_t mode_t;
    71  # define __mode_t_defined
    72  #endif
    73  
    74  #ifndef __nlink_t_defined
    75  typedef __nlink_t nlink_t;
    76  # define __nlink_t_defined
    77  #endif
    78  
    79  #ifndef __uid_t_defined
    80  typedef __uid_t uid_t;
    81  # define __uid_t_defined
    82  #endif
    83  
    84  #ifndef __off_t_defined
    85  # ifndef __USE_FILE_OFFSET64
    86  typedef __off_t off_t;
    87  # else
    88  typedef __off64_t off_t;
    89  # endif
    90  # define __off_t_defined
    91  #endif
    92  #if defined __USE_LARGEFILE64 && !defined __off64_t_defined
    93  typedef __off64_t off64_t;
    94  # define __off64_t_defined
    95  #endif
    96  
    97  #ifndef __pid_t_defined
    98  typedef __pid_t pid_t;
    99  # define __pid_t_defined
   100  #endif
   101  
   102  #if (defined __USE_SVID || defined __USE_XOPEN || defined __USE_XOPEN2K
        8) \
   103      && !defined __id_t_defined
   104  typedef __id_t id_t;
   105  # define __id_t_defined
   106  #endif
   107  
   108  #ifndef __ssize_t_defined
   109  typedef __ssize_t ssize_t;
   110  # define __ssize_t_defined

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   111  #endif
   112  
   113  #ifdef  __USE_BSD
   114  # ifndef __daddr_t_defined
   115  typedef __daddr_t daddr_t;
   116  typedef __caddr_t caddr_t;
   117  #  define __daddr_t_defined
   118  # endif
   119  #endif
   120  
   121  #if (defined __USE_SVID || defined __USE_XOPEN) && !defined __key_t_def
        ined
   122  typedef __key_t key_t;
   123  # define __key_t_defined
   124  #endif
   125  
   126  #if defined __USE_XOPEN || defined __USE_XOPEN2K8
   127  # define __need_clock_t
   128  #endif
   129  #define __need_time_t
   130  #define __need_timer_t
   131  #define __need_clockid_t
Open file: /usr/include/time.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      ISO C99 Standard: 7.23 Date and time    <time.h>
    20   */
    21  
    22  #ifndef _TIME_H
    23  
    24  #if (! defined __need_time_t && !defined __need_clock_t && \
    25       ! defined __need_timespec)
    26  # define _TIME_H        1
    27  # include <features.h>
    28  
    29  __BEGIN_DECLS
    30  
    31  #endif
    32  
    33  #ifdef  _TIME_H
    34  /* Get size_t and NULL from <stddef.h>.  */
    35  # define __need_size_t
    36  # define __need_NULL
    37  # include <stddef.h>
    38  
    39  /* This defines CLOCKS_PER_SEC, which is the number of processor clock
    40     ticks per second.  */
    41  # include <bits/time.h>
    42  
    43  /* This is the obsolete POSIX.1-1988 name for the same constant.  */
    44  # if !defined __STRICT_ANSI__ && !defined __USE_XOPEN2K
    45  #  ifndef CLK_TCK
    46  #   define CLK_TCK      CLOCKS_PER_SEC
    47  #  endif
    48  # endif
    49  
    50  #endif /* <time.h> included.  */
    51  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    52  #if !defined __clock_t_defined && (defined _TIME_H || defined __need_cl
        ock_t)
    53  # define __clock_t_defined      1
    54  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;
    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];
    65  } __u_quad_t;
    66  #endif
    67  
    68  
    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    70     macros for each of the OS types we define below.  The definitions
    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long
    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.
    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    87     these types, where using the appropriate l or ll format modifiers ca
        n
    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,
    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t
   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int
   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else
   128  # error
   129  #endif
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   131  
   132  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;
   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  
   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   187  
   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */
   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   191  typedef __quad_t *__qaddr_t;
   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE
   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    55  # include <bits/types.h>
    56  
    57  __BEGIN_NAMESPACE_STD
    58  /* Returned by `clock'.  */
    59  typedef __clock_t clock_t;
    60  __END_NAMESPACE_STD
    61  #if defined __USE_XOPEN || defined __USE_POSIX || defined __USE_MISC
    62  __USING_NAMESPACE_STD(clock_t)
    63  #endif
    64  
    65  #endif /* clock_t not defined and <time.h> or need clock_t.  */
    66  #undef  __need_clock_t
    67  
    68  #if !defined __time_t_defined && (defined _TIME_H || defined __need_tim
        e_t)
    69  # define __time_t_defined       1
    70  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;
    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];
    65  } __u_quad_t;
    66  #endif
    67  
    68  
    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    70     macros for each of the OS types we define below.  The definitions
    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long
    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.
    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    87     these types, where using the appropriate l or ll format modifiers ca
        n
    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,
    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int
   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else
   128  # error
   129  #endif
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   131  
   132  
   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;
   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   187  
   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */
   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   191  typedef __quad_t *__qaddr_t;
   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE
   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    71  # include <bits/types.h>
    72  
    73  __BEGIN_NAMESPACE_STD
    74  /* Returned by `time'.  */
    75  typedef __time_t time_t;
    76  __END_NAMESPACE_STD
    77  #if defined __USE_POSIX || defined __USE_MISC || defined __USE_SVID
    78  __USING_NAMESPACE_STD(time_t)
    79  #endif
    80  
    81  #endif /* time_t not defined and <time.h> or need time_t.  */
    82  #undef  __need_time_t
    83  
    84  #if !defined __clockid_t_defined && \
    85     ((defined _TIME_H && defined __USE_POSIX199309) || defined __need_cl
        ockid_t)
    86  # define __clockid_t_defined    1
    87  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;
    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];
    65  } __u_quad_t;
    66  #endif
    67  
    68  
    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    70     macros for each of the OS types we define below.  The definitions
    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long
    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    87     these types, where using the appropriate l or ll format modifiers ca
        n
    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,
    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t
   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int
   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else
   128  # error
   129  #endif
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   131  
   132  
   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;
   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  
   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   187  
   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */
   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   191  typedef __quad_t *__qaddr_t;
   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE
   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    88  # include <bits/types.h>
    89  
    90  /* Clock ID used in clock and timer functions.  */
    91  typedef __clockid_t clockid_t;
    92  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    93  #endif /* clockid_t not defined and <time.h> or need clockid_t.  */
    94  #undef  __clockid_time_t
    95  
    96  #if !defined __timer_t_defined && \
    97      ((defined _TIME_H && defined __USE_POSIX199309) || defined __need_t
        imer_t)
    98  # define __timer_t_defined      1
    99  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;
    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];
    65  } __u_quad_t;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    66  #endif
    67  
    68  
    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    70     macros for each of the OS types we define below.  The definitions
    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long
    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.
    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    87     these types, where using the appropriate l or ll format modifiers ca
        n
    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,
    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t
   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int
   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else
   128  # error

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   129  #endif
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   131  
   132  
   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;
   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  
   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   187  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */
   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   191  typedef __quad_t *__qaddr_t;
   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE
   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
   100  # include <bits/types.h>
   101  
   102  /* Timer ID returned by `timer_create'.  */
   103  typedef __timer_t timer_t;
   104  
   105  #endif /* timer_t not defined and <time.h> or need timer_t.  */
   106  #undef  __need_timer_t
   107  
   108  
   109  #if (!defined __timespec_defined                                        
        \
   110       && ((defined _TIME_H                                               
        \
   111            && (defined __USE_POSIX199309 || defined __USE_MISC           
        \
   112                || defined __USE_ISOC11))                                 
        \
   113           || defined __need_timespec))
   114  # define __timespec_defined     1
   115  
   116  # include <bits/types.h>        /* This defines __time_t for us.  */
   117  
   118  /* POSIX.1b structure for a time value.  This is like a `struct timeval
        ' but
   119     has nanoseconds instead of microseconds.  */
   120  struct timespec
   121    {
   122      __time_t tv_sec;            /* Seconds.  */
   123      __syscall_slong_t tv_nsec;  /* Nanoseconds.  */
   124    };
   125  
   126  #endif /* timespec not defined and <time.h> or need timespec.  */
   127  #undef  __need_timespec
   128  
   129  
   130  #ifdef  _TIME_H
   131  __BEGIN_NAMESPACE_STD
   132  /* Used by other time functions.  */
   133  struct tm
   134  {
   135    int tm_sec;                   /* Seconds.     [0-60] (1 leap second) 
        */
   136    int tm_min;                   /* Minutes.     [0-59] */
   137    int tm_hour;                  /* Hours.       [0-23] */
   138    int tm_mday;                  /* Day.         [1-31] */
   139    int tm_mon;                   /* Month.       [0-11] */
   140    int tm_year;                  /* Year - 1900.  */
   141    int tm_wday;                  /* Day of week. [0-6] */
   142    int tm_yday;                  /* Days in year.[0-365] */
   143    int tm_isdst;                 /* DST.         [-1/0/1]*/
   144  
   145  # ifdef __USE_BSD
   146    long int tm_gmtoff;           /* Seconds east of UTC.  */
   147    const char *tm_zone;          /* Timezone abbreviation.  */
   148  # else
   149    long int __tm_gmtoff;         /* Seconds east of UTC.  */
   150    const char *__tm_zone;        /* Timezone abbreviation.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   151  # endif
   152  };
   153  __END_NAMESPACE_STD
   154  #if defined __USE_XOPEN || defined __USE_POSIX || defined __USE_MISC
   155  __USING_NAMESPACE_STD(tm)
   156  #endif
   157  
   158  
   159  # ifdef __USE_POSIX199309
   160  /* POSIX.1b structure for timer start values and intervals.  */
   161  struct itimerspec
   162    {
   163      struct timespec it_interval;
   164      struct timespec it_value;
   165    };
   166  
   167  /* We can use a simple forward declaration.  */
   168  struct sigevent;
   169  
   170  # endif /* POSIX.1b */
   171  
   172  # ifdef __USE_XOPEN2K
   173  #  ifndef __pid_t_defined
   174  typedef __pid_t pid_t;
   175  #   define __pid_t_defined
   176  #  endif
   177  # endif
   178  
   179  
   180  # ifdef __USE_ISOC11
   181  /* Time base values for timespec_get.  */
   182  # define TIME_UTC 1
   183  # endif
   184  
   185  
   186  __BEGIN_NAMESPACE_STD
   187  /* Time used by the program so far (user time + system time).
   188     The result / CLOCKS_PER_SECOND is program time in seconds.  */
   189  extern clock_t clock (void) __THROW;
   190  
   191  /* Return the current time and put it in *TIMER if TIMER is not NULL.  
        */
   192  extern time_t time (time_t *__timer) __THROW;
   193  
   194  /* Return the difference between TIME1 and TIME0.  */
   195  extern double difftime (time_t __time1, time_t __time0)
   196       __THROW __attribute__ ((__const__));
   197  
   198  /* Return the `time_t' representation of TP and normalize TP.  */
   199  extern time_t mktime (struct tm *__tp) __THROW;
   200  
   201  
   202  /* Format TP into S according to FORMAT.
   203     Write no more than MAXSIZE characters and return the number
   204     of characters written, or 0 if it would exceed MAXSIZE.  */
   205  extern size_t strftime (char *__restrict __s, size_t __maxsize,
   206                          const char *__restrict __format,
   207                          const struct tm *__restrict __tp) __THROW;
   208  __END_NAMESPACE_STD
   209  
   210  # ifdef __USE_XOPEN
   211  /* Parse S according to FORMAT and store binary time information in TP.
   212     The return value is a pointer to the first unparsed character in S. 
         */
   213  extern char *strptime (const char *__restrict __s,
   214                         const char *__restrict __fmt, struct tm *__tp)
   215       __THROW;
   216  # endif
   217  
   218  # ifdef __USE_XOPEN2K8
   219  /* Similar to the two functions above but take the information from
   220     the provided locale and not the global locale.  */
   221  # include <xlocale.h>
   222  
   223  extern size_t strftime_l (char *__restrict __s, size_t __maxsize,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   224                            const char *__restrict __format,
   225                            const struct tm *__restrict __tp,
   226                            __locale_t __loc) __THROW;
   227  # endif
   228  
   229  # ifdef __USE_GNU
   230  extern char *strptime_l (const char *__restrict __s,
   231                           const char *__restrict __fmt, struct tm *__tp,
   232                           __locale_t __loc) __THROW;
   233  # endif
   234  
   235  
   236  __BEGIN_NAMESPACE_STD
   237  /* Return the `struct tm' representation of *TIMER
   238     in Universal Coordinated Time (aka Greenwich Mean Time).  */
   239  extern struct tm *gmtime (const time_t *__timer) __THROW;
   240  
   241  /* Return the `struct tm' representation
   242     of *TIMER in the local timezone.  */
   243  extern struct tm *localtime (const time_t *__timer) __THROW;
   244  __END_NAMESPACE_STD
   245  
   246  # if defined __USE_POSIX || defined __USE_MISC
   247  /* Return the `struct tm' representation of *TIMER in UTC,
   248     using *TP to store the result.  */
   249  extern struct tm *gmtime_r (const time_t *__restrict __timer,
   250                              struct tm *__restrict __tp) __THROW;
   251  
   252  /* Return the `struct tm' representation of *TIMER in local time,
   253     using *TP to store the result.  */
   254  extern struct tm *localtime_r (const time_t *__restrict __timer,
   255                                 struct tm *__restrict __tp) __THROW;
   256  # endif /* POSIX or misc */
   257  
   258  __BEGIN_NAMESPACE_STD
   259  /* Return a string of the form "Day Mon dd hh:mm:ss yyyy\n"
   260     that is the representation of TP in this format.  */
   261  extern char *asctime (const struct tm *__tp) __THROW;
   262  
   263  /* Equivalent to `asctime (localtime (timer))'.  */
   264  extern char *ctime (const time_t *__timer) __THROW;
   265  __END_NAMESPACE_STD
   266  
   267  # if defined __USE_POSIX || defined __USE_MISC
   268  /* Reentrant versions of the above functions.  */
   269  
   270  /* Return in BUF a string of the form "Day Mon dd hh:mm:ss yyyy\n"
   271     that is the representation of TP in this format.  */
   272  extern char *asctime_r (const struct tm *__restrict __tp,
   273                          char *__restrict __buf) __THROW;
   274  
   275  /* Equivalent to `asctime_r (localtime_r (timer, *TMP*), buf)'.  */
   276  extern char *ctime_r (const time_t *__restrict __timer,
   277                        char *__restrict __buf) __THROW;
   278  # endif /* POSIX or misc */
   279  
   280  
   281  /* Defined in localtime.c.  */
   282  extern char *__tzname[2];       /* Current timezone names.  */
   283  extern int __daylight;          /* If daylight-saving time is ever in u
        se.  */
   284  extern long int __timezone;     /* Seconds west of UTC.  */
   285  
   286  
   287  # ifdef __USE_POSIX
   288  /* Same as above.  */
   289  extern char *tzname[2];
   290  
   291  /* Set time conversion information from the TZ environment variable.
   292     If TZ is not defined, a locale-dependent default is used.  */
   293  extern void tzset (void) __THROW;
   294  # endif
   295  
   296  # if defined __USE_SVID || defined __USE_XOPEN
   297  extern int daylight;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   298  extern long int timezone;
   299  # endif
   300  
   301  # ifdef __USE_SVID
   302  /* Set the system time to *WHEN.
   303     This call is restricted to the superuser.  */
   304  extern int stime (const time_t *__when) __THROW;
   305  # endif
   306  
   307  
   308  /* Nonzero if YEAR is a leap year (every 4 years,
   309     except every 100th isn't, and every 400th is).  */
   310  # define __isleap(year) \
   311    ((year) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))
   312  
   313  
   314  # ifdef __USE_MISC
   315  /* Miscellaneous functions many Unices inherited from the public domain
   316     localtime package.  These are included only for compatibility.  */
   317  
   318  /* Like `mktime', but for TP represents Universal Time, not local time.
          */
   319  extern time_t timegm (struct tm *__tp) __THROW;
   320  
   321  /* Another name for `mktime'.  */
   322  extern time_t timelocal (struct tm *__tp) __THROW;
   323  
   324  /* Return the number of days in YEAR.  */
   325  extern int dysize (int __year) __THROW  __attribute__ ((__const__));
   326  # endif
   327  
   328  
   329  # ifdef __USE_POSIX199309
   330  /* Pause execution for a number of nanoseconds.
   331  
   332     This function is a cancellation point and therefore not marked with
   333     __THROW.  */
   334  extern int nanosleep (const struct timespec *__requested_time,
   335                        struct timespec *__remaining);
   336  
   337  
   338  /* Get resolution of clock CLOCK_ID.  */
   339  extern int clock_getres (clockid_t __clock_id, struct timespec *__res) 
        __THROW;
   340  
   341  /* Get current value of clock CLOCK_ID and store it in TP.  */
   342  extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) 
        __THROW;
   343  
   344  /* Set clock CLOCK_ID to value TP.  */
   345  extern int clock_settime (clockid_t __clock_id, const struct timespec *
        __tp)
   346       __THROW;
   347  
   348  #  ifdef __USE_XOPEN2K
   349  /* High-resolution sleep with the specified clock.
   350  
   351     This function is a cancellation point and therefore not marked with
   352     __THROW.  */
   353  extern int clock_nanosleep (clockid_t __clock_id, int __flags,
   354                              const struct timespec *__req,
   355                              struct timespec *__rem);
   356  
   357  /* Return clock ID for CPU-time clock.  */
   358  extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __T
        HROW;
   359  #  endif
   360  
   361  
   362  /* Create new per-process timer using CLOCK_ID.  */
   363  extern int timer_create (clockid_t __clock_id,
   364                           struct sigevent *__restrict __evp,
   365                           timer_t *__restrict __timerid) __THROW;
   366  
   367  /* Delete timer TIMERID.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   368  extern int timer_delete (timer_t __timerid) __THROW;
   369  
   370  /* Set timer TIMERID to VALUE, returning old value in OVALUE.  */
   371  extern int timer_settime (timer_t __timerid, int __flags,
   372                            const struct itimerspec *__restrict __value,
   373                            struct itimerspec *__restrict __ovalue) __THR
        OW;
   374  
   375  /* Get current value of timer TIMERID and store it in VALUE.  */
   376  extern int timer_gettime (timer_t __timerid, struct itimerspec *__value
        )
   377       __THROW;
   378  
   379  /* Get expiration overrun for timer TIMERID.  */
   380  extern int timer_getoverrun (timer_t __timerid) __THROW;
   381  # endif
   382  
   383  
   384  # ifdef __USE_ISOC11
   385  /* Set TS to calendar time based in time base BASE.  */
   386  extern int timespec_get (struct timespec *__ts, int __base)
   387       __THROW __nonnull ((1));
   388  # endif
   389  
   390  
   391  # ifdef __USE_XOPEN_EXTENDED
   392  /* Set to one of the following values to indicate an error.
   393       1  the DATEMSK environment variable is null or undefined,
   394       2  the template file cannot be opened for reading,
   395       3  failed to get file status information,
   396       4  the template file is not a regular file,
   397       5  an error is encountered while reading the template file,
   398       6  memory allication failed (not enough memory available),
   399       7  there is no line in the template that matches the input,
   400       8  invalid input specification Example: February 31 or a time is
   401          specified that can not be represented in a time_t (representing
   402          the time in seconds since 00:00:00 UTC, January 1, 1970) */
   403  extern int getdate_err;
   404  
   405  /* Parse the given string as a date specification and return a value
   406     representing the value.  The templates from the file identified by
   407     the environment variable DATEMSK are used.  In case of an error
   408     `getdate_err' is set.
   409  
   410     This function is a possible cancellation point and therefore not
   411     marked with __THROW.  */
   412  extern struct tm *getdate (const char *__string);
   413  # endif
   414  
   415  # ifdef __USE_GNU
   416  /* Since `getdate' is not reentrant because of the use of `getdate_err'
   417     and the static buffer to return the result in, we provide a thread-s
        afe
   418     variant.  The functionality is the same.  The result is returned in
   419     the buffer pointed to by RESBUFP and in case of an error the return
   420     value is != 0 with the same values as given above for `getdate_err'.
   421  
   422     This function is not part of POSIX and therefore no official
   423     cancellation point.  But due to similarity with an POSIX interface
   424     or due to the implementation it is a cancellation point and
   425     therefore not marked with __THROW.  */
   426  extern int getdate_r (const char *__restrict __string,
   427                        struct tm *__restrict __resbufp);
   428  # endif
   429  
   430  __END_DECLS
   431  
   432  #endif /* <time.h> included.  */
   433  
   434  #endif /* <time.h> not already included.  */
Close file: /usr/include/time.h
   132  #include <time.h>
   133  
   134  #ifdef __USE_XOPEN
   135  # ifndef __useconds_t_defined

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   136  typedef __useconds_t useconds_t;
   137  #  define __useconds_t_defined
   138  # endif
   139  # ifndef __suseconds_t_defined
   140  typedef __suseconds_t suseconds_t;
   141  #  define __suseconds_t_defined
   142  # endif
   143  #endif
   144  
   145  #define __need_size_t
Open file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
     1  /* Copyright (C) 1989-2013 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \
    31      || defined(__need_wint_t)
    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \
    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  
    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.
    47     There's no way to win with the other order!  Sun lossage.  */
    48  
    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif
    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.
   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t
   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif
   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t
   115  #endif
   116  
   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually
   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  
   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #define _PTRDIFF_T
   137  #define _T_PTRDIFF_
   138  #define _T_PTRDIFF
   139  #define __PTRDIFF_T
   140  #define _PTRDIFF_T_
   141  #define _BSD_PTRDIFF_T_
   142  #define ___int_ptrdiff_t_h
   143  #define _GCC_PTRDIFF_T
   144  #ifndef __PTRDIFF_TYPE__
   145  #define __PTRDIFF_TYPE__ long int
   146  #endif
   147  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   148  #endif /* _GCC_PTRDIFF_T */
   149  #endif /* ___int_ptrdiff_t_h */
   150  #endif /* _BSD_PTRDIFF_T_ */
   151  #endif /* _PTRDIFF_T_ */
   152  #endif /* __PTRDIFF_T */
   153  #endif /* _T_PTRDIFF */
   154  #endif /* _T_PTRDIFF_ */
   155  #endif /* _PTRDIFF_T */
   156  
   157  /* If this symbol has done its job, get rid of it.  */
   158  #undef  __need_ptrdiff_t
   159  
   160  #endif /* _STDDEF_H or __need_ptrdiff_t.  */
   161  
   162  /* Unsigned type of `sizeof' something.  */
   163  
   164  /* Define this type if we are doing the whole job,
   165     or if we want this type in particular.  */
   166  #if defined (_STDDEF_H) || defined (__need_size_t)
   167  #ifndef __size_t__      /* BeOS */
   168  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   169  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */
   170  #ifndef _SYS_SIZE_T_H
   171  #ifndef _T_SIZE_
   172  #ifndef _T_SIZE
   173  #ifndef __SIZE_T
   174  #ifndef _SIZE_T_
   175  #ifndef _BSD_SIZE_T_
   176  #ifndef _SIZE_T_DEFINED_
   177  #ifndef _SIZE_T_DEFINED
   178  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   179  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   180  #ifndef ___int_size_t_h
   181  #ifndef _GCC_SIZE_T
   182  #ifndef _SIZET_
   183  #ifndef __size_t
   184  #define __size_t__      /* BeOS */
   185  #define __SIZE_T__      /* Cray Unicos/Mk */
   186  #define _SIZE_T
   187  #define _SYS_SIZE_T_H
   188  #define _T_SIZE_
   189  #define _T_SIZE
   190  #define __SIZE_T
   191  #define _SIZE_T_
   192  #define _BSD_SIZE_T_
   193  #define _SIZE_T_DEFINED_
   194  #define _SIZE_T_DEFINED
   195  #define _BSD_SIZE_T_DEFINED_    /* Darwin */
   196  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   197  #define ___int_size_t_h
   198  #define _GCC_SIZE_T
   199  #define _SIZET_
   200  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   201    || defined(__FreeBSD_kernel__)
   202  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   203  #elif defined (__VMS__)
   204  /* __size_t is also a typedef on VMS.  */
   205  #else

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   206  #define __size_t
   207  #endif
   208  #ifndef __SIZE_TYPE__
   209  #define __SIZE_TYPE__ long unsigned int
   210  #endif
   211  #if !(defined (__GNUG__) && defined (size_t))
   212  typedef __SIZE_TYPE__ size_t;
   213  #ifdef __BEOS__
   214  typedef long ssize_t;
   215  #endif /* __BEOS__ */
   216  #endif /* !(defined (__GNUG__) && defined (size_t)) */
   217  #endif /* __size_t */
   218  #endif /* _SIZET_ */
   219  #endif /* _GCC_SIZE_T */
   220  #endif /* ___int_size_t_h */
   221  #endif /* _SIZE_T_DECLARED */
   222  #endif /* _BSD_SIZE_T_DEFINED_ */
   223  #endif /* _SIZE_T_DEFINED */
   224  #endif /* _SIZE_T_DEFINED_ */
   225  #endif /* _BSD_SIZE_T_ */
   226  #endif /* _SIZE_T_ */
   227  #endif /* __SIZE_T */
   228  #endif /* _T_SIZE */
   229  #endif /* _T_SIZE_ */
   230  #endif /* _SYS_SIZE_T_H */
   231  #endif /* _SIZE_T */
   232  #endif /* __SIZE_T__ */
   233  #endif /* __size_t__ */
   234  #undef  __need_size_t
   235  #endif /* _STDDEF_H or __need_size_t.  */
   236  
   237  
   238  /* Wide character type.
   239     Locale-writers should change this as necessary to
   240     be big enough to hold unique values not between 0 and 127,
   241     and not (wchar_t) -1, for each defined multibyte character.  */
   242  
   243  /* Define this type if we are doing the whole job,
   244     or if we want this type in particular.  */
   245  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   246  #ifndef __wchar_t__     /* BeOS */
   247  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   248  #ifndef _WCHAR_T
   249  #ifndef _T_WCHAR_
   250  #ifndef _T_WCHAR
   251  #ifndef __WCHAR_T
   252  #ifndef _WCHAR_T_
   253  #ifndef _BSD_WCHAR_T_
   254  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
   255  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   256  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   257  #ifndef _WCHAR_T_DEFINED_
   258  #ifndef _WCHAR_T_DEFINED
   259  #ifndef _WCHAR_T_H
   260  #ifndef ___int_wchar_t_h
   261  #ifndef __INT_WCHAR_T_H
   262  #ifndef _GCC_WCHAR_T
   263  #define __wchar_t__     /* BeOS */
   264  #define __WCHAR_T__     /* Cray Unicos/Mk */
   265  #define _WCHAR_T
   266  #define _T_WCHAR_
   267  #define _T_WCHAR
   268  #define __WCHAR_T
   269  #define _WCHAR_T_
   270  #define _BSD_WCHAR_T_
   271  #define _WCHAR_T_DEFINED_
   272  #define _WCHAR_T_DEFINED
   273  #define _WCHAR_T_H
   274  #define ___int_wchar_t_h
   275  #define __INT_WCHAR_T_H
   276  #define _GCC_WCHAR_T
   277  #define _WCHAR_T_DECLARED
   278  
   279  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   280     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   281     symbols in the _FOO_T_ family, stays defined even after its
   282     corresponding type is defined).  If we define wchar_t, then we
   283     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   284     we undef _WCHAR_T_, then we must also define rune_t, since 
   285     headers like runetype.h assume that if machine/ansi.h is included,
   286     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   287     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   288     the same type." */
   289  #ifdef _BSD_WCHAR_T_
   290  #undef _BSD_WCHAR_T_
   291  #ifdef _BSD_RUNE_T_
   292  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   293  typedef _BSD_RUNE_T_ rune_t;
   294  #define _BSD_WCHAR_T_DEFINED_
   295  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   296  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   297  /* Why is this file so hard to maintain properly?  In contrast to
   298     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   299     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   300     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   301  #undef _BSD_RUNE_T_
   302  #endif
   303  #endif
   304  #endif
   305  #endif
   306  /* FreeBSD 5 can't be handled well using "traditional" logic above
   307     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   308     rune_t in some cases... */
   309  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   310  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   311  #if __BSD_VISIBLE
   312  #ifndef _RUNE_T_DECLARED
   313  typedef __rune_t        rune_t;
   314  #define _RUNE_T_DECLARED
   315  #endif
   316  #endif
   317  #endif
   318  #endif
   319  
   320  #ifndef __WCHAR_TYPE__
   321  #define __WCHAR_TYPE__ int
   322  #endif
   323  #ifndef __cplusplus
   324  typedef __WCHAR_TYPE__ wchar_t;
   325  #endif
   326  #endif
   327  #endif
   328  #endif
   329  #endif
   330  #endif
   331  #endif
   332  #endif /* _WCHAR_T_DECLARED */
   333  #endif /* _BSD_RUNE_T_DEFINED_ */
   334  #endif
   335  #endif
   336  #endif
   337  #endif
   338  #endif
   339  #endif
   340  #endif
   341  #endif /* __WCHAR_T__ */
   342  #endif /* __wchar_t__ */
   343  #undef  __need_wchar_t
   344  #endif /* _STDDEF_H or __need_wchar_t.  */
   345  
   346  #if defined (__need_wint_t)
   347  #ifndef _WINT_T
   348  #define _WINT_T
   349  
   350  #ifndef __WINT_TYPE__
   351  #define __WINT_TYPE__ unsigned int
   352  #endif
   353  typedef __WINT_TYPE__ wint_t;
   354  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   355  #undef __need_wint_t
   356  #endif
   357  
   358  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   359      are already defined.  */
   360  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */
   361  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   362  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)
   363  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   364      are probably typos and should be removed before 2.8 is released.  *
        /
   365  #ifdef _GCC_PTRDIFF_T_
   366  #undef _PTRDIFF_T_
   367  #undef _BSD_PTRDIFF_T_
   368  #endif
   369  #ifdef _GCC_SIZE_T_
   370  #undef _SIZE_T_
   371  #undef _BSD_SIZE_T_
   372  #endif
   373  #ifdef _GCC_WCHAR_T_
   374  #undef _WCHAR_T_
   375  #undef _BSD_WCHAR_T_
   376  #endif
   377  /*  The following ones are the real ones.  */
   378  #ifdef _GCC_PTRDIFF_T
   379  #undef _PTRDIFF_T_
   380  #undef _BSD_PTRDIFF_T_
   381  #endif
   382  #ifdef _GCC_SIZE_T
   383  #undef _SIZE_T_
   384  #undef _BSD_SIZE_T_
   385  #endif
   386  #ifdef _GCC_WCHAR_T
   387  #undef _WCHAR_T_
   388  #undef _BSD_WCHAR_T_
   389  #endif
   390  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */
   391  
   392  #endif /* __sys_stdtypes_h */
   393  
   394  /* A null pointer constant.  */
   395  
   396  #if defined (_STDDEF_H) || defined (__need_NULL)
   397  #undef NULL             /* in case <stdio.h> has defined it. */
   398  #ifdef __GNUG__
   399  #define NULL __null
   400  #else   /* G++ */
   401  #ifndef __cplusplus
   402  #define NULL ((void *)0)
   403  #else   /* C++ */
   404  #define NULL 0
   405  #endif  /* C++ */
   406  #endif  /* G++ */
   407  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   408  #undef  __need_NULL
   409  
   410  #ifdef _STDDEF_H
   411  
   412  /* Offset of member MEMBER in a struct of type TYPE. */
   413  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   414  
   415  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   416    || (defined(__cplusplus) && __cplusplus >= 201103L)
   417  #ifndef _GCC_MAX_ALIGN_T
   418  #define _GCC_MAX_ALIGN_T
   419  /* Type whose alignment is supported in every context and is at least
   420     as great as that of any standard type not using alignment
   421     specifiers.  */
   422  typedef struct {
   423    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   424    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   425  } max_align_t;
   426  #endif
   427  #endif /* C11 or C++11.  */
   428  
   429  #if defined(__cplusplus) && __cplusplus >= 201103L
   430  #ifndef _GXX_NULLPTR_T
   431  #define _GXX_NULLPTR_T
   432    typedef decltype(nullptr) nullptr_t;
   433  #endif
   434  #endif /* C++11.  */
   435  
   436  #endif /* _STDDEF_H was defined this time */
   437  
   438  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
   439            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
   146  #include <stddef.h>
   147  
   148  #ifdef __USE_MISC
   149  /* Old compatibility names for C types.  */
   150  typedef unsigned long int ulong;
   151  typedef unsigned short int ushort;
   152  typedef unsigned int uint;
   153  #endif
   154  
   155  /* These size-specific names are used by some of the inet code.  */
   156  
   157  #if !__GNUC_PREREQ (2, 7)
   158  
   159  /* These types are defined by the ISO C99 header <inttypes.h>. */
   160  # ifndef __int8_t_defined
   161  #  define __int8_t_defined
   162  typedef char int8_t;
   163  typedef short int int16_t;
   164  typedef int int32_t;
   165  #  if __WORDSIZE == 64
   166  typedef long int int64_t;
   167  #  elif __GLIBC_HAVE_LONG_LONG
   168  __extension__ typedef long long int int64_t;
   169  #  endif
   170  # endif
   171  
   172  /* But these were defined by ISO C without the first `_'.  */
   173  typedef unsigned char u_int8_t;
   174  typedef unsigned short int u_int16_t;
   175  typedef unsigned int u_int32_t;
   176  # if __WORDSIZE == 64
   177  typedef unsigned long int u_int64_t;
   178  # elif __GLIBC_HAVE_LONG_LONG
   179  __extension__ typedef unsigned long long int u_int64_t;
   180  # endif
   181  
   182  typedef int register_t;
   183  
   184  #else
   185  
   186  /* For GCC 2.7 and later, we can use specific type-size attributes.  */
   187  # define __intN_t(N, MODE) \
   188    typedef int int##N##_t __attribute__ ((__mode__ (MODE)))
   189  # define __u_intN_t(N, MODE) \
   190    typedef unsigned int u_int##N##_t __attribute__ ((__mode__ (MODE)))
   191  
   192  # ifndef __int8_t_defined
   193  #  define __int8_t_defined
   194  __intN_t (8, __QI__);
   195  __intN_t (16, __HI__);
   196  __intN_t (32, __SI__);
   197  __intN_t (64, __DI__);
   198  # endif
   199  
   200  __u_intN_t (8, __QI__);
   201  __u_intN_t (16, __HI__);
   202  __u_intN_t (32, __SI__);

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   203  __u_intN_t (64, __DI__);
   204  
   205  typedef int register_t __attribute__ ((__mode__ (__word__)));
   206  
   207  
   208  /* Some code from BIND tests this macro to see if the types above are
   209     defined.  */
   210  #endif
   211  #define __BIT_TYPES_DEFINED__   1
   212  
   213  
   214  #ifdef  __USE_BSD
   215  /* In BSD <sys/types.h> is expected to define BYTE_ORDER.  */
Open file: /usr/include/endian.h
     1  /* Copyright (C) 1992-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _ENDIAN_H
    19  #define _ENDIAN_H       1
    20  
    21  #include <features.h>
    22  
    23  /* Definitions for byte order, according to significance of bytes,
    24     from low addresses to high addresses.  The value is what you get by
    25     putting '4' in the most significant byte, '3' in the second most
    26     significant byte, '2' in the second least significant byte, and '1'
    27     in the least significant byte, and then writing down one digit for
    28     each byte, starting with the byte at the lowest address at the left,
    29     and proceeding to the byte with the highest address at the right.  *
        /
    30  
    31  #define __LITTLE_ENDIAN 1234
    32  #define __BIG_ENDIAN    4321
    33  #define __PDP_ENDIAN    3412
    34  
    35  /* This file defines `__BYTE_ORDER' for the particular machine.  */
    36  #include <bits/endian.h>
    37  
    38  /* Some machines may need to use a different endianness for floating po
        int
    39     values.  */
    40  #ifndef __FLOAT_WORD_ORDER
    41  # define __FLOAT_WORD_ORDER __BYTE_ORDER
    42  #endif
    43  
    44  #ifdef  __USE_BSD
    45  # define LITTLE_ENDIAN  __LITTLE_ENDIAN
    46  # define BIG_ENDIAN     __BIG_ENDIAN
    47  # define PDP_ENDIAN     __PDP_ENDIAN
    48  # define BYTE_ORDER     __BYTE_ORDER
    49  #endif
    50  
    51  #if __BYTE_ORDER == __LITTLE_ENDIAN
    52  # define __LONG_LONG_PAIR(HI, LO) LO, HI
    53  #elif __BYTE_ORDER == __BIG_ENDIAN
    54  # define __LONG_LONG_PAIR(HI, LO) HI, LO
    55  #endif
    56  
    57  
    58  #if defined __USE_BSD && !defined __ASSEMBLER__
    59  /* Conversion interfaces.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    60  # include <bits/byteswap.h>
    61  
    62  # if __BYTE_ORDER == __LITTLE_ENDIAN
    63  #  define htobe16(x) __bswap_16 (x)
    64  #  define htole16(x) (x)
    65  #  define be16toh(x) __bswap_16 (x)
    66  #  define le16toh(x) (x)
    67  
    68  #  define htobe32(x) __bswap_32 (x)
    69  #  define htole32(x) (x)
    70  #  define be32toh(x) __bswap_32 (x)
    71  #  define le32toh(x) (x)
    72  
    73  #  if __GLIBC_HAVE_LONG_LONG
    74  #   define htobe64(x) __bswap_64 (x)
    75  #   define htole64(x) (x)
    76  #   define be64toh(x) __bswap_64 (x)
    77  #   define le64toh(x) (x)
    78  #  endif
    79  
    80  # else
    81  #  define htobe16(x) (x)
    82  #  define htole16(x) __bswap_16 (x)
    83  #  define be16toh(x) (x)
    84  #  define le16toh(x) __bswap_16 (x)
    85  
    86  #  define htobe32(x) (x)
    87  #  define htole32(x) __bswap_32 (x)
    88  #  define be32toh(x) (x)
    89  #  define le32toh(x) __bswap_32 (x)
    90  
    91  #  if __GLIBC_HAVE_LONG_LONG
    92  #   define htobe64(x) (x)
    93  #   define htole64(x) __bswap_64 (x)
    94  #   define be64toh(x) (x)
    95  #   define le64toh(x) __bswap_64 (x)
    96  #  endif
    97  # endif
    98  #endif
    99  
   100  #endif  /* endian.h */
Close file: /usr/include/endian.h
   216  # include <endian.h>
   217  
   218  /* It also defines `fd_set' and the FD_* macros for `select'.  */
Open file: /usr/include/sys/select.h
     1  /* `fd_set' type and related macros, and `select'/`pselect' declaration
        s.
     2     Copyright (C) 1996-2003, 2009, 2011 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*      POSIX 1003.1g: 6.2 Select from File Descriptor Sets <sys/select
        .h>  */
    20  
    21  #ifndef _SYS_SELECT_H
    22  #define _SYS_SELECT_H   1
    23  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.
    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__
   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */
   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif
   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2
   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  
   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    24  #include <features.h>
    25  
    26  /* Get definition of needed basic types.  */
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;
    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];
    65  } __u_quad_t;
    66  #endif
    67  
    68  
    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    70     macros for each of the OS types we define below.  The definitions
    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long
    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.
    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    87     these types, where using the appropriate l or ll format modifiers ca
        n
    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t
   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int
   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else
   128  # error
   129  #endif
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   131  
   132  
   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;
   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  
   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   187  
   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */
   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   191  typedef __quad_t *__qaddr_t;
   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE
   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    27  #include <bits/types.h>
    28  
    29  /* Get __FD_* definitions.  */
Open file: /usr/include/bits/select.h
     1  /* Copyright (C) 1997-1999,2001,2008,2009,2011 Free Software Foundation
        , Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _SYS_SELECT_H
    19  # error "Never use <bits/select.h> directly; include <sys/select.h> ins
        tead."
    20  #endif
    21  
Open file: /usr/include/bits/wordsize.h
     1  /* Determine the wordsize from the preprocessor defines.  */
     2  
     3  #if defined __x86_64__ && !defined __ILP32__
     4  # define __WORDSIZE     64
     5  #else
     6  # define __WORDSIZE     32
     7  #endif
     8  
     9  #ifdef __x86_64__
    10  # define __WORDSIZE_TIME64_COMPAT32     1
    11  /* Both x86-64 and x32 use the 64-bit system call interface.  */
    12  # define __SYSCALL_WORDSIZE             64
    13  #endif
Close file: /usr/include/bits/wordsize.h
    22  #include <bits/wordsize.h>
    23  
    24  
    25  #if defined __GNUC__ && __GNUC__ >= 2
    26  
    27  # if __WORDSIZE == 64
    28  #  define __FD_ZERO_STOS "stosq"
    29  # else
    30  #  define __FD_ZERO_STOS "stosl"
    31  # endif
    32  
    33  # define __FD_ZERO(fdsp) \
    34    do {                                                                  
              \
    35      int __d0, __d1;                                                     
              \
    36      __asm__ __volatile__ ("cld; rep; " __FD_ZERO_STOS                   
              \
    37                            : "=c" (__d0), "=D" (__d1)                    
              \
    38                            : "a" (0), "0" (sizeof (fd_set)               
              \
    39                                            / sizeof (__fd_mask)),        
              \
    40                              "1" (&__FDS_BITS (fdsp)[0])                 
              \
    41                            : "memory");                                  
              \
    42    } while (0)
    43  
    44  #else   /* ! GNU CC */
    45  
    46  /* We don't use `memset' because this would require a prototype and
    47     the array isn't too big.  */
    48  # define __FD_ZERO(set)  \
    49    do {                                                                  
              \
    50      unsigned int __i;                                                   
              \
    51      fd_set *__arr = (set);                                              
              \
    52      for (__i = 0; __i < sizeof (fd_set) / sizeof (__fd_mask); ++__i)    
              \
    53        __FDS_BITS (__arr)[__i] = 0;                                      
              \
    54    } while (0)
    55  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    56  #endif  /* GNU CC */
    57  
    58  #define __FD_SET(d, set) \
    59    ((void) (__FDS_BITS (set)[__FD_ELT (d)] |= __FD_MASK (d)))
    60  #define __FD_CLR(d, set) \
    61    ((void) (__FDS_BITS (set)[__FD_ELT (d)] &= ~__FD_MASK (d)))
    62  #define __FD_ISSET(d, set) \
    63    ((__FDS_BITS (set)[__FD_ELT (d)] & __FD_MASK (d)) != 0)
Close file: /usr/include/bits/select.h
    30  #include <bits/select.h>
    31  
    32  /* Get __sigset_t.  */
Open file: /usr/include/bits/sigset.h
     1  /* __sig_atomic_t, __sigset_t, and related definitions.  Linux version.
     2     Copyright (C) 1991, 1992, 1994, 1996, 1997, 2007, 2012
     3     Free Software Foundation, Inc.
     4     This file is part of the GNU C Library.
     5  
     6     The GNU C Library is free software; you can redistribute it and/or
     7     modify it under the terms of the GNU Lesser General Public
     8     License as published by the Free Software Foundation; either
     9     version 2.1 of the License, or (at your option) any later version.
    10  
    11     The GNU C Library is distributed in the hope that it will be useful,
    12     but WITHOUT ANY WARRANTY; without even the implied warranty of
    13     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    14     Lesser General Public License for more details.
    15  
    16     You should have received a copy of the GNU Lesser General Public
    17     License along with the GNU C Library; if not, see
    18     <http://www.gnu.org/licenses/>.  */
    19  
    20  #ifndef _SIGSET_H_types
    21  # define _SIGSET_H_types        1
    22  
    23  typedef int __sig_atomic_t;
    24  
    25  /* A `sigset_t' has a bit for each signal.  */
    26  
    27  # define _SIGSET_NWORDS (1024 / (8 * sizeof (unsigned long int)))
    28  typedef struct
    29    {
    30      unsigned long int __val[_SIGSET_NWORDS];
    31    } __sigset_t;
    32  
    33  #endif
    34  
    35  
    36  /* We only want to define these functions if <signal.h> was actually
    37     included; otherwise we were included just to define the types.  Sinc
        e we
    38     are namespace-clean, it wouldn't hurt to define extra macros.  But
    39     trouble can be caused by functions being defined (e.g., any global
    40     register vars declared later will cause compilation errors).  */
    41  
    42  #if !defined _SIGSET_H_fns && defined _SIGNAL_H
    43  # define _SIGSET_H_fns 1
    44  
    45  # ifndef _EXTERN_INLINE
    46  #  define _EXTERN_INLINE __extern_inline
    47  # endif
    48  
    49  /* Return a mask that includes the bit for SIG only.  */
    50  # define __sigmask(sig) \
    51    (((unsigned long int) 1) << (((sig) - 1) % (8 * sizeof (unsigned long
         int))))
    52  
    53  /* Return the word index for SIG.  */
    54  # define __sigword(sig) (((sig) - 1) / (8 * sizeof (unsigned long int))
        )
    55  
    56  # if defined __GNUC__ && __GNUC__ >= 2
    57  #  define __sigemptyset(set) \
    58    (__extension__ ({ int __cnt = _SIGSET_NWORDS;                         
              \

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    59                      sigset_t *__set = (set);                            
              \
    60                      while (--__cnt >= 0) __set->__val[__cnt] = 0;       
              \
    61                      0; }))
    62  #  define __sigfillset(set) \
    63    (__extension__ ({ int __cnt = _SIGSET_NWORDS;                         
              \
    64                      sigset_t *__set = (set);                            
              \
    65                      while (--__cnt >= 0) __set->__val[__cnt] = ~0UL;    
              \
    66                      0; }))
    67  
    68  #  ifdef __USE_GNU
    69  /* The POSIX does not specify for handling the whole signal set in one
    70     command.  This is often wanted and so we define three more functions
    71     here.  */
    72  #   define __sigisemptyset(set) \
    73    (__extension__ ({ int __cnt = _SIGSET_NWORDS;                         
              \
    74                      const sigset_t *__set = (set);                      
              \
    75                      int __ret = __set->__val[--__cnt];                  
              \
    76                      while (!__ret && --__cnt >= 0)                      
              \
    77                          __ret = __set->__val[__cnt];                    
              \
    78                      __ret == 0; }))
    79  #   define __sigandset(dest, left, right) \
    80    (__extension__ ({ int __cnt = _SIGSET_NWORDS;                         
              \
    81                      sigset_t *__dest = (dest);                          
              \
    82                      const sigset_t *__left = (left);                    
              \
    83                      const sigset_t *__right = (right);                  
              \
    84                      while (--__cnt >= 0)                                
              \
    85                        __dest->__val[__cnt] = (__left->__val[__cnt]      
              \
    86                                                & __right->__val[__cnt]);
                      \
    87                      0; }))
    88  #   define __sigorset(dest, left, right) \
    89    (__extension__ ({ int __cnt = _SIGSET_NWORDS;                         
              \
    90                      sigset_t *__dest = (dest);                          
              \
    91                      const sigset_t *__left = (left);                    
              \
    92                      const sigset_t *__right = (right);                  
              \
    93                      while (--__cnt >= 0)                                
              \
    94                        __dest->__val[__cnt] = (__left->__val[__cnt]      
              \
    95                                                | __right->__val[__cnt]);
                      \
    96                      0; }))
    97  #  endif
    98  # endif
    99  
   100  /* These functions needn't check for a bogus signal number -- error
   101     checking is done in the non __ versions.  */
   102  
   103  extern int __sigismember (const __sigset_t *, int);
   104  extern int __sigaddset (__sigset_t *, int);
   105  extern int __sigdelset (__sigset_t *, int);
   106  
   107  # ifdef __USE_EXTERN_INLINES
   108  #  define __SIGSETFN(NAME, BODY, CONST)                                 
              \

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   109    _EXTERN_INLINE int                                                    
              \
   110    NAME (CONST __sigset_t *__set, int __sig)                             
              \
   111    {                                                                     
              \
   112      unsigned long int __mask = __sigmask (__sig);                       
              \
   113      unsigned long int __word = __sigword (__sig);                       
              \
   114      return BODY;                                                        
              \
   115    }
   116  
   117  __SIGSETFN (__sigismember, (__set->__val[__word] & __mask) ? 1 : 0, con
        st)
   118  __SIGSETFN (__sigaddset, ((__set->__val[__word] |= __mask), 0), )
   119  __SIGSETFN (__sigdelset, ((__set->__val[__word] &= ~__mask), 0), )
   120  
   121  #  undef __SIGSETFN
   122  # endif
   123  
   124  
   125  #endif /* ! _SIGSET_H_fns.  */
Close file: /usr/include/bits/sigset.h
    33  #include <bits/sigset.h>
    34  
    35  #ifndef __sigset_t_defined
    36  # define __sigset_t_defined
    37  typedef __sigset_t sigset_t;
    38  #endif
    39  
    40  /* Get definition of timer specification structures.  */
    41  #define __need_time_t
    42  #define __need_timespec
Open file: /usr/include/time.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      ISO C99 Standard: 7.23 Date and time    <time.h>
    20   */
    21  
    22  #ifndef _TIME_H
    23  
    24  #if (! defined __need_time_t && !defined __need_clock_t && \
    25       ! defined __need_timespec)
    26  # define _TIME_H        1
    27  # include <features.h>
    28  
    29  __BEGIN_DECLS
    30  
    31  #endif
    32  
    33  #ifdef  _TIME_H
    34  /* Get size_t and NULL from <stddef.h>.  */
    35  # define __need_size_t
    36  # define __need_NULL
    37  # include <stddef.h>
    38  
    39  /* This defines CLOCKS_PER_SEC, which is the number of processor clock

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    40     ticks per second.  */
    41  # include <bits/time.h>
    42  
    43  /* This is the obsolete POSIX.1-1988 name for the same constant.  */
    44  # if !defined __STRICT_ANSI__ && !defined __USE_XOPEN2K
    45  #  ifndef CLK_TCK
    46  #   define CLK_TCK      CLOCKS_PER_SEC
    47  #  endif
    48  # endif
    49  
    50  #endif /* <time.h> included.  */
    51  
    52  #if !defined __clock_t_defined && (defined _TIME_H || defined __need_cl
        ock_t)
    53  # define __clock_t_defined      1
    54  
    55  # include <bits/types.h>
    56  
    57  __BEGIN_NAMESPACE_STD
    58  /* Returned by `clock'.  */
    59  typedef __clock_t clock_t;
    60  __END_NAMESPACE_STD
    61  #if defined __USE_XOPEN || defined __USE_POSIX || defined __USE_MISC
    62  __USING_NAMESPACE_STD(clock_t)
    63  #endif
    64  
    65  #endif /* clock_t not defined and <time.h> or need clock_t.  */
    66  #undef  __need_clock_t
    67  
    68  #if !defined __time_t_defined && (defined _TIME_H || defined __need_tim
        e_t)
    69  # define __time_t_defined       1
    70  
    71  # include <bits/types.h>
    72  
    73  __BEGIN_NAMESPACE_STD
    74  /* Returned by `time'.  */
    75  typedef __time_t time_t;
    76  __END_NAMESPACE_STD
    77  #if defined __USE_POSIX || defined __USE_MISC || defined __USE_SVID
    78  __USING_NAMESPACE_STD(time_t)
    79  #endif
    80  
    81  #endif /* time_t not defined and <time.h> or need time_t.  */
    82  #undef  __need_time_t
    83  
    84  #if !defined __clockid_t_defined && \
    85     ((defined _TIME_H && defined __USE_POSIX199309) || defined __need_cl
        ockid_t)
    86  # define __clockid_t_defined    1
    87  
    88  # include <bits/types.h>
    89  
    90  /* Clock ID used in clock and timer functions.  */
    91  typedef __clockid_t clockid_t;
    92  
    93  #endif /* clockid_t not defined and <time.h> or need clockid_t.  */
    94  #undef  __clockid_time_t
    95  
    96  #if !defined __timer_t_defined && \
    97      ((defined _TIME_H && defined __USE_POSIX199309) || defined __need_t
        imer_t)
    98  # define __timer_t_defined      1
    99  
   100  # include <bits/types.h>
   101  
   102  /* Timer ID returned by `timer_create'.  */
   103  typedef __timer_t timer_t;
   104  
   105  #endif /* timer_t not defined and <time.h> or need timer_t.  */
   106  #undef  __need_timer_t
   107  
   108  
   109  #if (!defined __timespec_defined                                        
        \

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   110       && ((defined _TIME_H                                               
        \
   111            && (defined __USE_POSIX199309 || defined __USE_MISC           
        \
   112                || defined __USE_ISOC11))                                 
        \
   113           || defined __need_timespec))
   114  # define __timespec_defined     1
   115  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;
    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    65  } __u_quad_t;
    66  #endif
    67  
    68  
    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    70     macros for each of the OS types we define below.  The definitions
    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long
    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.
    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    87     these types, where using the appropriate l or ll format modifiers ca
        n
    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,
    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t
   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int
   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   128  # error
   129  #endif
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   131  
   132  
   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;
   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  
   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   187  
   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */
   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   191  typedef __quad_t *__qaddr_t;
   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE
   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
   116  # include <bits/types.h>        /* This defines __time_t for us.  */
   117  
   118  /* POSIX.1b structure for a time value.  This is like a `struct timeval
        ' but
   119     has nanoseconds instead of microseconds.  */
   120  struct timespec
   121    {
   122      __time_t tv_sec;            /* Seconds.  */
   123      __syscall_slong_t tv_nsec;  /* Nanoseconds.  */
   124    };
   125  
   126  #endif /* timespec not defined and <time.h> or need timespec.  */
   127  #undef  __need_timespec
   128  
   129  
   130  #ifdef  _TIME_H
   131  __BEGIN_NAMESPACE_STD
   132  /* Used by other time functions.  */
   133  struct tm
   134  {
   135    int tm_sec;                   /* Seconds.     [0-60] (1 leap second) 
        */
   136    int tm_min;                   /* Minutes.     [0-59] */
   137    int tm_hour;                  /* Hours.       [0-23] */
   138    int tm_mday;                  /* Day.         [1-31] */
   139    int tm_mon;                   /* Month.       [0-11] */
   140    int tm_year;                  /* Year - 1900.  */
   141    int tm_wday;                  /* Day of week. [0-6] */
   142    int tm_yday;                  /* Days in year.[0-365] */
   143    int tm_isdst;                 /* DST.         [-1/0/1]*/
   144  
   145  # ifdef __USE_BSD
   146    long int tm_gmtoff;           /* Seconds east of UTC.  */
   147    const char *tm_zone;          /* Timezone abbreviation.  */
   148  # else
   149    long int __tm_gmtoff;         /* Seconds east of UTC.  */
   150    const char *__tm_zone;        /* Timezone abbreviation.  */
   151  # endif
   152  };
   153  __END_NAMESPACE_STD
   154  #if defined __USE_XOPEN || defined __USE_POSIX || defined __USE_MISC
   155  __USING_NAMESPACE_STD(tm)
   156  #endif
   157  
   158  
   159  # ifdef __USE_POSIX199309
   160  /* POSIX.1b structure for timer start values and intervals.  */
   161  struct itimerspec
   162    {
   163      struct timespec it_interval;
   164      struct timespec it_value;
   165    };
   166  
   167  /* We can use a simple forward declaration.  */
   168  struct sigevent;
   169  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   170  # endif /* POSIX.1b */
   171  
   172  # ifdef __USE_XOPEN2K
   173  #  ifndef __pid_t_defined
   174  typedef __pid_t pid_t;
   175  #   define __pid_t_defined
   176  #  endif
   177  # endif
   178  
   179  
   180  # ifdef __USE_ISOC11
   181  /* Time base values for timespec_get.  */
   182  # define TIME_UTC 1
   183  # endif
   184  
   185  
   186  __BEGIN_NAMESPACE_STD
   187  /* Time used by the program so far (user time + system time).
   188     The result / CLOCKS_PER_SECOND is program time in seconds.  */
   189  extern clock_t clock (void) __THROW;
   190  
   191  /* Return the current time and put it in *TIMER if TIMER is not NULL.  
        */
   192  extern time_t time (time_t *__timer) __THROW;
   193  
   194  /* Return the difference between TIME1 and TIME0.  */
   195  extern double difftime (time_t __time1, time_t __time0)
   196       __THROW __attribute__ ((__const__));
   197  
   198  /* Return the `time_t' representation of TP and normalize TP.  */
   199  extern time_t mktime (struct tm *__tp) __THROW;
   200  
   201  
   202  /* Format TP into S according to FORMAT.
   203     Write no more than MAXSIZE characters and return the number
   204     of characters written, or 0 if it would exceed MAXSIZE.  */
   205  extern size_t strftime (char *__restrict __s, size_t __maxsize,
   206                          const char *__restrict __format,
   207                          const struct tm *__restrict __tp) __THROW;
   208  __END_NAMESPACE_STD
   209  
   210  # ifdef __USE_XOPEN
   211  /* Parse S according to FORMAT and store binary time information in TP.
   212     The return value is a pointer to the first unparsed character in S. 
         */
   213  extern char *strptime (const char *__restrict __s,
   214                         const char *__restrict __fmt, struct tm *__tp)
   215       __THROW;
   216  # endif
   217  
   218  # ifdef __USE_XOPEN2K8
   219  /* Similar to the two functions above but take the information from
   220     the provided locale and not the global locale.  */
   221  # include <xlocale.h>
   222  
   223  extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
   224                            const char *__restrict __format,
   225                            const struct tm *__restrict __tp,
   226                            __locale_t __loc) __THROW;
   227  # endif
   228  
   229  # ifdef __USE_GNU
   230  extern char *strptime_l (const char *__restrict __s,
   231                           const char *__restrict __fmt, struct tm *__tp,
   232                           __locale_t __loc) __THROW;
   233  # endif
   234  
   235  
   236  __BEGIN_NAMESPACE_STD
   237  /* Return the `struct tm' representation of *TIMER
   238     in Universal Coordinated Time (aka Greenwich Mean Time).  */
   239  extern struct tm *gmtime (const time_t *__timer) __THROW;
   240  
   241  /* Return the `struct tm' representation
   242     of *TIMER in the local timezone.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   243  extern struct tm *localtime (const time_t *__timer) __THROW;
   244  __END_NAMESPACE_STD
   245  
   246  # if defined __USE_POSIX || defined __USE_MISC
   247  /* Return the `struct tm' representation of *TIMER in UTC,
   248     using *TP to store the result.  */
   249  extern struct tm *gmtime_r (const time_t *__restrict __timer,
   250                              struct tm *__restrict __tp) __THROW;
   251  
   252  /* Return the `struct tm' representation of *TIMER in local time,
   253     using *TP to store the result.  */
   254  extern struct tm *localtime_r (const time_t *__restrict __timer,
   255                                 struct tm *__restrict __tp) __THROW;
   256  # endif /* POSIX or misc */
   257  
   258  __BEGIN_NAMESPACE_STD
   259  /* Return a string of the form "Day Mon dd hh:mm:ss yyyy\n"
   260     that is the representation of TP in this format.  */
   261  extern char *asctime (const struct tm *__tp) __THROW;
   262  
   263  /* Equivalent to `asctime (localtime (timer))'.  */
   264  extern char *ctime (const time_t *__timer) __THROW;
   265  __END_NAMESPACE_STD
   266  
   267  # if defined __USE_POSIX || defined __USE_MISC
   268  /* Reentrant versions of the above functions.  */
   269  
   270  /* Return in BUF a string of the form "Day Mon dd hh:mm:ss yyyy\n"
   271     that is the representation of TP in this format.  */
   272  extern char *asctime_r (const struct tm *__restrict __tp,
   273                          char *__restrict __buf) __THROW;
   274  
   275  /* Equivalent to `asctime_r (localtime_r (timer, *TMP*), buf)'.  */
   276  extern char *ctime_r (const time_t *__restrict __timer,
   277                        char *__restrict __buf) __THROW;
   278  # endif /* POSIX or misc */
   279  
   280  
   281  /* Defined in localtime.c.  */
   282  extern char *__tzname[2];       /* Current timezone names.  */
   283  extern int __daylight;          /* If daylight-saving time is ever in u
        se.  */
   284  extern long int __timezone;     /* Seconds west of UTC.  */
   285  
   286  
   287  # ifdef __USE_POSIX
   288  /* Same as above.  */
   289  extern char *tzname[2];
   290  
   291  /* Set time conversion information from the TZ environment variable.
   292     If TZ is not defined, a locale-dependent default is used.  */
   293  extern void tzset (void) __THROW;
   294  # endif
   295  
   296  # if defined __USE_SVID || defined __USE_XOPEN
   297  extern int daylight;
   298  extern long int timezone;
   299  # endif
   300  
   301  # ifdef __USE_SVID
   302  /* Set the system time to *WHEN.
   303     This call is restricted to the superuser.  */
   304  extern int stime (const time_t *__when) __THROW;
   305  # endif
   306  
   307  
   308  /* Nonzero if YEAR is a leap year (every 4 years,
   309     except every 100th isn't, and every 400th is).  */
   310  # define __isleap(year) \
   311    ((year) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))
   312  
   313  
   314  # ifdef __USE_MISC
   315  /* Miscellaneous functions many Unices inherited from the public domain
   316     localtime package.  These are included only for compatibility.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   317  
   318  /* Like `mktime', but for TP represents Universal Time, not local time.
          */
   319  extern time_t timegm (struct tm *__tp) __THROW;
   320  
   321  /* Another name for `mktime'.  */
   322  extern time_t timelocal (struct tm *__tp) __THROW;
   323  
   324  /* Return the number of days in YEAR.  */
   325  extern int dysize (int __year) __THROW  __attribute__ ((__const__));
   326  # endif
   327  
   328  
   329  # ifdef __USE_POSIX199309
   330  /* Pause execution for a number of nanoseconds.
   331  
   332     This function is a cancellation point and therefore not marked with
   333     __THROW.  */
   334  extern int nanosleep (const struct timespec *__requested_time,
   335                        struct timespec *__remaining);
   336  
   337  
   338  /* Get resolution of clock CLOCK_ID.  */
   339  extern int clock_getres (clockid_t __clock_id, struct timespec *__res) 
        __THROW;
   340  
   341  /* Get current value of clock CLOCK_ID and store it in TP.  */
   342  extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) 
        __THROW;
   343  
   344  /* Set clock CLOCK_ID to value TP.  */
   345  extern int clock_settime (clockid_t __clock_id, const struct timespec *
        __tp)
   346       __THROW;
   347  
   348  #  ifdef __USE_XOPEN2K
   349  /* High-resolution sleep with the specified clock.
   350  
   351     This function is a cancellation point and therefore not marked with
   352     __THROW.  */
   353  extern int clock_nanosleep (clockid_t __clock_id, int __flags,
   354                              const struct timespec *__req,
   355                              struct timespec *__rem);
   356  
   357  /* Return clock ID for CPU-time clock.  */
   358  extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __T
        HROW;
   359  #  endif
   360  
   361  
   362  /* Create new per-process timer using CLOCK_ID.  */
   363  extern int timer_create (clockid_t __clock_id,
   364                           struct sigevent *__restrict __evp,
   365                           timer_t *__restrict __timerid) __THROW;
   366  
   367  /* Delete timer TIMERID.  */
   368  extern int timer_delete (timer_t __timerid) __THROW;
   369  
   370  /* Set timer TIMERID to VALUE, returning old value in OVALUE.  */
   371  extern int timer_settime (timer_t __timerid, int __flags,
   372                            const struct itimerspec *__restrict __value,
   373                            struct itimerspec *__restrict __ovalue) __THR
        OW;
   374  
   375  /* Get current value of timer TIMERID and store it in VALUE.  */
   376  extern int timer_gettime (timer_t __timerid, struct itimerspec *__value
        )
   377       __THROW;
   378  
   379  /* Get expiration overrun for timer TIMERID.  */
   380  extern int timer_getoverrun (timer_t __timerid) __THROW;
   381  # endif
   382  
   383  
   384  # ifdef __USE_ISOC11

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   385  /* Set TS to calendar time based in time base BASE.  */
   386  extern int timespec_get (struct timespec *__ts, int __base)
   387       __THROW __nonnull ((1));
   388  # endif
   389  
   390  
   391  # ifdef __USE_XOPEN_EXTENDED
   392  /* Set to one of the following values to indicate an error.
   393       1  the DATEMSK environment variable is null or undefined,
   394       2  the template file cannot be opened for reading,
   395       3  failed to get file status information,
   396       4  the template file is not a regular file,
   397       5  an error is encountered while reading the template file,
   398       6  memory allication failed (not enough memory available),
   399       7  there is no line in the template that matches the input,
   400       8  invalid input specification Example: February 31 or a time is
   401          specified that can not be represented in a time_t (representing
   402          the time in seconds since 00:00:00 UTC, January 1, 1970) */
   403  extern int getdate_err;
   404  
   405  /* Parse the given string as a date specification and return a value
   406     representing the value.  The templates from the file identified by
   407     the environment variable DATEMSK are used.  In case of an error
   408     `getdate_err' is set.
   409  
   410     This function is a possible cancellation point and therefore not
   411     marked with __THROW.  */
   412  extern struct tm *getdate (const char *__string);
   413  # endif
   414  
   415  # ifdef __USE_GNU
   416  /* Since `getdate' is not reentrant because of the use of `getdate_err'
   417     and the static buffer to return the result in, we provide a thread-s
        afe
   418     variant.  The functionality is the same.  The result is returned in
   419     the buffer pointed to by RESBUFP and in case of an error the return
   420     value is != 0 with the same values as given above for `getdate_err'.
   421  
   422     This function is not part of POSIX and therefore no official
   423     cancellation point.  But due to similarity with an POSIX interface
   424     or due to the implementation it is a cancellation point and
   425     therefore not marked with __THROW.  */
   426  extern int getdate_r (const char *__restrict __string,
   427                        struct tm *__restrict __resbufp);
   428  # endif
   429  
   430  __END_DECLS
   431  
   432  #endif /* <time.h> included.  */
   433  
   434  #endif /* <time.h> not already included.  */
Close file: /usr/include/time.h
    43  #include <time.h>
    44  #define __need_timeval
Open file: /usr/include/bits/time.h
     1  /* System-dependent timing definitions.  Linux version.
     2     Copyright (C) 1996,1997,1999-2003,2010,2011,2012 Free Software Found
        ation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    20   * Never include this file directly; use <time.h> instead.
    21   */
    22  
    23  #if defined __need_timeval || defined __USE_GNU
    24  # ifndef _STRUCT_TIMEVAL
    25  #  define _STRUCT_TIMEVAL       1
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;
    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];
    65  } __u_quad_t;
    66  #endif
    67  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    68  
    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    70     macros for each of the OS types we define below.  The definitions
    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long
    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.
    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    87     these types, where using the appropriate l or ll format modifiers ca
        n
    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,
    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t
   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int
   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else
   128  # error
   129  #endif
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   131  
   132  
   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;
   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  
   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   187  
   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   191  typedef __quad_t *__qaddr_t;
   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE
   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    26  #  include <bits/types.h>
    27  
    28  /* A time value that is accurate to the nearest
    29     microsecond but also has a range of years.  */
    30  struct timeval
    31    {
    32      __time_t tv_sec;            /* Seconds.  */
    33      __suseconds_t tv_usec;      /* Microseconds.  */
    34    };
    35  # endif /* struct timeval */
    36  #endif
    37  
    38  #ifndef __need_timeval
    39  # ifndef _BITS_TIME_H
    40  #  define _BITS_TIME_H  1
    41  
    42  /* ISO/IEC 9899:1990 7.12.1: <time.h>
    43     The macro `CLOCKS_PER_SEC' is the number per second of the value
    44     returned by the `clock' function. */
    45  /* CAE XSH, Issue 4, Version 2: <time.h>
    46     The value of CLOCKS_PER_SEC is required to be 1 million on all
    47     XSI-conformant systems. */
    48  #  define CLOCKS_PER_SEC  1000000l
    49  
    50  #  if (!defined __STRICT_ANSI__ || defined __USE_POSIX) \
    51     && !defined __USE_XOPEN2K
    52  /* Even though CLOCKS_PER_SEC has such a strange value CLK_TCK
    53     presents the real value for clock ticks per second for the system.  
        */
    54  #   include <bits/types.h>
    55  extern long int __sysconf (int);
    56  #   define CLK_TCK ((__clock_t) __sysconf (2))  /* 2 is _SC_CLK_TCK */
    57  #  endif
    58  
    59  #  ifdef __USE_POSIX199309
    60  /* Identifier for system-wide realtime clock.  */
    61  #   define CLOCK_REALTIME               0
    62  /* Monotonic system-wide clock.  */
    63  #   define CLOCK_MONOTONIC              1
    64  /* High-resolution timer from the CPU.  */
    65  #   define CLOCK_PROCESS_CPUTIME_ID     2
    66  /* Thread-specific CPU-time clock.  */
    67  #   define CLOCK_THREAD_CPUTIME_ID      3
    68  /* Monotonic system-wide clock, not adjusted for frequency scaling.  */
    69  #   define CLOCK_MONOTONIC_RAW          4
    70  /* Identifier for system-wide realtime clock, updated only on ticks.  *
        /
    71  #   define CLOCK_REALTIME_COARSE        5
    72  /* Monotonic system-wide clock, updated only on ticks.  */
    73  #   define CLOCK_MONOTONIC_COARSE       6
    74  /* Monotonic system-wide clock that includes time spent in suspension. 
         */
    75  #   define CLOCK_BOOTTIME               7
    76  /* Like CLOCK_REALTIME but also wakes suspended system.  */
    77  #   define CLOCK_REALTIME_ALARM         8
    78  /* Like CLOCK_BOOTTIME but also wakes suspended system.  */
    79  #   define CLOCK_BOOTTIME_ALARM         9
    80  /* Like CLOCK_REALTIME but in International Atomic Time.  */
    81  #   define CLOCK_TAI                    11

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    82  
    83  /* Flag to indicate time is absolute.  */
    84  #   define TIMER_ABSTIME                1
    85  #  endif
    86  
    87  #  ifdef __USE_GNU
    88  #   include <bits/timex.h>
    89  
    90  __BEGIN_DECLS
    91  
    92  /* Tune a POSIX clock.  */
    93  extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) 
        __THROW;
    94  
    95  __END_DECLS
    96  #  endif /* use GNU */
    97  
    98  # endif /* bits/time.h */
    99  #endif
   100  
   101  #undef __need_timeval
Close file: /usr/include/bits/time.h
    45  #include <bits/time.h>
    46  
    47  #ifndef __suseconds_t_defined
    48  typedef __suseconds_t suseconds_t;
    49  # define __suseconds_t_defined
    50  #endif
    51  
    52  
    53  /* The fd_set member is required to be an array of longs.  */
    54  typedef long int __fd_mask;
    55  
    56  /* Some versions of <linux/posix_types.h> define this macros.  */
    57  #undef  __NFDBITS
    58  /* It's easier to assume 8-bit bytes than to get CHAR_BIT.  */
    59  #define __NFDBITS       (8 * (int) sizeof (__fd_mask))
    60  #define __FD_ELT(d)     ((d) / __NFDBITS)
    61  #define __FD_MASK(d)    ((__fd_mask) 1 << ((d) % __NFDBITS))
    62  
    63  /* fd_set for select and pselect.  */
    64  typedef struct
    65    {
    66      /* XPG4.2 requires this member name.  Otherwise avoid the name
    67         from the global namespace.  */
    68  #ifdef __USE_XOPEN
    69      __fd_mask fds_bits[__FD_SETSIZE / __NFDBITS];
    70  # define __FDS_BITS(set) ((set)->fds_bits)
    71  #else
    72      __fd_mask __fds_bits[__FD_SETSIZE / __NFDBITS];
    73  # define __FDS_BITS(set) ((set)->__fds_bits)
    74  #endif
    75    } fd_set;
    76  
    77  /* Maximum number of file descriptors in `fd_set'.  */
    78  #define FD_SETSIZE              __FD_SETSIZE
    79  
    80  #ifdef __USE_MISC
    81  /* Sometimes the fd_set member is assumed to have this type.  */
    82  typedef __fd_mask fd_mask;
    83  
    84  /* Number of bits per word of `fd_set' (some code assumes this is 32). 
         */
    85  # define NFDBITS                __NFDBITS
    86  #endif
    87  
    88  
    89  /* Access macros for `fd_set'.  */
    90  #define FD_SET(fd, fdsetp)      __FD_SET (fd, fdsetp)
    91  #define FD_CLR(fd, fdsetp)      __FD_CLR (fd, fdsetp)
    92  #define FD_ISSET(fd, fdsetp)    __FD_ISSET (fd, fdsetp)
    93  #define FD_ZERO(fdsetp)         __FD_ZERO (fdsetp)
    94  
    95  
    96  __BEGIN_DECLS

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    97  
    98  /* Check the first NFDS descriptors each in READFDS (if not NULL) for r
        ead
    99     readiness, in WRITEFDS (if not NULL) for write readiness, and in EXC
        EPTFDS
   100     (if not NULL) for exceptional conditions.  If TIMEOUT is not NULL, t
        ime out
   101     after waiting the interval specified therein.  Returns the number of
         ready
   102     descriptors, or -1 for errors.
   103  
   104     This function is a cancellation point and therefore not marked with
   105     __THROW.  */
   106  extern int select (int __nfds, fd_set *__restrict __readfds,
   107                     fd_set *__restrict __writefds,
   108                     fd_set *__restrict __exceptfds,
   109                     struct timeval *__restrict __timeout);
   110  
   111  #ifdef __USE_XOPEN2K
   112  /* Same as above only that the TIMEOUT value is given with higher
   113     resolution and a sigmask which is been set temporarily.  This versio
        n
   114     should be used.
   115  
   116     This function is a cancellation point and therefore not marked with
   117     __THROW.  */
   118  extern int pselect (int __nfds, fd_set *__restrict __readfds,
   119                      fd_set *__restrict __writefds,
   120                      fd_set *__restrict __exceptfds,
   121                      const struct timespec *__restrict __timeout,
   122                      const __sigset_t *__restrict __sigmask);
   123  #endif
   124  
   125  
   126  /* Define some inlines helping to catch common problems.  */
   127  #if __USE_FORTIFY_LEVEL > 0 && defined __GNUC__
   128  # include <bits/select2.h>
   129  #endif
   130  
   131  __END_DECLS
   132  
   133  #endif /* sys/select.h */
Close file: /usr/include/sys/select.h
   219  # include <sys/select.h>
   220  
   221  /* BSD defines these symbols, so we follow.  */
Open file: /usr/include/sys/sysmacros.h
     1  /* Definitions of macros to access `dev_t' values.
     2     Copyright (C) 1996, 1997, 1999, 2003, 2004, 2007, 2011
     3     Free Software Foundation, Inc.
     4     This file is part of the GNU C Library.
     5  
     6     The GNU C Library is free software; you can redistribute it and/or
     7     modify it under the terms of the GNU Lesser General Public
     8     License as published by the Free Software Foundation; either
     9     version 2.1 of the License, or (at your option) any later version.
    10  
    11     The GNU C Library is distributed in the hope that it will be useful,
    12     but WITHOUT ANY WARRANTY; without even the implied warranty of
    13     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    14     Lesser General Public License for more details.
    15  
    16     You should have received a copy of the GNU Lesser General Public
    17     License along with the GNU C Library; if not, see
    18     <http://www.gnu.org/licenses/>.  */
    19  
    20  #ifndef _SYS_SYSMACROS_H
    21  #define _SYS_SYSMACROS_H        1
    22  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.
    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__
   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */
   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif
   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2
   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  
   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    23  #include <features.h>
    24  
    25  /* If the compiler does not know long long it is out of luck.  We are
    26     not going to hack weird hacks to support the dev_t representation
    27     they need.  */
    28  #ifdef __GLIBC_HAVE_LONG_LONG
    29  __BEGIN_DECLS
    30  
    31  __extension__
    32  extern unsigned int gnu_dev_major (unsigned long long int __dev)
    33       __THROW __attribute_const__;
    34  __extension__
    35  extern unsigned int gnu_dev_minor (unsigned long long int __dev)
    36       __THROW __attribute_const__;
    37  __extension__
    38  extern unsigned long long int gnu_dev_makedev (unsigned int __major,
    39                                                 unsigned int __minor)
    40       __THROW __attribute_const__;
    41  
    42  # if defined __GNUC__ && __GNUC__ >= 2 && defined __USE_EXTERN_INLINES
    43  __extension__ __extern_inline __attribute_const__ unsigned int
    44  __NTH (gnu_dev_major (unsigned long long int __dev))
    45  {
    46    return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xff
        f);
    47  }
    48  
    49  __extension__ __extern_inline __attribute_const__ unsigned int
    50  __NTH (gnu_dev_minor (unsigned long long int __dev))
    51  {

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    52    return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
    53  }
    54  
    55  __extension__ __extern_inline __attribute_const__ unsigned long long in
        t
    56  __NTH (gnu_dev_makedev (unsigned int __major, unsigned int __minor))
    57  {
    58    return ((__minor & 0xff) | ((__major & 0xfff) << 8)
    59            | (((unsigned long long int) (__minor & ~0xff)) << 12)
    60            | (((unsigned long long int) (__major & ~0xfff)) << 32));
    61  }
    62  # endif
    63  __END_DECLS
    64  
    65  /* Access the functions with their traditional names.  */
    66  # define major(dev) gnu_dev_major (dev)
    67  # define minor(dev) gnu_dev_minor (dev)
    68  # define makedev(maj, min) gnu_dev_makedev (maj, min)
    69  #endif
    70  
    71  #endif /* sys/sysmacros.h */
Close file: /usr/include/sys/sysmacros.h
   222  # include <sys/sysmacros.h>
   223  #endif /* Use BSD.  */
   224  
   225  
   226  #if (defined __USE_UNIX98 || defined __USE_XOPEN2K8) \
   227      && !defined __blksize_t_defined
   228  typedef __blksize_t blksize_t;
   229  # define __blksize_t_defined
   230  #endif
   231  
   232  /* Types from the Large File Support interface.  */
   233  #ifndef __USE_FILE_OFFSET64
   234  # ifndef __blkcnt_t_defined
   235  typedef __blkcnt_t blkcnt_t;     /* Type to count number of disk blocks
        .  */
   236  #  define __blkcnt_t_defined
   237  # endif
   238  # ifndef __fsblkcnt_t_defined
   239  typedef __fsblkcnt_t fsblkcnt_t; /* Type to count file system blocks.  
        */
   240  #  define __fsblkcnt_t_defined
   241  # endif
   242  # ifndef __fsfilcnt_t_defined
   243  typedef __fsfilcnt_t fsfilcnt_t; /* Type to count file system inodes.  
        */
   244  #  define __fsfilcnt_t_defined
   245  # endif
   246  #else
   247  # ifndef __blkcnt_t_defined
   248  typedef __blkcnt64_t blkcnt_t;     /* Type to count number of disk bloc
        ks.  */
   249  #  define __blkcnt_t_defined
   250  # endif
   251  # ifndef __fsblkcnt_t_defined
   252  typedef __fsblkcnt64_t fsblkcnt_t; /* Type to count file system blocks.
          */
   253  #  define __fsblkcnt_t_defined
   254  # endif
   255  # ifndef __fsfilcnt_t_defined
   256  typedef __fsfilcnt64_t fsfilcnt_t; /* Type to count file system inodes.
          */
   257  #  define __fsfilcnt_t_defined
   258  # endif
   259  #endif
   260  
   261  #ifdef __USE_LARGEFILE64
   262  typedef __blkcnt64_t blkcnt64_t;     /* Type to count number of disk bl
        ocks. */
   263  typedef __fsblkcnt64_t fsblkcnt64_t; /* Type to count file system block
        s.  */
   264  typedef __fsfilcnt64_t fsfilcnt64_t; /* Type to count file system inode
        s.  */
   265  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   266  
   267  
   268  /* Now add the thread types.  */
   269  #if defined __USE_POSIX199506 || defined __USE_UNIX98
Open file: /usr/include/bits/pthreadtypes.h
     1  /* Copyright (C) 2002-2007, 2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _BITS_PTHREADTYPES_H
    19  #define _BITS_PTHREADTYPES_H    1
    20  
Open file: /usr/include/bits/wordsize.h
     1  /* Determine the wordsize from the preprocessor defines.  */
     2  
     3  #if defined __x86_64__ && !defined __ILP32__
     4  # define __WORDSIZE     64
     5  #else
     6  # define __WORDSIZE     32
     7  #endif
     8  
     9  #ifdef __x86_64__
    10  # define __WORDSIZE_TIME64_COMPAT32     1
    11  /* Both x86-64 and x32 use the 64-bit system call interface.  */
    12  # define __SYSCALL_WORDSIZE             64
    13  #endif
Close file: /usr/include/bits/wordsize.h
    21  #include <bits/wordsize.h>
    22  
    23  #ifdef __x86_64__
    24  # if __WORDSIZE == 64
    25  #  define __SIZEOF_PTHREAD_ATTR_T 56
    26  #  define __SIZEOF_PTHREAD_MUTEX_T 40
    27  #  define __SIZEOF_PTHREAD_MUTEXATTR_T 4
    28  #  define __SIZEOF_PTHREAD_COND_T 48
    29  #  define __SIZEOF_PTHREAD_CONDATTR_T 4
    30  #  define __SIZEOF_PTHREAD_RWLOCK_T 56
    31  #  define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
    32  #  define __SIZEOF_PTHREAD_BARRIER_T 32
    33  #  define __SIZEOF_PTHREAD_BARRIERATTR_T 4
    34  # else
    35  #  define __SIZEOF_PTHREAD_ATTR_T 32
    36  #  define __SIZEOF_PTHREAD_MUTEX_T 32
    37  #  define __SIZEOF_PTHREAD_MUTEXATTR_T 4
    38  #  define __SIZEOF_PTHREAD_COND_T 48
    39  #  define __SIZEOF_PTHREAD_CONDATTR_T 4
    40  #  define __SIZEOF_PTHREAD_RWLOCK_T 44
    41  #  define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
    42  #  define __SIZEOF_PTHREAD_BARRIER_T 20
    43  #  define __SIZEOF_PTHREAD_BARRIERATTR_T 4
    44  # endif
    45  #else
    46  # define __SIZEOF_PTHREAD_ATTR_T 36
    47  # define __SIZEOF_PTHREAD_MUTEX_T 24
    48  # define __SIZEOF_PTHREAD_MUTEXATTR_T 4
    49  # define __SIZEOF_PTHREAD_COND_T 48
    50  # define __SIZEOF_PTHREAD_CONDATTR_T 4
    51  # define __SIZEOF_PTHREAD_RWLOCK_T 32
    52  # define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
    53  # define __SIZEOF_PTHREAD_BARRIER_T 20
    54  # define __SIZEOF_PTHREAD_BARRIERATTR_T 4
    55  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    56  
    57  
    58  /* Thread identifiers.  The structure of the attribute type is not
    59     exposed on purpose.  */
    60  typedef unsigned long int pthread_t;
    61  
    62  
    63  union pthread_attr_t
    64  {
    65    char __size[__SIZEOF_PTHREAD_ATTR_T];
    66    long int __align;
    67  };
    68  #ifndef __have_pthread_attr_t
    69  typedef union pthread_attr_t pthread_attr_t;
    70  # define __have_pthread_attr_t  1
    71  #endif
    72  
    73  
    74  #ifdef __x86_64__
    75  typedef struct __pthread_internal_list
    76  {
    77    struct __pthread_internal_list *__prev;
    78    struct __pthread_internal_list *__next;
    79  } __pthread_list_t;
    80  #else
    81  typedef struct __pthread_internal_slist
    82  {
    83    struct __pthread_internal_slist *__next;
    84  } __pthread_slist_t;
    85  #endif
    86  
    87  
    88  /* Data structures for mutex handling.  The structure of the attribute
    89     type is not exposed on purpose.  */
    90  typedef union
    91  {
    92    struct __pthread_mutex_s
    93    {
    94      int __lock;
    95      unsigned int __count;
    96      int __owner;
    97  #ifdef __x86_64__
    98      unsigned int __nusers;
    99  #endif
   100      /* KIND must stay at this position in the structure to maintain
   101         binary compatibility.  */
   102      int __kind;
   103  #ifdef __x86_64__
   104      short __spins;
   105      short __elision;
   106      __pthread_list_t __list;
   107  # define __PTHREAD_MUTEX_HAVE_PREV      1
   108  /* Mutex __spins initializer used by PTHREAD_MUTEX_INITIALIZER.  */
   109  # define __PTHREAD_SPINS             0, 0
   110  #else
   111      unsigned int __nusers;
   112      __extension__ union
   113      {
   114        struct
   115        {
   116          short __espins;
   117          short __elision;
   118  # define __spins __elision_data.__espins
   119  # define __elision __elision_data.__elision
   120  # define __PTHREAD_SPINS         { 0, 0 }
   121        } __elision_data;
   122        __pthread_slist_t __list;
   123      };
   124  #endif
   125    } __data;
   126    char __size[__SIZEOF_PTHREAD_MUTEX_T];
   127    long int __align;
   128  } pthread_mutex_t;
   129  
   130  typedef union

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   131  {
   132    char __size[__SIZEOF_PTHREAD_MUTEXATTR_T];
   133    int __align;
   134  } pthread_mutexattr_t;
   135  
   136  
   137  /* Data structure for conditional variable handling.  The structure of
   138     the attribute type is not exposed on purpose.  */
   139  typedef union
   140  {
   141    struct
   142    {
   143      int __lock;
   144      unsigned int __futex;
   145      __extension__ unsigned long long int __total_seq;
   146      __extension__ unsigned long long int __wakeup_seq;
   147      __extension__ unsigned long long int __woken_seq;
   148      void *__mutex;
   149      unsigned int __nwaiters;
   150      unsigned int __broadcast_seq;
   151    } __data;
   152    char __size[__SIZEOF_PTHREAD_COND_T];
   153    __extension__ long long int __align;
   154  } pthread_cond_t;
   155  
   156  typedef union
   157  {
   158    char __size[__SIZEOF_PTHREAD_CONDATTR_T];
   159    int __align;
   160  } pthread_condattr_t;
   161  
   162  
   163  /* Keys for thread-specific data */
   164  typedef unsigned int pthread_key_t;
   165  
   166  
   167  /* Once-only execution */
   168  typedef int pthread_once_t;
   169  
   170  
   171  #if defined __USE_UNIX98 || defined __USE_XOPEN2K
   172  /* Data structure for read-write lock variable handling.  The
   173     structure of the attribute type is not exposed on purpose.  */
   174  typedef union
   175  {
   176  # ifdef __x86_64__
   177    struct
   178    {
   179      int __lock;
   180      unsigned int __nr_readers;
   181      unsigned int __readers_wakeup;
   182      unsigned int __writer_wakeup;
   183      unsigned int __nr_readers_queued;
   184      unsigned int __nr_writers_queued;
   185      int __writer;
   186      int __shared;
   187      unsigned long int __pad1;
   188      unsigned long int __pad2;
   189      /* FLAGS must stay at this position in the structure to maintain
   190         binary compatibility.  */
   191      unsigned int __flags;
   192  # define __PTHREAD_RWLOCK_INT_FLAGS_SHARED      1
   193    } __data;
   194  # else
   195    struct
   196    {
   197      int __lock;
   198      unsigned int __nr_readers;
   199      unsigned int __readers_wakeup;
   200      unsigned int __writer_wakeup;
   201      unsigned int __nr_readers_queued;
   202      unsigned int __nr_writers_queued;
   203      /* FLAGS must stay at this position in the structure to maintain
   204         binary compatibility.  */
   205      unsigned char __flags;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   206      unsigned char __shared;
   207      unsigned char __pad1;
   208      unsigned char __pad2;
   209      int __writer;
   210    } __data;
   211  # endif
   212    char __size[__SIZEOF_PTHREAD_RWLOCK_T];
   213    long int __align;
   214  } pthread_rwlock_t;
   215  
   216  typedef union
   217  {
   218    char __size[__SIZEOF_PTHREAD_RWLOCKATTR_T];
   219    long int __align;
   220  } pthread_rwlockattr_t;
   221  #endif
   222  
   223  
   224  #ifdef __USE_XOPEN2K
   225  /* POSIX spinlock data type.  */
   226  typedef volatile int pthread_spinlock_t;
   227  
   228  
   229  /* POSIX barriers data type.  The structure of the type is
   230     deliberately not exposed.  */
   231  typedef union
   232  {
   233    char __size[__SIZEOF_PTHREAD_BARRIER_T];
   234    long int __align;
   235  } pthread_barrier_t;
   236  
   237  typedef union
   238  {
   239    char __size[__SIZEOF_PTHREAD_BARRIERATTR_T];
   240    int __align;
   241  } pthread_barrierattr_t;
   242  #endif
   243  
   244  
   245  #ifndef __x86_64__
   246  /* Extra attributes for the cleanup functions.  */
   247  # define __cleanup_fct_attribute __attribute__ ((__regparm__ (1)))
   248  #endif
   249  
   250  #endif  /* bits/pthreadtypes.h */
Close file: /usr/include/bits/pthreadtypes.h
   270  # include <bits/pthreadtypes.h>
   271  #endif
   272  
   273  __END_DECLS
   274  
   275  #endif /* sys/types.h */
Close file: /usr/include/sys/types.h
   314  # include <sys/types.h> /* we need int32_t... */
   315  
   316  /* These are the functions that actually do things.  The `random', `sra
        ndom',
   317     `initstate' and `setstate' functions are those from BSD Unices.
   318     The `rand' and `srand' functions are required by the ANSI standard.
   319     We provide both interfaces to the same random number generator.  */
   320  /* Return a random long integer between 0 and RAND_MAX inclusive.  */
   321  extern long int random (void) __THROW;
   322  
   323  /* Seed the random number generator with the given number.  */
   324  extern void srandom (unsigned int __seed) __THROW;
   325  
   326  /* Initialize the random number generator to use state buffer STATEBUF,
   327     of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 1
        6,
   328     32, 64, 128 and 256, the bigger the better; values less than 8 will
   329     cause an error and values greater than 256 will be rounded down.  */
   330  extern char *initstate (unsigned int __seed, char *__statebuf,
   331                          size_t __statelen) __THROW __nonnull ((2));
   332  
   333  /* Switch the random number generator to state buffer STATEBUF,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   334     which should have been previously initialized by `initstate'.  */
   335  extern char *setstate (char *__statebuf) __THROW __nonnull ((1));
   336  
   337  
   338  # ifdef __USE_MISC
   339  /* Reentrant versions of the `random' family of functions.
   340     These functions all use the following data structure to contain
   341     state, rather than global state variables.  */
   342  
   343  struct random_data
   344    {
   345      int32_t *fptr;              /* Front pointer.  */
   346      int32_t *rptr;              /* Rear pointer.  */
   347      int32_t *state;             /* Array of state values.  */
   348      int rand_type;              /* Type of random number generator.  */
   349      int rand_deg;               /* Degree of random number generator.  
        */
   350      int rand_sep;               /* Distance between front and rear.  */
   351      int32_t *end_ptr;           /* Pointer behind state table.  */
   352    };
   353  
   354  extern int random_r (struct random_data *__restrict __buf,
   355                       int32_t *__restrict __result) __THROW __nonnull ((
        1, 2));
   356  
   357  extern int srandom_r (unsigned int __seed, struct random_data *__buf)
   358       __THROW __nonnull ((2));
   359  
   360  extern int initstate_r (unsigned int __seed, char *__restrict __statebu
        f,
   361                          size_t __statelen,
   362                          struct random_data *__restrict __buf)
   363       __THROW __nonnull ((2, 4));
   364  
   365  extern int setstate_r (char *__restrict __statebuf,
   366                         struct random_data *__restrict __buf)
   367       __THROW __nonnull ((1, 2));
   368  # endif /* Use misc.  */
   369  #endif  /* Use SVID || extended X/Open || BSD. */
   370  
   371  
   372  __BEGIN_NAMESPACE_STD
   373  /* Return a random integer between 0 and RAND_MAX inclusive.  */
   374  extern int rand (void) __THROW;
   375  /* Seed the random number generator with the given number.  */
   376  extern void srand (unsigned int __seed) __THROW;
   377  __END_NAMESPACE_STD
   378  
   379  #ifdef __USE_POSIX
   380  /* Reentrant interface according to POSIX.1.  */
   381  extern int rand_r (unsigned int *__seed) __THROW;
   382  #endif
   383  
   384  
   385  #if defined __USE_SVID || defined __USE_XOPEN
   386  /* System V style 48-bit random number generator functions.  */
   387  
   388  /* Return non-negative, double-precision floating-point value in [0.0,1
        .0).  */
   389  extern double drand48 (void) __THROW;
   390  extern double erand48 (unsigned short int __xsubi[3]) __THROW __nonnull
         ((1));
   391  
   392  /* Return non-negative, long integer in [0,2^31).  */
   393  extern long int lrand48 (void) __THROW;
   394  extern long int nrand48 (unsigned short int __xsubi[3])
   395       __THROW __nonnull ((1));
   396  
   397  /* Return signed, long integers in [-2^31,2^31).  */
   398  extern long int mrand48 (void) __THROW;
   399  extern long int jrand48 (unsigned short int __xsubi[3])
   400       __THROW __nonnull ((1));
   401  
   402  /* Seed random number generator.  */
   403  extern void srand48 (long int __seedval) __THROW;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   404  extern unsigned short int *seed48 (unsigned short int __seed16v[3])
   405       __THROW __nonnull ((1));
   406  extern void lcong48 (unsigned short int __param[7]) __THROW __nonnull (
        (1));
   407  
   408  # ifdef __USE_MISC
   409  /* Data structure for communication with thread safe versions.  This
   410     type is to be regarded as opaque.  It's only exported because users
   411     have to allocate objects of this type.  */
   412  struct drand48_data
   413    {
   414      unsigned short int __x[3];  /* Current state.  */
   415      unsigned short int __old_x[3]; /* Old state.  */
   416      unsigned short int __c;     /* Additive const. in congruential form
        ula.  */
   417      unsigned short int __init;  /* Flag for initializing.  */
   418      unsigned long long int __a; /* Factor in congruential formula.  */
   419    };
   420  
   421  /* Return non-negative, double-precision floating-point value in [0.0,1
        .0).  */
   422  extern int drand48_r (struct drand48_data *__restrict __buffer,
   423                        double *__restrict __result) __THROW __nonnull ((
        1, 2));
   424  extern int erand48_r (unsigned short int __xsubi[3],
   425                        struct drand48_data *__restrict __buffer,
   426                        double *__restrict __result) __THROW __nonnull ((
        1, 2));
   427  
   428  /* Return non-negative, long integer in [0,2^31).  */
   429  extern int lrand48_r (struct drand48_data *__restrict __buffer,
   430                        long int *__restrict __result)
   431       __THROW __nonnull ((1, 2));
   432  extern int nrand48_r (unsigned short int __xsubi[3],
   433                        struct drand48_data *__restrict __buffer,
   434                        long int *__restrict __result)
   435       __THROW __nonnull ((1, 2));
   436  
   437  /* Return signed, long integers in [-2^31,2^31).  */
   438  extern int mrand48_r (struct drand48_data *__restrict __buffer,
   439                        long int *__restrict __result)
   440       __THROW __nonnull ((1, 2));
   441  extern int jrand48_r (unsigned short int __xsubi[3],
   442                        struct drand48_data *__restrict __buffer,
   443                        long int *__restrict __result)
   444       __THROW __nonnull ((1, 2));
   445  
   446  /* Seed random number generator.  */
   447  extern int srand48_r (long int __seedval, struct drand48_data *__buffer
        )
   448       __THROW __nonnull ((2));
   449  
   450  extern int seed48_r (unsigned short int __seed16v[3],
   451                       struct drand48_data *__buffer) __THROW __nonnull (
        (1, 2));
   452  
   453  extern int lcong48_r (unsigned short int __param[7],
   454                        struct drand48_data *__buffer)
   455       __THROW __nonnull ((1, 2));
   456  # endif /* Use misc.  */
   457  #endif  /* Use SVID or X/Open.  */
   458  
   459  #endif /* don't just need malloc and calloc */
   460  
   461  #ifndef __malloc_and_calloc_defined
   462  # define __malloc_and_calloc_defined
   463  __BEGIN_NAMESPACE_STD
   464  /* Allocate SIZE bytes of memory.  */
   465  extern void *malloc (size_t __size) __THROW __attribute_malloc__ __wur;
   466  /* Allocate NMEMB elements of SIZE bytes each, all initialized to 0.  *
        /
   467  extern void *calloc (size_t __nmemb, size_t __size)
   468       __THROW __attribute_malloc__ __wur;
   469  __END_NAMESPACE_STD
   470  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   471  
   472  #ifndef __need_malloc_and_calloc
   473  __BEGIN_NAMESPACE_STD
   474  /* Re-allocate the previously allocated block
   475     in PTR, making the new block SIZE bytes long.  */
   476  /* __attribute_malloc__ is not used, because if realloc returns
   477     the same pointer that was passed to it, aliasing needs to be allowed
   478     between objects pointed by the old and new pointers.  */
   479  extern void *realloc (void *__ptr, size_t __size)
   480       __THROW __attribute_warn_unused_result__;
   481  /* Free a block allocated by `malloc', `realloc' or `calloc'.  */
   482  extern void free (void *__ptr) __THROW;
   483  __END_NAMESPACE_STD
   484  
   485  #ifdef  __USE_MISC
   486  /* Free a block.  An alias for `free'.  (Sun Unices).  */
   487  extern void cfree (void *__ptr) __THROW;
   488  #endif /* Use misc.  */
   489  
   490  #if defined __USE_GNU || defined __USE_BSD || defined __USE_MISC
Open file: /usr/include/alloca.h
     1  /* Copyright (C) 1992, 1996, 1997, 1998, 1999 Free Software Foundation,
         Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _ALLOCA_H
    19  #define _ALLOCA_H       1
    20  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.
    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__
   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */
   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif
   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2
   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  
   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    21  #include <features.h>
    22  
    23  #define __need_size_t
Open file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
     1  /* Copyright (C) 1989-2013 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \
    31      || defined(__need_wint_t)
    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \
    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  
    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.
    47     There's no way to win with the other order!  Sun lossage.  */
    48  
    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif
    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.
   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t
   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif
   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t
   115  #endif
   116  
   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  
   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF
   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #define _PTRDIFF_T
   137  #define _T_PTRDIFF_
   138  #define _T_PTRDIFF
   139  #define __PTRDIFF_T
   140  #define _PTRDIFF_T_
   141  #define _BSD_PTRDIFF_T_
   142  #define ___int_ptrdiff_t_h
   143  #define _GCC_PTRDIFF_T
   144  #ifndef __PTRDIFF_TYPE__
   145  #define __PTRDIFF_TYPE__ long int
   146  #endif
   147  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   148  #endif /* _GCC_PTRDIFF_T */
   149  #endif /* ___int_ptrdiff_t_h */
   150  #endif /* _BSD_PTRDIFF_T_ */
   151  #endif /* _PTRDIFF_T_ */
   152  #endif /* __PTRDIFF_T */
   153  #endif /* _T_PTRDIFF */
   154  #endif /* _T_PTRDIFF_ */
   155  #endif /* _PTRDIFF_T */
   156  
   157  /* If this symbol has done its job, get rid of it.  */
   158  #undef  __need_ptrdiff_t
   159  
   160  #endif /* _STDDEF_H or __need_ptrdiff_t.  */
   161  
   162  /* Unsigned type of `sizeof' something.  */
   163  
   164  /* Define this type if we are doing the whole job,
   165     or if we want this type in particular.  */
   166  #if defined (_STDDEF_H) || defined (__need_size_t)
   167  #ifndef __size_t__      /* BeOS */
   168  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   169  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */
   170  #ifndef _SYS_SIZE_T_H
   171  #ifndef _T_SIZE_
   172  #ifndef _T_SIZE
   173  #ifndef __SIZE_T
   174  #ifndef _SIZE_T_
   175  #ifndef _BSD_SIZE_T_
   176  #ifndef _SIZE_T_DEFINED_
   177  #ifndef _SIZE_T_DEFINED
   178  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   179  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   180  #ifndef ___int_size_t_h
   181  #ifndef _GCC_SIZE_T
   182  #ifndef _SIZET_
   183  #ifndef __size_t
   184  #define __size_t__      /* BeOS */
   185  #define __SIZE_T__      /* Cray Unicos/Mk */
   186  #define _SIZE_T
   187  #define _SYS_SIZE_T_H
   188  #define _T_SIZE_
   189  #define _T_SIZE
   190  #define __SIZE_T
   191  #define _SIZE_T_
   192  #define _BSD_SIZE_T_
   193  #define _SIZE_T_DEFINED_
   194  #define _SIZE_T_DEFINED
   195  #define _BSD_SIZE_T_DEFINED_    /* Darwin */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   196  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   197  #define ___int_size_t_h
   198  #define _GCC_SIZE_T
   199  #define _SIZET_
   200  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   201    || defined(__FreeBSD_kernel__)
   202  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   203  #elif defined (__VMS__)
   204  /* __size_t is also a typedef on VMS.  */
   205  #else
   206  #define __size_t
   207  #endif
   208  #ifndef __SIZE_TYPE__
   209  #define __SIZE_TYPE__ long unsigned int
   210  #endif
   211  #if !(defined (__GNUG__) && defined (size_t))
   212  typedef __SIZE_TYPE__ size_t;
   213  #ifdef __BEOS__
   214  typedef long ssize_t;
   215  #endif /* __BEOS__ */
   216  #endif /* !(defined (__GNUG__) && defined (size_t)) */
   217  #endif /* __size_t */
   218  #endif /* _SIZET_ */
   219  #endif /* _GCC_SIZE_T */
   220  #endif /* ___int_size_t_h */
   221  #endif /* _SIZE_T_DECLARED */
   222  #endif /* _BSD_SIZE_T_DEFINED_ */
   223  #endif /* _SIZE_T_DEFINED */
   224  #endif /* _SIZE_T_DEFINED_ */
   225  #endif /* _BSD_SIZE_T_ */
   226  #endif /* _SIZE_T_ */
   227  #endif /* __SIZE_T */
   228  #endif /* _T_SIZE */
   229  #endif /* _T_SIZE_ */
   230  #endif /* _SYS_SIZE_T_H */
   231  #endif /* _SIZE_T */
   232  #endif /* __SIZE_T__ */
   233  #endif /* __size_t__ */
   234  #undef  __need_size_t
   235  #endif /* _STDDEF_H or __need_size_t.  */
   236  
   237  
   238  /* Wide character type.
   239     Locale-writers should change this as necessary to
   240     be big enough to hold unique values not between 0 and 127,
   241     and not (wchar_t) -1, for each defined multibyte character.  */
   242  
   243  /* Define this type if we are doing the whole job,
   244     or if we want this type in particular.  */
   245  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   246  #ifndef __wchar_t__     /* BeOS */
   247  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   248  #ifndef _WCHAR_T
   249  #ifndef _T_WCHAR_
   250  #ifndef _T_WCHAR
   251  #ifndef __WCHAR_T
   252  #ifndef _WCHAR_T_
   253  #ifndef _BSD_WCHAR_T_
   254  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
   255  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   256  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   257  #ifndef _WCHAR_T_DEFINED_
   258  #ifndef _WCHAR_T_DEFINED
   259  #ifndef _WCHAR_T_H
   260  #ifndef ___int_wchar_t_h
   261  #ifndef __INT_WCHAR_T_H
   262  #ifndef _GCC_WCHAR_T
   263  #define __wchar_t__     /* BeOS */
   264  #define __WCHAR_T__     /* Cray Unicos/Mk */
   265  #define _WCHAR_T
   266  #define _T_WCHAR_
   267  #define _T_WCHAR
   268  #define __WCHAR_T
   269  #define _WCHAR_T_
   270  #define _BSD_WCHAR_T_

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   271  #define _WCHAR_T_DEFINED_
   272  #define _WCHAR_T_DEFINED
   273  #define _WCHAR_T_H
   274  #define ___int_wchar_t_h
   275  #define __INT_WCHAR_T_H
   276  #define _GCC_WCHAR_T
   277  #define _WCHAR_T_DECLARED
   278  
   279  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   280     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   281     symbols in the _FOO_T_ family, stays defined even after its
   282     corresponding type is defined).  If we define wchar_t, then we
   283     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   284     we undef _WCHAR_T_, then we must also define rune_t, since 
   285     headers like runetype.h assume that if machine/ansi.h is included,
   286     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   287     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   288     the same type." */
   289  #ifdef _BSD_WCHAR_T_
   290  #undef _BSD_WCHAR_T_
   291  #ifdef _BSD_RUNE_T_
   292  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   293  typedef _BSD_RUNE_T_ rune_t;
   294  #define _BSD_WCHAR_T_DEFINED_
   295  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   296  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   297  /* Why is this file so hard to maintain properly?  In contrast to
   298     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   299     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   300     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   301  #undef _BSD_RUNE_T_
   302  #endif
   303  #endif
   304  #endif
   305  #endif
   306  /* FreeBSD 5 can't be handled well using "traditional" logic above
   307     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   308     rune_t in some cases... */
   309  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   310  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   311  #if __BSD_VISIBLE
   312  #ifndef _RUNE_T_DECLARED
   313  typedef __rune_t        rune_t;
   314  #define _RUNE_T_DECLARED
   315  #endif
   316  #endif
   317  #endif
   318  #endif
   319  
   320  #ifndef __WCHAR_TYPE__
   321  #define __WCHAR_TYPE__ int
   322  #endif
   323  #ifndef __cplusplus
   324  typedef __WCHAR_TYPE__ wchar_t;
   325  #endif
   326  #endif
   327  #endif
   328  #endif
   329  #endif
   330  #endif
   331  #endif
   332  #endif /* _WCHAR_T_DECLARED */
   333  #endif /* _BSD_RUNE_T_DEFINED_ */
   334  #endif
   335  #endif
   336  #endif
   337  #endif
   338  #endif
   339  #endif
   340  #endif
   341  #endif /* __WCHAR_T__ */
   342  #endif /* __wchar_t__ */
   343  #undef  __need_wchar_t
   344  #endif /* _STDDEF_H or __need_wchar_t.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   345  
   346  #if defined (__need_wint_t)
   347  #ifndef _WINT_T
   348  #define _WINT_T
   349  
   350  #ifndef __WINT_TYPE__
   351  #define __WINT_TYPE__ unsigned int
   352  #endif
   353  typedef __WINT_TYPE__ wint_t;
   354  #endif
   355  #undef __need_wint_t
   356  #endif
   357  
   358  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   359      are already defined.  */
   360  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */
   361  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   362  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)
   363  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   364      are probably typos and should be removed before 2.8 is released.  *
        /
   365  #ifdef _GCC_PTRDIFF_T_
   366  #undef _PTRDIFF_T_
   367  #undef _BSD_PTRDIFF_T_
   368  #endif
   369  #ifdef _GCC_SIZE_T_
   370  #undef _SIZE_T_
   371  #undef _BSD_SIZE_T_
   372  #endif
   373  #ifdef _GCC_WCHAR_T_
   374  #undef _WCHAR_T_
   375  #undef _BSD_WCHAR_T_
   376  #endif
   377  /*  The following ones are the real ones.  */
   378  #ifdef _GCC_PTRDIFF_T
   379  #undef _PTRDIFF_T_
   380  #undef _BSD_PTRDIFF_T_
   381  #endif
   382  #ifdef _GCC_SIZE_T
   383  #undef _SIZE_T_
   384  #undef _BSD_SIZE_T_
   385  #endif
   386  #ifdef _GCC_WCHAR_T
   387  #undef _WCHAR_T_
   388  #undef _BSD_WCHAR_T_
   389  #endif
   390  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */
   391  
   392  #endif /* __sys_stdtypes_h */
   393  
   394  /* A null pointer constant.  */
   395  
   396  #if defined (_STDDEF_H) || defined (__need_NULL)
   397  #undef NULL             /* in case <stdio.h> has defined it. */
   398  #ifdef __GNUG__
   399  #define NULL __null
   400  #else   /* G++ */
   401  #ifndef __cplusplus
   402  #define NULL ((void *)0)
   403  #else   /* C++ */
   404  #define NULL 0
   405  #endif  /* C++ */
   406  #endif  /* G++ */
   407  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   408  #undef  __need_NULL
   409  
   410  #ifdef _STDDEF_H
   411  
   412  /* Offset of member MEMBER in a struct of type TYPE. */
   413  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   414  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   415  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   416    || (defined(__cplusplus) && __cplusplus >= 201103L)
   417  #ifndef _GCC_MAX_ALIGN_T
   418  #define _GCC_MAX_ALIGN_T
   419  /* Type whose alignment is supported in every context and is at least
   420     as great as that of any standard type not using alignment
   421     specifiers.  */
   422  typedef struct {
   423    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));
   424    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   425  } max_align_t;
   426  #endif
   427  #endif /* C11 or C++11.  */
   428  
   429  #if defined(__cplusplus) && __cplusplus >= 201103L
   430  #ifndef _GXX_NULLPTR_T
   431  #define _GXX_NULLPTR_T
   432    typedef decltype(nullptr) nullptr_t;
   433  #endif
   434  #endif /* C++11.  */
   435  
   436  #endif /* _STDDEF_H was defined this time */
   437  
   438  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
   439            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
    24  #include <stddef.h>
    25  
    26  __BEGIN_DECLS
    27  
    28  /* Remove any previous definitions.  */
    29  #undef  alloca
    30  
    31  /* Allocate a block that will be freed when the calling function exits.
          */
    32  extern void *alloca (size_t __size) __THROW;
    33  
    34  #ifdef  __GNUC__
    35  # define alloca(size)   __builtin_alloca (size)
    36  #endif /* GCC.  */
    37  
    38  __END_DECLS
    39  
    40  #endif /* alloca.h */
Close file: /usr/include/alloca.h
   491  # include <alloca.h>
   492  #endif /* Use GNU, BSD, or misc.  */
   493  
   494  #if (defined __USE_XOPEN_EXTENDED && !defined __USE_XOPEN2K) \
   495      || defined __USE_BSD
   496  /* Allocate SIZE bytes on a page boundary.  The storage cannot be freed
        .  */
   497  extern void *valloc (size_t __size) __THROW __attribute_malloc__ __wur;
   498  #endif
   499  
   500  #ifdef __USE_XOPEN2K
   501  /* Allocate memory of SIZE bytes with an alignment of ALIGNMENT.  */
   502  extern int posix_memalign (void **__memptr, size_t __alignment, size_t 
        __size)
   503       __THROW __nonnull ((1)) __wur;
   504  #endif
   505  
   506  #ifdef __USE_ISOC11
   507  /* ISO C variant of aligned allocation.  */
   508  extern void *aligned_alloc (size_t __alignment, size_t __size)
   509       __THROW __wur __attribute__ ((__malloc__, __alloc_size__ (2)));
   510  #endif
   511  
   512  __BEGIN_NAMESPACE_STD
   513  /* Abort execution and generate a core-dump.  */
   514  extern void abort (void) __THROW __attribute__ ((__noreturn__));
   515  
   516  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   517  /* Register a function to be called when `exit' is called.  */
   518  extern int atexit (void (*__func) (void)) __THROW __nonnull ((1));
   519  
   520  #if defined __USE_ISOC11 || defined __USE_ISOCXX11
   521  /* Register a function to be called when `quick_exit' is called.  */
   522  # ifdef __cplusplus
   523  extern "C++" int at_quick_exit (void (*__func) (void))
   524       __THROW __asm ("at_quick_exit") __nonnull ((1));
   525  # else
   526  extern int at_quick_exit (void (*__func) (void)) __THROW __nonnull ((1)
        );
   527  # endif
   528  #endif
   529  __END_NAMESPACE_STD
   530  
   531  #ifdef  __USE_MISC
   532  /* Register a function to be called with the status
   533     given to `exit' and the given argument.  */
   534  extern int on_exit (void (*__func) (int __status, void *__arg), void *_
        _arg)
   535       __THROW __nonnull ((1));
   536  #endif
   537  
   538  __BEGIN_NAMESPACE_STD
   539  /* Call all functions registered with `atexit' and `on_exit',
   540     in the reverse of the order in which they were registered,
   541     perform stdio cleanup, and terminate program execution with STATUS. 
         */
   542  extern void exit (int __status) __THROW __attribute__ ((__noreturn__));
   543  
   544  #if defined __USE_ISOC11 || defined __USE_ISOCXX11
   545  /* Call all functions registered with `at_quick_exit' in the reverse
   546     of the order in which they were registered and terminate program
   547     execution with STATUS.  */
   548  extern void quick_exit (int __status) __THROW __attribute__ ((__noretur
        n__));
   549  #endif
   550  __END_NAMESPACE_STD
   551  
   552  #ifdef __USE_ISOC99
   553  __BEGIN_NAMESPACE_C99
   554  /* Terminate the program with STATUS without calling any of the
   555     functions registered with `atexit' or `on_exit'.  */
   556  extern void _Exit (int __status) __THROW __attribute__ ((__noreturn__))
        ;
   557  __END_NAMESPACE_C99
   558  #endif
   559  
   560  
   561  __BEGIN_NAMESPACE_STD
   562  /* Return the value of envariable NAME, or NULL if it doesn't exist.  *
        /
   563  extern char *getenv (const char *__name) __THROW __nonnull ((1)) __wur;
   564  __END_NAMESPACE_STD
   565  
   566  #ifdef __USE_GNU
   567  /* This function is similar to the above but returns NULL if the
   568     programs is running with SUID or SGID enabled.  */
   569  extern char *secure_getenv (const char *__name)
   570       __THROW __nonnull ((1)) __wur;
   571  #endif
   572  
   573  #if defined __USE_SVID || defined __USE_XOPEN
   574  /* The SVID says this is in <stdio.h>, but this seems a better place.   
        */
   575  /* Put STRING, which is of the form "NAME=VALUE", in the environment.
   576     If there is no `=', remove NAME from the environment.  */
   577  extern int putenv (char *__string) __THROW __nonnull ((1));
   578  #endif
   579  
   580  #if defined __USE_BSD || defined __USE_XOPEN2K
   581  /* Set NAME to VALUE in the environment.
   582     If REPLACE is nonzero, overwrite an existing value.  */
   583  extern int setenv (const char *__name, const char *__value, int __repla
        ce)

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   584       __THROW __nonnull ((2));
   585  
   586  /* Remove the variable NAME from the environment.  */
   587  extern int unsetenv (const char *__name) __THROW __nonnull ((1));
   588  #endif
   589  
   590  #ifdef  __USE_MISC
   591  /* The `clearenv' was planned to be added to POSIX.1 but probably
   592     never made it.  Nevertheless the POSIX.9 standard (POSIX bindings
   593     for Fortran 77) requires this function.  */
   594  extern int clearenv (void) __THROW;
   595  #endif
   596  
   597  
   598  #if defined __USE_MISC \
   599      || (defined __USE_XOPEN_EXTENDED && !defined __USE_XOPEN2K8)
   600  /* Generate a unique temporary file name from TEMPLATE.
   601     The last six characters of TEMPLATE must be "XXXXXX";
   602     they are replaced with a string that makes the file name unique.
   603     Always returns TEMPLATE, it's either a temporary file name or a null
   604     string if it cannot get a unique file name.  */
   605  extern char *mktemp (char *__template) __THROW __nonnull ((1));
   606  #endif
   607  
   608  #if defined __USE_MISC || defined __USE_XOPEN_EXTENDED \
   609      || defined __USE_XOPEN2K8
   610  /* Generate a unique temporary file name from TEMPLATE.
   611     The last six characters of TEMPLATE must be "XXXXXX";
   612     they are replaced with a string that makes the filename unique.
   613     Returns a file descriptor open on the file for reading and writing,
   614     or -1 if it cannot create a uniquely-named file.
   615  
   616     This function is a possible cancellation point and therefore not
   617     marked with __THROW.  */
   618  # ifndef __USE_FILE_OFFSET64
   619  extern int mkstemp (char *__template) __nonnull ((1)) __wur;
   620  # else
   621  #  ifdef __REDIRECT
   622  extern int __REDIRECT (mkstemp, (char *__template), mkstemp64)
   623       __nonnull ((1)) __wur;
   624  #  else
   625  #   define mkstemp mkstemp64
   626  #  endif
   627  # endif
   628  # ifdef __USE_LARGEFILE64
   629  extern int mkstemp64 (char *__template) __nonnull ((1)) __wur;
   630  # endif
   631  #endif
   632  
   633  #ifdef __USE_MISC
   634  /* Similar to mkstemp, but the template can have a suffix after the
   635     XXXXXX.  The length of the suffix is specified in the second
   636     parameter.
   637  
   638     This function is a possible cancellation point and therefore not
   639     marked with __THROW.  */
   640  # ifndef __USE_FILE_OFFSET64
   641  extern int mkstemps (char *__template, int __suffixlen) __nonnull ((1))
         __wur;
   642  # else
   643  #  ifdef __REDIRECT
   644  extern int __REDIRECT (mkstemps, (char *__template, int __suffixlen),
   645                         mkstemps64) __nonnull ((1)) __wur;
   646  #  else
   647  #   define mkstemps mkstemps64
   648  #  endif
   649  # endif
   650  # ifdef __USE_LARGEFILE64
   651  extern int mkstemps64 (char *__template, int __suffixlen)
   652       __nonnull ((1)) __wur;
   653  # endif
   654  #endif
   655  
   656  #if defined __USE_BSD || defined __USE_XOPEN2K8
   657  /* Create a unique temporary directory from TEMPLATE.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   658     The last six characters of TEMPLATE must be "XXXXXX";
   659     they are replaced with a string that makes the directory name unique
        .
   660     Returns TEMPLATE, or a null pointer if it cannot get a unique name.
   661     The directory is created mode 700.  */
   662  extern char *mkdtemp (char *__template) __THROW __nonnull ((1)) __wur;
   663  #endif
   664  
   665  #ifdef __USE_GNU
   666  /* Generate a unique temporary file name from TEMPLATE similar to
   667     mkstemp.  But allow the caller to pass additional flags which are
   668     used in the open call to create the file..
   669  
   670     This function is a possible cancellation point and therefore not
   671     marked with __THROW.  */
   672  # ifndef __USE_FILE_OFFSET64
   673  extern int mkostemp (char *__template, int __flags) __nonnull ((1)) __w
        ur;
   674  # else
   675  #  ifdef __REDIRECT
   676  extern int __REDIRECT (mkostemp, (char *__template, int __flags), mkost
        emp64)
   677       __nonnull ((1)) __wur;
   678  #  else
   679  #   define mkostemp mkostemp64
   680  #  endif
   681  # endif
   682  # ifdef __USE_LARGEFILE64
   683  extern int mkostemp64 (char *__template, int __flags) __nonnull ((1)) _
        _wur;
   684  # endif
   685  
   686  /* Similar to mkostemp, but the template can have a suffix after the
   687     XXXXXX.  The length of the suffix is specified in the second
   688     parameter.
   689  
   690     This function is a possible cancellation point and therefore not
   691     marked with __THROW.  */
   692  # ifndef __USE_FILE_OFFSET64
   693  extern int mkostemps (char *__template, int __suffixlen, int __flags)
   694       __nonnull ((1)) __wur;
   695  # else
   696  #  ifdef __REDIRECT
   697  extern int __REDIRECT (mkostemps, (char *__template, int __suffixlen,
   698                                     int __flags), mkostemps64)
   699       __nonnull ((1)) __wur;
   700  #  else
   701  #   define mkostemps mkostemps64
   702  #  endif
   703  # endif
   704  # ifdef __USE_LARGEFILE64
   705  extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
   706       __nonnull ((1)) __wur;
   707  # endif
   708  #endif
   709  
   710  
   711  __BEGIN_NAMESPACE_STD
   712  /* Execute the given line as a shell command.
   713  
   714     This function is a cancellation point and therefore not marked with
   715     __THROW.  */
   716  extern int system (const char *__command) __wur;
   717  __END_NAMESPACE_STD
   718  
   719  
   720  #ifdef  __USE_GNU
   721  /* Return a malloc'd string containing the canonical absolute name of t
        he
   722     existing named file.  */
   723  extern char *canonicalize_file_name (const char *__name)
   724       __THROW __nonnull ((1)) __wur;
   725  #endif
   726  
   727  #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   728  /* Return the canonical absolute name of file NAME.  If RESOLVED is
   729     null, the result is malloc'd; otherwise, if the canonical name is
   730     PATH_MAX chars or more, returns null with `errno' set to
   731     ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,
   732     returns the name in RESOLVED.  */
   733  extern char *realpath (const char *__restrict __name,
   734                         char *__restrict __resolved) __THROW __wur;
   735  #endif
   736  
   737  
   738  /* Shorthand for type of comparison functions.  */
   739  #ifndef __COMPAR_FN_T
   740  # define __COMPAR_FN_T
   741  typedef int (*__compar_fn_t) (const void *, const void *);
   742  
   743  # ifdef __USE_GNU
   744  typedef __compar_fn_t comparison_fn_t;
   745  # endif
   746  #endif
   747  #ifdef __USE_GNU
   748  typedef int (*__compar_d_fn_t) (const void *, const void *, void *);
   749  #endif
   750  
   751  __BEGIN_NAMESPACE_STD
   752  /* Do a binary search for KEY in BASE, which consists of NMEMB elements
   753     of SIZE bytes each, using COMPAR to perform the comparisons.  */
   754  extern void *bsearch (const void *__key, const void *__base,
   755                        size_t __nmemb, size_t __size, __compar_fn_t __co
        mpar)
   756       __nonnull ((1, 2, 5)) __wur;
   757  
   758  /* Sort NMEMB elements of BASE, of SIZE bytes each,
   759     using COMPAR to perform the comparisons.  */
   760  extern void qsort (void *__base, size_t __nmemb, size_t __size,
   761                     __compar_fn_t __compar) __nonnull ((1, 4));
   762  #ifdef __USE_GNU
   763  extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
   764                       __compar_d_fn_t __compar, void *__arg)
   765    __nonnull ((1, 4));
   766  #endif
   767  
   768  
   769  /* Return the absolute value of X.  */
   770  extern int abs (int __x) __THROW __attribute__ ((__const__)) __wur;
   771  extern long int labs (long int __x) __THROW __attribute__ ((__const__))
         __wur;
   772  __END_NAMESPACE_STD
   773  
   774  #ifdef __USE_ISOC99
   775  __extension__ extern long long int llabs (long long int __x)
   776       __THROW __attribute__ ((__const__)) __wur;
   777  #endif
   778  
   779  
   780  __BEGIN_NAMESPACE_STD
   781  /* Return the `div_t', `ldiv_t' or `lldiv_t' representation
   782     of the value of NUMER over DENOM. */
   783  /* GCC may have built-ins for these someday.  */
   784  extern div_t div (int __numer, int __denom)
   785       __THROW __attribute__ ((__const__)) __wur;
   786  extern ldiv_t ldiv (long int __numer, long int __denom)
   787       __THROW __attribute__ ((__const__)) __wur;
   788  __END_NAMESPACE_STD
   789  
   790  #ifdef __USE_ISOC99
   791  __BEGIN_NAMESPACE_C99
   792  __extension__ extern lldiv_t lldiv (long long int __numer,
   793                                      long long int __denom)
   794       __THROW __attribute__ ((__const__)) __wur;
   795  __END_NAMESPACE_C99
   796  #endif
   797  
   798  
   799  #if (defined __USE_XOPEN_EXTENDED && !defined __USE_XOPEN2K8) \
   800      || defined __USE_SVID

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   801  /* Convert floating point numbers to strings.  The returned values are
   802     valid only until another call to the same function.  */
   803  
   804  /* Convert VALUE to a string with NDIGIT digits and return a pointer to
   805     this.  Set *DECPT with the position of the decimal character and *SI
        GN
   806     with the sign of the number.  */
   807  extern char *ecvt (double __value, int __ndigit, int *__restrict __decp
        t,
   808                     int *__restrict __sign) __THROW __nonnull ((3, 4)) _
        _wur;
   809  
   810  /* Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DE
        CPT
   811     with the position of the decimal character and *SIGN with the sign o
        f
   812     the number.  */
   813  extern char *fcvt (double __value, int __ndigit, int *__restrict __decp
        t,
   814                     int *__restrict __sign) __THROW __nonnull ((3, 4)) _
        _wur;
   815  
   816  /* If possible convert VALUE to a string with NDIGIT significant digits
        .
   817     Otherwise use exponential representation.  The resulting string will
   818     be written to BUF.  */
   819  extern char *gcvt (double __value, int __ndigit, char *__buf)
   820       __THROW __nonnull ((3)) __wur;
   821  
   822  
   823  # ifdef __USE_MISC
   824  /* Long double versions of above functions.  */
   825  extern char *qecvt (long double __value, int __ndigit,
   826                      int *__restrict __decpt, int *__restrict __sign)
   827       __THROW __nonnull ((3, 4)) __wur;
   828  extern char *qfcvt (long double __value, int __ndigit,
   829                      int *__restrict __decpt, int *__restrict __sign)
   830       __THROW __nonnull ((3, 4)) __wur;
   831  extern char *qgcvt (long double __value, int __ndigit, char *__buf)
   832       __THROW __nonnull ((3)) __wur;
   833  
   834  
   835  /* Reentrant version of the functions above which provide their own
   836     buffers.  */
   837  extern int ecvt_r (double __value, int __ndigit, int *__restrict __decp
        t,
   838                     int *__restrict __sign, char *__restrict __buf,
   839                     size_t __len) __THROW __nonnull ((3, 4, 5));
   840  extern int fcvt_r (double __value, int __ndigit, int *__restrict __decp
        t,
   841                     int *__restrict __sign, char *__restrict __buf,
   842                     size_t __len) __THROW __nonnull ((3, 4, 5));
   843  
   844  extern int qecvt_r (long double __value, int __ndigit,
   845                      int *__restrict __decpt, int *__restrict __sign,
   846                      char *__restrict __buf, size_t __len)
   847       __THROW __nonnull ((3, 4, 5));
   848  extern int qfcvt_r (long double __value, int __ndigit,
   849                      int *__restrict __decpt, int *__restrict __sign,
   850                      char *__restrict __buf, size_t __len)
   851       __THROW __nonnull ((3, 4, 5));
   852  # endif /* misc */
   853  #endif  /* use MISC || use X/Open Unix */
   854  
   855  
   856  __BEGIN_NAMESPACE_STD
   857  /* Return the length of the multibyte character
   858     in S, which is no longer than N.  */
   859  extern int mblen (const char *__s, size_t __n) __THROW __wur;
   860  /* Return the length of the given multibyte character,
   861     putting its `wchar_t' representation in *PWC.  */
   862  extern int mbtowc (wchar_t *__restrict __pwc,
   863                     const char *__restrict __s, size_t __n) __THROW __wu
        r;
   864  /* Put the multibyte character represented

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   865     by WCHAR in S, returning its length.  */
   866  extern int wctomb (char *__s, wchar_t __wchar) __THROW __wur;
   867  
   868  
   869  /* Convert a multibyte string to a wide char string.  */
   870  extern size_t mbstowcs (wchar_t *__restrict  __pwcs,
   871                          const char *__restrict __s, size_t __n) __THROW
        ;
   872  /* Convert a wide char string to multibyte string.  */
   873  extern size_t wcstombs (char *__restrict __s,
   874                          const wchar_t *__restrict __pwcs, size_t __n)
   875       __THROW;
   876  __END_NAMESPACE_STD
   877  
   878  
   879  #ifdef __USE_SVID
   880  /* Determine whether the string value of RESPONSE matches the affirmati
        on
   881     or negative response expression as specified by the LC_MESSAGES cate
        gory
   882     in the program's current locale.  Returns 1 if affirmative, 0 if
   883     negative, and -1 if not matching.  */
   884  extern int rpmatch (const char *__response) __THROW __nonnull ((1)) __w
        ur;
   885  #endif
   886  
   887  
   888  #if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8
   889  /* Parse comma separated suboption from *OPTIONP and match against
   890     strings in TOKENS.  If found return index and set *VALUEP to
   891     optional value introduced by an equal sign.  If the suboption is
   892     not part of TOKENS return in *VALUEP beginning of unknown
   893     suboption.  On exit *OPTIONP is set to the beginning of the next
   894     token or at the terminating NUL character.  */
   895  extern int getsubopt (char **__restrict __optionp,
   896                        char *const *__restrict __tokens,
   897                        char **__restrict __valuep)
   898       __THROW __nonnull ((1, 2, 3)) __wur;
   899  #endif
   900  
   901  
   902  #ifdef __USE_XOPEN
   903  /* Setup DES tables according KEY.  */
   904  extern void setkey (const char *__key) __THROW __nonnull ((1));
   905  #endif
   906  
   907  
   908  /* X/Open pseudo terminal handling.  */
   909  
   910  #ifdef __USE_XOPEN2KXSI
   911  /* Return a master pseudo-terminal handle.  */
   912  extern int posix_openpt (int __oflag) __wur;
   913  #endif
   914  
   915  #ifdef __USE_XOPEN
   916  /* The next four functions all take a master pseudo-tty fd and
   917     perform an operation on the associated slave:  */
   918  
   919  /* Chown the slave to the calling user.  */
   920  extern int grantpt (int __fd) __THROW;
   921  
   922  /* Release an internal lock so the slave can be opened.
   923     Call after grantpt().  */
   924  extern int unlockpt (int __fd) __THROW;
   925  
   926  /* Return the pathname of the pseudo terminal slave assoicated with
   927     the master FD is open on, or NULL on errors.
   928     The returned storage is good until the next call to this function.  
        */
   929  extern char *ptsname (int __fd) __THROW __wur;
   930  #endif
   931  
   932  #ifdef __USE_GNU
   933  /* Store at most BUFLEN characters of the pathname of the slave pseudo
   934     terminal associated with the master FD is open on in BUF.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   935     Return 0 on success, otherwise an error number.  */
   936  extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
   937       __THROW __nonnull ((2));
   938  
   939  /* Open a master pseudo terminal and return its file descriptor.  */
   940  extern int getpt (void);
   941  #endif
   942  
   943  #ifdef __USE_BSD
   944  /* Put the 1 minute, 5 minute and 15 minute load averages into the firs
        t
   945     NELEM elements of LOADAVG.  Return the number written (never more th
        an
   946     three, but may be less than NELEM), or -1 if an error occurred.  */
   947  extern int getloadavg (double __loadavg[], int __nelem)
   948       __THROW __nonnull ((1));
   949  #endif
   950  
Open file: /usr/include/bits/stdlib-float.h
     1  /* Floating-point inline functions for stdlib.h.
     2     Copyright (C) 2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _STDLIB_H
    20  # error "Never use <bits/stdlib-float.h> directly; include <stdlib.h> i
        nstead."
    21  #endif
    22  
    23  #ifdef __USE_EXTERN_INLINES
    24  __BEGIN_NAMESPACE_STD
    25  __extern_inline double
    26  __NTH (atof (const char *__nptr))
    27  {
    28    return strtod (__nptr, (char **) NULL);
    29  }
    30  __END_NAMESPACE_STD
    31  #endif /* Optimizing and Inlining.  */
Close file: /usr/include/bits/stdlib-float.h
   951  #include <bits/stdlib-float.h>
   952  
   953  /* Define some macros helping to catch buffer overflows.  */
   954  #if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
   955  # include <bits/stdlib.h>
   956  #endif
   957  #ifdef __LDBL_COMPAT
   958  # include <bits/stdlib-ldbl.h>
   959  #endif
   960  
   961  #endif /* don't just need malloc and calloc */
   962  #undef __need_malloc_and_calloc
   963  
   964  __END_DECLS
   965  
   966  #endif /* stdlib.h  */
Close file: /usr/include/stdlib.h
     7  #include <stdlib.h>
Open file: /usr/include/string.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      ISO C99 Standard: 7.21 String handling  <string.h>
    20   */
    21  
    22  #ifndef _STRING_H
    23  #define _STRING_H       1
    24  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.
    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__
   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */
   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif
   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2
   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  
   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    25  #include <features.h>
    26  
    27  __BEGIN_DECLS
    28  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    29  /* Get size_t and NULL from <stddef.h>.  */
    30  #define __need_size_t
    31  #define __need_NULL
Open file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
     1  /* Copyright (C) 1989-2013 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \
    31      || defined(__need_wint_t)
    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \
    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  
    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.
    47     There's no way to win with the other order!  Sun lossage.  */
    48  
    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif
    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.
   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t
   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif
   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t
   115  #endif
   116  
   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually
   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  
   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF
   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #define _PTRDIFF_T
   137  #define _T_PTRDIFF_
   138  #define _T_PTRDIFF

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   139  #define __PTRDIFF_T
   140  #define _PTRDIFF_T_
   141  #define _BSD_PTRDIFF_T_
   142  #define ___int_ptrdiff_t_h
   143  #define _GCC_PTRDIFF_T
   144  #ifndef __PTRDIFF_TYPE__
   145  #define __PTRDIFF_TYPE__ long int
   146  #endif
   147  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   148  #endif /* _GCC_PTRDIFF_T */
   149  #endif /* ___int_ptrdiff_t_h */
   150  #endif /* _BSD_PTRDIFF_T_ */
   151  #endif /* _PTRDIFF_T_ */
   152  #endif /* __PTRDIFF_T */
   153  #endif /* _T_PTRDIFF */
   154  #endif /* _T_PTRDIFF_ */
   155  #endif /* _PTRDIFF_T */
   156  
   157  /* If this symbol has done its job, get rid of it.  */
   158  #undef  __need_ptrdiff_t
   159  
   160  #endif /* _STDDEF_H or __need_ptrdiff_t.  */
   161  
   162  /* Unsigned type of `sizeof' something.  */
   163  
   164  /* Define this type if we are doing the whole job,
   165     or if we want this type in particular.  */
   166  #if defined (_STDDEF_H) || defined (__need_size_t)
   167  #ifndef __size_t__      /* BeOS */
   168  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   169  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */
   170  #ifndef _SYS_SIZE_T_H
   171  #ifndef _T_SIZE_
   172  #ifndef _T_SIZE
   173  #ifndef __SIZE_T
   174  #ifndef _SIZE_T_
   175  #ifndef _BSD_SIZE_T_
   176  #ifndef _SIZE_T_DEFINED_
   177  #ifndef _SIZE_T_DEFINED
   178  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   179  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   180  #ifndef ___int_size_t_h
   181  #ifndef _GCC_SIZE_T
   182  #ifndef _SIZET_
   183  #ifndef __size_t
   184  #define __size_t__      /* BeOS */
   185  #define __SIZE_T__      /* Cray Unicos/Mk */
   186  #define _SIZE_T
   187  #define _SYS_SIZE_T_H
   188  #define _T_SIZE_
   189  #define _T_SIZE
   190  #define __SIZE_T
   191  #define _SIZE_T_
   192  #define _BSD_SIZE_T_
   193  #define _SIZE_T_DEFINED_
   194  #define _SIZE_T_DEFINED
   195  #define _BSD_SIZE_T_DEFINED_    /* Darwin */
   196  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   197  #define ___int_size_t_h
   198  #define _GCC_SIZE_T
   199  #define _SIZET_
   200  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   201    || defined(__FreeBSD_kernel__)
   202  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   203  #elif defined (__VMS__)
   204  /* __size_t is also a typedef on VMS.  */
   205  #else
   206  #define __size_t
   207  #endif
   208  #ifndef __SIZE_TYPE__
   209  #define __SIZE_TYPE__ long unsigned int
   210  #endif
   211  #if !(defined (__GNUG__) && defined (size_t))
   212  typedef __SIZE_TYPE__ size_t;
   213  #ifdef __BEOS__

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   214  typedef long ssize_t;
   215  #endif /* __BEOS__ */
   216  #endif /* !(defined (__GNUG__) && defined (size_t)) */
   217  #endif /* __size_t */
   218  #endif /* _SIZET_ */
   219  #endif /* _GCC_SIZE_T */
   220  #endif /* ___int_size_t_h */
   221  #endif /* _SIZE_T_DECLARED */
   222  #endif /* _BSD_SIZE_T_DEFINED_ */
   223  #endif /* _SIZE_T_DEFINED */
   224  #endif /* _SIZE_T_DEFINED_ */
   225  #endif /* _BSD_SIZE_T_ */
   226  #endif /* _SIZE_T_ */
   227  #endif /* __SIZE_T */
   228  #endif /* _T_SIZE */
   229  #endif /* _T_SIZE_ */
   230  #endif /* _SYS_SIZE_T_H */
   231  #endif /* _SIZE_T */
   232  #endif /* __SIZE_T__ */
   233  #endif /* __size_t__ */
   234  #undef  __need_size_t
   235  #endif /* _STDDEF_H or __need_size_t.  */
   236  
   237  
   238  /* Wide character type.
   239     Locale-writers should change this as necessary to
   240     be big enough to hold unique values not between 0 and 127,
   241     and not (wchar_t) -1, for each defined multibyte character.  */
   242  
   243  /* Define this type if we are doing the whole job,
   244     or if we want this type in particular.  */
   245  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   246  #ifndef __wchar_t__     /* BeOS */
   247  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   248  #ifndef _WCHAR_T
   249  #ifndef _T_WCHAR_
   250  #ifndef _T_WCHAR
   251  #ifndef __WCHAR_T
   252  #ifndef _WCHAR_T_
   253  #ifndef _BSD_WCHAR_T_
   254  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
   255  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   256  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   257  #ifndef _WCHAR_T_DEFINED_
   258  #ifndef _WCHAR_T_DEFINED
   259  #ifndef _WCHAR_T_H
   260  #ifndef ___int_wchar_t_h
   261  #ifndef __INT_WCHAR_T_H
   262  #ifndef _GCC_WCHAR_T
   263  #define __wchar_t__     /* BeOS */
   264  #define __WCHAR_T__     /* Cray Unicos/Mk */
   265  #define _WCHAR_T
   266  #define _T_WCHAR_
   267  #define _T_WCHAR
   268  #define __WCHAR_T
   269  #define _WCHAR_T_
   270  #define _BSD_WCHAR_T_
   271  #define _WCHAR_T_DEFINED_
   272  #define _WCHAR_T_DEFINED
   273  #define _WCHAR_T_H
   274  #define ___int_wchar_t_h
   275  #define __INT_WCHAR_T_H
   276  #define _GCC_WCHAR_T
   277  #define _WCHAR_T_DECLARED
   278  
   279  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   280     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   281     symbols in the _FOO_T_ family, stays defined even after its
   282     corresponding type is defined).  If we define wchar_t, then we
   283     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   284     we undef _WCHAR_T_, then we must also define rune_t, since 
   285     headers like runetype.h assume that if machine/ansi.h is included,
   286     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   287     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   288     the same type." */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   289  #ifdef _BSD_WCHAR_T_
   290  #undef _BSD_WCHAR_T_
   291  #ifdef _BSD_RUNE_T_
   292  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   293  typedef _BSD_RUNE_T_ rune_t;
   294  #define _BSD_WCHAR_T_DEFINED_
   295  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   296  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   297  /* Why is this file so hard to maintain properly?  In contrast to
   298     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   299     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   300     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   301  #undef _BSD_RUNE_T_
   302  #endif
   303  #endif
   304  #endif
   305  #endif
   306  /* FreeBSD 5 can't be handled well using "traditional" logic above
   307     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   308     rune_t in some cases... */
   309  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   310  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   311  #if __BSD_VISIBLE
   312  #ifndef _RUNE_T_DECLARED
   313  typedef __rune_t        rune_t;
   314  #define _RUNE_T_DECLARED
   315  #endif
   316  #endif
   317  #endif
   318  #endif
   319  
   320  #ifndef __WCHAR_TYPE__
   321  #define __WCHAR_TYPE__ int
   322  #endif
   323  #ifndef __cplusplus
   324  typedef __WCHAR_TYPE__ wchar_t;
   325  #endif
   326  #endif
   327  #endif
   328  #endif
   329  #endif
   330  #endif
   331  #endif
   332  #endif /* _WCHAR_T_DECLARED */
   333  #endif /* _BSD_RUNE_T_DEFINED_ */
   334  #endif
   335  #endif
   336  #endif
   337  #endif
   338  #endif
   339  #endif
   340  #endif
   341  #endif /* __WCHAR_T__ */
   342  #endif /* __wchar_t__ */
   343  #undef  __need_wchar_t
   344  #endif /* _STDDEF_H or __need_wchar_t.  */
   345  
   346  #if defined (__need_wint_t)
   347  #ifndef _WINT_T
   348  #define _WINT_T
   349  
   350  #ifndef __WINT_TYPE__
   351  #define __WINT_TYPE__ unsigned int
   352  #endif
   353  typedef __WINT_TYPE__ wint_t;
   354  #endif
   355  #undef __need_wint_t
   356  #endif
   357  
   358  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   359      are already defined.  */
   360  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   361  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   362  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)
   363  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   364      are probably typos and should be removed before 2.8 is released.  *
        /
   365  #ifdef _GCC_PTRDIFF_T_
   366  #undef _PTRDIFF_T_
   367  #undef _BSD_PTRDIFF_T_
   368  #endif
   369  #ifdef _GCC_SIZE_T_
   370  #undef _SIZE_T_
   371  #undef _BSD_SIZE_T_
   372  #endif
   373  #ifdef _GCC_WCHAR_T_
   374  #undef _WCHAR_T_
   375  #undef _BSD_WCHAR_T_
   376  #endif
   377  /*  The following ones are the real ones.  */
   378  #ifdef _GCC_PTRDIFF_T
   379  #undef _PTRDIFF_T_
   380  #undef _BSD_PTRDIFF_T_
   381  #endif
   382  #ifdef _GCC_SIZE_T
   383  #undef _SIZE_T_
   384  #undef _BSD_SIZE_T_
   385  #endif
   386  #ifdef _GCC_WCHAR_T
   387  #undef _WCHAR_T_
   388  #undef _BSD_WCHAR_T_
   389  #endif
   390  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */
   391  
   392  #endif /* __sys_stdtypes_h */
   393  
   394  /* A null pointer constant.  */
   395  
   396  #if defined (_STDDEF_H) || defined (__need_NULL)
   397  #undef NULL             /* in case <stdio.h> has defined it. */
   398  #ifdef __GNUG__
   399  #define NULL __null
   400  #else   /* G++ */
   401  #ifndef __cplusplus
   402  #define NULL ((void *)0)
   403  #else   /* C++ */
   404  #define NULL 0
   405  #endif  /* C++ */
   406  #endif  /* G++ */
   407  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   408  #undef  __need_NULL
   409  
   410  #ifdef _STDDEF_H
   411  
   412  /* Offset of member MEMBER in a struct of type TYPE. */
   413  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   414  
   415  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   416    || (defined(__cplusplus) && __cplusplus >= 201103L)
   417  #ifndef _GCC_MAX_ALIGN_T
   418  #define _GCC_MAX_ALIGN_T
   419  /* Type whose alignment is supported in every context and is at least
   420     as great as that of any standard type not using alignment
   421     specifiers.  */
   422  typedef struct {
   423    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));
   424    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   425  } max_align_t;
   426  #endif
   427  #endif /* C11 or C++11.  */
   428  
   429  #if defined(__cplusplus) && __cplusplus >= 201103L

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   430  #ifndef _GXX_NULLPTR_T
   431  #define _GXX_NULLPTR_T
   432    typedef decltype(nullptr) nullptr_t;
   433  #endif
   434  #endif /* C++11.  */
   435  
   436  #endif /* _STDDEF_H was defined this time */
   437  
   438  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
   439            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
    32  #include <stddef.h>
    33  
    34  /* Tell the caller that we provide correct C++ prototypes.  */
    35  #if defined __cplusplus && __GNUC_PREREQ (4, 4)
    36  # define __CORRECT_ISO_CPP_STRING_H_PROTO
    37  #endif
    38  
    39  
    40  __BEGIN_NAMESPACE_STD
    41  /* Copy N bytes of SRC to DEST.  */
    42  extern void *memcpy (void *__restrict __dest, const void *__restrict __
        src,
    43                       size_t __n) __THROW __nonnull ((1, 2));
    44  /* Copy N bytes of SRC to DEST, guaranteeing
    45     correct behavior for overlapping strings.  */
    46  extern void *memmove (void *__dest, const void *__src, size_t __n)
    47       __THROW __nonnull ((1, 2));
    48  __END_NAMESPACE_STD
    49  
    50  /* Copy no more than N bytes of SRC to DEST, stopping when C is found.
    51     Return the position in DEST one byte past where C was copied,
    52     or NULL if C was not found in the first N bytes of SRC.  */
    53  #if defined __USE_SVID || defined __USE_BSD || defined __USE_XOPEN
    54  extern void *memccpy (void *__restrict __dest, const void *__restrict _
        _src,
    55                        int __c, size_t __n)
    56       __THROW __nonnull ((1, 2));
    57  #endif /* SVID.  */
    58  
    59  
    60  __BEGIN_NAMESPACE_STD
    61  /* Set N bytes of S to C.  */
    62  extern void *memset (void *__s, int __c, size_t __n) __THROW __nonnull 
        ((1));
    63  
    64  /* Compare N bytes of S1 and S2.  */
    65  extern int memcmp (const void *__s1, const void *__s2, size_t __n)
    66       __THROW __attribute_pure__ __nonnull ((1, 2));
    67  
    68  /* Search N bytes of S for C.  */
    69  #ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
    70  extern "C++"
    71  {
    72  extern void *memchr (void *__s, int __c, size_t __n)
    73        __THROW __asm ("memchr") __attribute_pure__ __nonnull ((1));
    74  extern const void *memchr (const void *__s, int __c, size_t __n)
    75        __THROW __asm ("memchr") __attribute_pure__ __nonnull ((1));
    76  
    77  # ifdef __OPTIMIZE__
    78  __extern_always_inline void *
    79  memchr (void *__s, int __c, size_t __n) __THROW
    80  {
    81    return __builtin_memchr (__s, __c, __n);
    82  }
    83  
    84  __extern_always_inline const void *
    85  memchr (const void *__s, int __c, size_t __n) __THROW
    86  {
    87    return __builtin_memchr (__s, __c, __n);
    88  }
    89  # endif
    90  }
    91  #else
    92  extern void *memchr (const void *__s, int __c, size_t __n)

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    93        __THROW __attribute_pure__ __nonnull ((1));
    94  #endif
    95  __END_NAMESPACE_STD
    96  
    97  #ifdef __USE_GNU
    98  /* Search in S for C.  This is similar to `memchr' but there is no
    99     length limit.  */
   100  # ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
   101  extern "C++" void *rawmemchr (void *__s, int __c)
   102       __THROW __asm ("rawmemchr") __attribute_pure__ __nonnull ((1));
   103  extern "C++" const void *rawmemchr (const void *__s, int __c)
   104       __THROW __asm ("rawmemchr") __attribute_pure__ __nonnull ((1));
   105  # else
   106  extern void *rawmemchr (const void *__s, int __c)
   107       __THROW __attribute_pure__ __nonnull ((1));
   108  # endif
   109  
   110  /* Search N bytes of S for the final occurrence of C.  */
   111  # ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
   112  extern "C++" void *memrchr (void *__s, int __c, size_t __n)
   113        __THROW __asm ("memrchr") __attribute_pure__ __nonnull ((1));
   114  extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
   115        __THROW __asm ("memrchr") __attribute_pure__ __nonnull ((1));
   116  # else
   117  extern void *memrchr (const void *__s, int __c, size_t __n)
   118        __THROW __attribute_pure__ __nonnull ((1));
   119  # endif
   120  #endif
   121  
   122  
   123  __BEGIN_NAMESPACE_STD
   124  /* Copy SRC to DEST.  */
   125  extern char *strcpy (char *__restrict __dest, const char *__restrict __
        src)
   126       __THROW __nonnull ((1, 2));
   127  /* Copy no more than N characters of SRC to DEST.  */
   128  extern char *strncpy (char *__restrict __dest,
   129                        const char *__restrict __src, size_t __n)
   130       __THROW __nonnull ((1, 2));
   131  
   132  /* Append SRC onto DEST.  */
   133  extern char *strcat (char *__restrict __dest, const char *__restrict __
        src)
   134       __THROW __nonnull ((1, 2));
   135  /* Append no more than N characters from SRC onto DEST.  */
   136  extern char *strncat (char *__restrict __dest, const char *__restrict _
        _src,
   137                        size_t __n) __THROW __nonnull ((1, 2));
   138  
   139  /* Compare S1 and S2.  */
   140  extern int strcmp (const char *__s1, const char *__s2)
   141       __THROW __attribute_pure__ __nonnull ((1, 2));
   142  /* Compare N characters of S1 and S2.  */
   143  extern int strncmp (const char *__s1, const char *__s2, size_t __n)
   144       __THROW __attribute_pure__ __nonnull ((1, 2));
   145  
   146  /* Compare the collated forms of S1 and S2.  */
   147  extern int strcoll (const char *__s1, const char *__s2)
   148       __THROW __attribute_pure__ __nonnull ((1, 2));
   149  /* Put a transformation of SRC into no more than N bytes of DEST.  */
   150  extern size_t strxfrm (char *__restrict __dest,
   151                         const char *__restrict __src, size_t __n)
   152       __THROW __nonnull ((2));
   153  __END_NAMESPACE_STD
   154  
   155  #ifdef __USE_XOPEN2K8
   156  /* The following functions are equivalent to the both above but they
   157     take the locale they use for the collation as an extra argument.
   158     This is not standardsized but something like will come.  */
Open file: /usr/include/xlocale.h
     1  /* Definition of locale datatype.
     2     Copyright (C) 1997,2000,2002,2009,2010 Free Software Foundation, Inc
        .
     3     This file is part of the GNU C Library.
     4     Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     5  
     6     The GNU C Library is free software; you can redistribute it and/or
     7     modify it under the terms of the GNU Lesser General Public
     8     License as published by the Free Software Foundation; either
     9     version 2.1 of the License, or (at your option) any later version.
    10  
    11     The GNU C Library is distributed in the hope that it will be useful,
    12     but WITHOUT ANY WARRANTY; without even the implied warranty of
    13     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    14     Lesser General Public License for more details.
    15  
    16     You should have received a copy of the GNU Lesser General Public
    17     License along with the GNU C Library; if not, see
    18     <http://www.gnu.org/licenses/>.  */
    19  
    20  #ifndef _XLOCALE_H
    21  #define _XLOCALE_H      1
    22  
    23  /* Structure for reentrant locale using functions.  This is an
    24     (almost) opaque type for the user level programs.  The file and
    25     this data structure is not standardized.  Don't rely on it.  It can
    26     go away without warning.  */
    27  typedef struct __locale_struct
    28  {
    29    /* Note: LC_ALL is not a valid index into this array.  */
    30    struct __locale_data *__locales[13]; /* 13 = __LC_LAST. */
    31  
    32    /* To increase the speed of this solution we add some special members
        .  */
    33    const unsigned short int *__ctype_b;
    34    const int *__ctype_tolower;
    35    const int *__ctype_toupper;
    36  
    37    /* Note: LC_ALL is not a valid index into this array.  */
    38    const char *__names[13];
    39  } *__locale_t;
    40  
    41  /* POSIX 2008 makes locale_t official.  */
    42  typedef __locale_t locale_t;
    43  
    44  #endif /* xlocale.h */
Close file: /usr/include/xlocale.h
   159  # include <xlocale.h>
   160  
   161  /* Compare the collated forms of S1 and S2 using rules from L.  */
   162  extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __
        l)
   163       __THROW __attribute_pure__ __nonnull ((1, 2, 3));
   164  /* Put a transformation of SRC into no more than N bytes of DEST.  */
   165  extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
   166                           __locale_t __l) __THROW __nonnull ((2, 4));
   167  #endif
   168  
   169  #if defined __USE_SVID || defined __USE_BSD || defined __USE_XOPEN_EXTE
        NDED \
   170      || defined __USE_XOPEN2K8
   171  /* Duplicate S, returning an identical malloc'd string.  */
   172  extern char *strdup (const char *__s)
   173       __THROW __attribute_malloc__ __nonnull ((1));
   174  #endif
   175  
   176  /* Return a malloc'd copy of at most N bytes of STRING.  The
   177     resultant string is terminated even if no null terminator
   178     appears before STRING[N].  */
   179  #if defined __USE_XOPEN2K8
   180  extern char *strndup (const char *__string, size_t __n)
   181       __THROW __attribute_malloc__ __nonnull ((1));
   182  #endif
   183  
   184  #if defined __USE_GNU && defined __GNUC__
   185  /* Duplicate S, returning an identical alloca'd string.  */
   186  # define strdupa(s)                                                     
              \
   187    (__extension__                                                        
              \

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   188      ({                                                                  
              \
   189        const char *__old = (s);                                          
              \
   190        size_t __len = strlen (__old) + 1;                                
              \
   191        char *__new = (char *) __builtin_alloca (__len);                  
              \
   192        (char *) memcpy (__new, __old, __len);                            
              \
   193      }))
   194  
   195  /* Return an alloca'd copy of at most N bytes of string.  */
   196  # define strndupa(s, n)                                                 
              \
   197    (__extension__                                                        
              \
   198      ({                                                                  
              \
   199        const char *__old = (s);                                          
              \
   200        size_t __len = strnlen (__old, (n));                              
              \
   201        char *__new = (char *) __builtin_alloca (__len + 1);              
              \
   202        __new[__len] = '\0';                                              
              \
   203        (char *) memcpy (__new, __old, __len);                            
              \
   204      }))
   205  #endif
   206  
   207  __BEGIN_NAMESPACE_STD
   208  /* Find the first occurrence of C in S.  */
   209  #ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
   210  extern "C++"
   211  {
   212  extern char *strchr (char *__s, int __c)
   213       __THROW __asm ("strchr") __attribute_pure__ __nonnull ((1));
   214  extern const char *strchr (const char *__s, int __c)
   215       __THROW __asm ("strchr") __attribute_pure__ __nonnull ((1));
   216  
   217  # ifdef __OPTIMIZE__
   218  __extern_always_inline char *
   219  strchr (char *__s, int __c) __THROW
   220  {
   221    return __builtin_strchr (__s, __c);
   222  }
   223  
   224  __extern_always_inline const char *
   225  strchr (const char *__s, int __c) __THROW
   226  {
   227    return __builtin_strchr (__s, __c);
   228  }
   229  # endif
   230  }
   231  #else
   232  extern char *strchr (const char *__s, int __c)
   233       __THROW __attribute_pure__ __nonnull ((1));
   234  #endif
   235  /* Find the last occurrence of C in S.  */
   236  #ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
   237  extern "C++"
   238  {
   239  extern char *strrchr (char *__s, int __c)
   240       __THROW __asm ("strrchr") __attribute_pure__ __nonnull ((1));
   241  extern const char *strrchr (const char *__s, int __c)
   242       __THROW __asm ("strrchr") __attribute_pure__ __nonnull ((1));
   243  
   244  # ifdef __OPTIMIZE__
   245  __extern_always_inline char *
   246  strrchr (char *__s, int __c) __THROW
   247  {
   248    return __builtin_strrchr (__s, __c);
   249  }

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   250  
   251  __extern_always_inline const char *
   252  strrchr (const char *__s, int __c) __THROW
   253  {
   254    return __builtin_strrchr (__s, __c);
   255  }
   256  # endif
   257  }
   258  #else
   259  extern char *strrchr (const char *__s, int __c)
   260       __THROW __attribute_pure__ __nonnull ((1));
   261  #endif
   262  __END_NAMESPACE_STD
   263  
   264  #ifdef __USE_GNU
   265  /* This function is similar to `strchr'.  But it returns a pointer to
   266     the closing NUL byte in case C is not found in S.  */
   267  # ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
   268  extern "C++" char *strchrnul (char *__s, int __c)
   269       __THROW __asm ("strchrnul") __attribute_pure__ __nonnull ((1));
   270  extern "C++" const char *strchrnul (const char *__s, int __c)
   271       __THROW __asm ("strchrnul") __attribute_pure__ __nonnull ((1));
   272  # else
   273  extern char *strchrnul (const char *__s, int __c)
   274       __THROW __attribute_pure__ __nonnull ((1));
   275  # endif
   276  #endif
   277  
   278  __BEGIN_NAMESPACE_STD
   279  /* Return the length of the initial segment of S which
   280     consists entirely of characters not in REJECT.  */
   281  extern size_t strcspn (const char *__s, const char *__reject)
   282       __THROW __attribute_pure__ __nonnull ((1, 2));
   283  /* Return the length of the initial segment of S which
   284     consists entirely of characters in ACCEPT.  */
   285  extern size_t strspn (const char *__s, const char *__accept)
   286       __THROW __attribute_pure__ __nonnull ((1, 2));
   287  /* Find the first occurrence in S of any character in ACCEPT.  */
   288  #ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
   289  extern "C++"
   290  {
   291  extern char *strpbrk (char *__s, const char *__accept)
   292       __THROW __asm ("strpbrk") __attribute_pure__ __nonnull ((1, 2));
   293  extern const char *strpbrk (const char *__s, const char *__accept)
   294       __THROW __asm ("strpbrk") __attribute_pure__ __nonnull ((1, 2));
   295  
   296  # ifdef __OPTIMIZE__
   297  __extern_always_inline char *
   298  strpbrk (char *__s, const char *__accept) __THROW
   299  {
   300    return __builtin_strpbrk (__s, __accept);
   301  }
   302  
   303  __extern_always_inline const char *
   304  strpbrk (const char *__s, const char *__accept) __THROW
   305  {
   306    return __builtin_strpbrk (__s, __accept);
   307  }
   308  # endif
   309  }
   310  #else
   311  extern char *strpbrk (const char *__s, const char *__accept)
   312       __THROW __attribute_pure__ __nonnull ((1, 2));
   313  #endif
   314  /* Find the first occurrence of NEEDLE in HAYSTACK.  */
   315  #ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
   316  extern "C++"
   317  {
   318  extern char *strstr (char *__haystack, const char *__needle)
   319       __THROW __asm ("strstr") __attribute_pure__ __nonnull ((1, 2));
   320  extern const char *strstr (const char *__haystack, const char *__needle
        )
   321       __THROW __asm ("strstr") __attribute_pure__ __nonnull ((1, 2));
   322  
   323  # ifdef __OPTIMIZE__

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   324  __extern_always_inline char *
   325  strstr (char *__haystack, const char *__needle) __THROW
   326  {
   327    return __builtin_strstr (__haystack, __needle);
   328  }
   329  
   330  __extern_always_inline const char *
   331  strstr (const char *__haystack, const char *__needle) __THROW
   332  {
   333    return __builtin_strstr (__haystack, __needle);
   334  }
   335  # endif
   336  }
   337  #else
   338  extern char *strstr (const char *__haystack, const char *__needle)
   339       __THROW __attribute_pure__ __nonnull ((1, 2));
   340  #endif
   341  
   342  
   343  /* Divide S into tokens separated by characters in DELIM.  */
   344  extern char *strtok (char *__restrict __s, const char *__restrict __del
        im)
   345       __THROW __nonnull ((2));
   346  __END_NAMESPACE_STD
   347  
   348  /* Divide S into tokens separated by characters in DELIM.  Information
   349     passed between calls are stored in SAVE_PTR.  */
   350  extern char *__strtok_r (char *__restrict __s,
   351                           const char *__restrict __delim,
   352                           char **__restrict __save_ptr)
   353       __THROW __nonnull ((2, 3));
   354  #if defined __USE_POSIX || defined __USE_MISC
   355  extern char *strtok_r (char *__restrict __s, const char *__restrict __d
        elim,
   356                         char **__restrict __save_ptr)
   357       __THROW __nonnull ((2, 3));
   358  #endif
   359  
   360  #ifdef __USE_GNU
   361  /* Similar to `strstr' but this function ignores the case of both strin
        gs.  */
   362  # ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
   363  extern "C++" char *strcasestr (char *__haystack, const char *__needle)
   364       __THROW __asm ("strcasestr") __attribute_pure__ __nonnull ((1, 2))
        ;
   365  extern "C++" const char *strcasestr (const char *__haystack,
   366                                       const char *__needle)
   367       __THROW __asm ("strcasestr") __attribute_pure__ __nonnull ((1, 2))
        ;
   368  # else
   369  extern char *strcasestr (const char *__haystack, const char *__needle)
   370       __THROW __attribute_pure__ __nonnull ((1, 2));
   371  # endif
   372  #endif
   373  
   374  #ifdef __USE_GNU
   375  /* Find the first occurrence of NEEDLE in HAYSTACK.
   376     NEEDLE is NEEDLELEN bytes long;
   377     HAYSTACK is HAYSTACKLEN bytes long.  */
   378  extern void *memmem (const void *__haystack, size_t __haystacklen,
   379                       const void *__needle, size_t __needlelen)
   380       __THROW __attribute_pure__ __nonnull ((1, 3));
   381  
   382  /* Copy N bytes of SRC to DEST, return pointer to bytes after the
   383     last written byte.  */
   384  extern void *__mempcpy (void *__restrict __dest,
   385                          const void *__restrict __src, size_t __n)
   386       __THROW __nonnull ((1, 2));
   387  extern void *mempcpy (void *__restrict __dest,
   388                        const void *__restrict __src, size_t __n)
   389       __THROW __nonnull ((1, 2));
   390  #endif
   391  
   392  
   393  __BEGIN_NAMESPACE_STD

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   394  /* Return the length of S.  */
   395  extern size_t strlen (const char *__s)
   396       __THROW __attribute_pure__ __nonnull ((1));
   397  __END_NAMESPACE_STD
   398  
   399  #ifdef  __USE_XOPEN2K8
   400  /* Find the length of STRING, but scan at most MAXLEN characters.
   401     If no '\0' terminator is found in that many characters, return MAXLE
        N.  */
   402  extern size_t strnlen (const char *__string, size_t __maxlen)
   403       __THROW __attribute_pure__ __nonnull ((1));
   404  #endif
   405  
   406  
   407  __BEGIN_NAMESPACE_STD
   408  /* Return a string describing the meaning of the `errno' code in ERRNUM
        .  */
   409  extern char *strerror (int __errnum) __THROW;
   410  __END_NAMESPACE_STD
   411  #if defined __USE_XOPEN2K || defined __USE_MISC
   412  /* Reentrant version of `strerror'.
   413     There are 2 flavors of `strerror_r', GNU which returns the string
   414     and may or may not use the supplied temporary buffer and POSIX one
   415     which fills the string into the buffer.
   416     To use the POSIX version, -D_XOPEN_SOURCE=600 or -D_POSIX_C_SOURCE=2
        00112L
   417     without -D_GNU_SOURCE is needed, otherwise the GNU version is
   418     preferred.  */
   419  # if defined __USE_XOPEN2K && !defined __USE_GNU
   420  /* Fill BUF with a string describing the meaning of the `errno' code in
   421     ERRNUM.  */
   422  #  ifdef __REDIRECT_NTH
   423  extern int __REDIRECT_NTH (strerror_r,
   424                             (int __errnum, char *__buf, size_t __buflen)
        ,
   425                             __xpg_strerror_r) __nonnull ((2));
   426  #  else
   427  extern int __xpg_strerror_r (int __errnum, char *__buf, size_t __buflen
        )
   428       __THROW __nonnull ((2));
   429  #   define strerror_r __xpg_strerror_r
   430  #  endif
   431  # else
   432  /* If a temporary buffer is required, at most BUFLEN bytes of BUF will 
        be
   433     used.  */
   434  extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
   435       __THROW __nonnull ((2)) __wur;
   436  # endif
   437  #endif
   438  
   439  #ifdef __USE_XOPEN2K8
   440  /* Translate error number to string according to the locale L.  */
   441  extern char *strerror_l (int __errnum, __locale_t __l) __THROW;
   442  #endif
   443  
   444  
   445  /* We define this function always since `bzero' is sometimes needed whe
        n
   446     the namespace rules does not allow this.  */
   447  extern void __bzero (void *__s, size_t __n) __THROW __nonnull ((1));
   448  
   449  #ifdef __USE_BSD
   450  /* Copy N bytes of SRC to DEST (like memmove, but args reversed).  */
   451  extern void bcopy (const void *__src, void *__dest, size_t __n)
   452       __THROW __nonnull ((1, 2));
   453  
   454  /* Set N bytes of S to 0.  */
   455  extern void bzero (void *__s, size_t __n) __THROW __nonnull ((1));
   456  
   457  /* Compare N bytes of S1 and S2 (same as memcmp).  */
   458  extern int bcmp (const void *__s1, const void *__s2, size_t __n)
   459       __THROW __attribute_pure__ __nonnull ((1, 2));
   460  
   461  /* Find the first occurrence of C in S (same as strchr).  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   462  # ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
   463  extern "C++"
   464  {
   465  extern char *index (char *__s, int __c)
   466       __THROW __asm ("index") __attribute_pure__ __nonnull ((1));
   467  extern const char *index (const char *__s, int __c)
   468       __THROW __asm ("index") __attribute_pure__ __nonnull ((1));
   469  
   470  #  if defined __OPTIMIZE__ && !defined __CORRECT_ISO_CPP_STRINGS_H_PROT
        O
   471  __extern_always_inline char *
   472  index (char *__s, int __c) __THROW
   473  {
   474    return __builtin_index (__s, __c);
   475  }
   476  
   477  __extern_always_inline const char *
   478  index (const char *__s, int __c) __THROW
   479  {
   480    return __builtin_index (__s, __c);
   481  }
   482  #  endif
   483  }
   484  # else
   485  extern char *index (const char *__s, int __c)
   486       __THROW __attribute_pure__ __nonnull ((1));
   487  # endif
   488  
   489  /* Find the last occurrence of C in S (same as strrchr).  */
   490  # ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
   491  extern "C++"
   492  {
   493  extern char *rindex (char *__s, int __c)
   494       __THROW __asm ("rindex") __attribute_pure__ __nonnull ((1));
   495  extern const char *rindex (const char *__s, int __c)
   496       __THROW __asm ("rindex") __attribute_pure__ __nonnull ((1));
   497  
   498  #  if defined __OPTIMIZE__ && !defined __CORRECT_ISO_CPP_STRINGS_H_PROT
        O
   499  __extern_always_inline char *
   500  rindex (char *__s, int __c) __THROW
   501  {
   502    return __builtin_rindex (__s, __c);
   503  }
   504  
   505  __extern_always_inline const char *
   506  rindex (const char *__s, int __c) __THROW
   507  {
   508    return __builtin_rindex (__s, __c);
   509  }
   510  #endif
   511  }
   512  # else
   513  extern char *rindex (const char *__s, int __c)
   514       __THROW __attribute_pure__ __nonnull ((1));
   515  # endif
   516  
   517  /* Return the position of the first bit set in I, or 0 if none are set.
   518     The least-significant bit is position 1, the most-significant 32.  *
        /
   519  extern int ffs (int __i) __THROW __attribute__ ((__const__));
   520  
   521  /* The following two functions are non-standard but necessary for non-3
        2 bit
   522     platforms.  */
   523  # ifdef __USE_GNU
   524  extern int ffsl (long int __l) __THROW __attribute__ ((__const__));
   525  #  ifdef __GNUC__
   526  __extension__ extern int ffsll (long long int __ll)
   527       __THROW __attribute__ ((__const__));
   528  #  endif
   529  # endif
   530  
   531  /* Compare S1 and S2, ignoring case.  */
   532  extern int strcasecmp (const char *__s1, const char *__s2)

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   533       __THROW __attribute_pure__ __nonnull ((1, 2));
   534  
   535  /* Compare no more than N chars of S1 and S2, ignoring case.  */
   536  extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
   537       __THROW __attribute_pure__ __nonnull ((1, 2));
   538  #endif /* Use BSD.  */
   539  
   540  #ifdef  __USE_GNU
   541  /* Again versions of a few functions which use the given locale instead
   542     of the global one.  */
   543  extern int strcasecmp_l (const char *__s1, const char *__s2,
   544                           __locale_t __loc)
   545       __THROW __attribute_pure__ __nonnull ((1, 2, 3));
   546  
   547  extern int strncasecmp_l (const char *__s1, const char *__s2,
   548                            size_t __n, __locale_t __loc)
   549       __THROW __attribute_pure__ __nonnull ((1, 2, 4));
   550  #endif
   551  
   552  #ifdef  __USE_BSD
   553  /* Return the next DELIM-delimited token from *STRINGP,
   554     terminating it with a '\0', and update *STRINGP to point past it.  *
        /
   555  extern char *strsep (char **__restrict __stringp,
   556                       const char *__restrict __delim)
   557       __THROW __nonnull ((1, 2));
   558  #endif
   559  
   560  #ifdef  __USE_XOPEN2K8
   561  /* Return a string describing the meaning of the signal number in SIG. 
         */
   562  extern char *strsignal (int __sig) __THROW;
   563  
   564  /* Copy SRC to DEST, returning the address of the terminating '\0' in D
        EST.  */
   565  extern char *__stpcpy (char *__restrict __dest, const char *__restrict 
        __src)
   566       __THROW __nonnull ((1, 2));
   567  extern char *stpcpy (char *__restrict __dest, const char *__restrict __
        src)
   568       __THROW __nonnull ((1, 2));
   569  
   570  /* Copy no more than N characters of SRC to DEST, returning the address
         of
   571     the last character written into DEST.  */
   572  extern char *__stpncpy (char *__restrict __dest,
   573                          const char *__restrict __src, size_t __n)
   574       __THROW __nonnull ((1, 2));
   575  extern char *stpncpy (char *__restrict __dest,
   576                        const char *__restrict __src, size_t __n)
   577       __THROW __nonnull ((1, 2));
   578  #endif
   579  
   580  #ifdef  __USE_GNU
   581  /* Compare S1 and S2 as strings holding name & indices/version numbers.
          */
   582  extern int strverscmp (const char *__s1, const char *__s2)
   583       __THROW __attribute_pure__ __nonnull ((1, 2));
   584  
   585  /* Sautee STRING briskly.  */
   586  extern char *strfry (char *__string) __THROW __nonnull ((1));
   587  
   588  /* Frobnicate N bytes of S.  */
   589  extern void *memfrob (void *__s, size_t __n) __THROW __nonnull ((1));
   590  
   591  # ifndef basename
   592  /* Return the file name within directory of FILENAME.  We don't
   593     declare the function if the `basename' macro is available (defined
   594     in <libgen.h>) which makes the XPG version of this function
   595     available.  */
   596  #  ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
   597  extern "C++" char *basename (char *__filename)
   598       __THROW __asm ("basename") __nonnull ((1));
   599  extern "C++" const char *basename (const char *__filename)
   600       __THROW __asm ("basename") __nonnull ((1));

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   601  #  else
   602  extern char *basename (const char *__filename) __THROW __nonnull ((1));
   603  #  endif
   604  # endif
   605  #endif
   606  
   607  
   608  #if defined __GNUC__ && __GNUC__ >= 2
   609  # if defined __OPTIMIZE__ && !defined __OPTIMIZE_SIZE__ \
   610       && !defined __NO_INLINE__ && !defined __cplusplus
   611  /* When using GNU CC we provide some optimized versions of selected
   612     functions from this header.  There are two kinds of optimizations:
   613  
   614     - machine-dependent optimizations, most probably using inline
   615       assembler code; these might be quite expensive since the code
   616       size can increase significantly.
   617       These optimizations are not used unless the symbol
   618          __USE_STRING_INLINES
   619       is defined before including this header.
   620  
   621     - machine-independent optimizations which do not increase the
   622       code size significantly and which optimize mainly situations
   623       where one or more arguments are compile-time constants.
   624       These optimizations are used always when the compiler is
   625       taught to optimize.
   626  
   627     One can inhibit all optimizations by defining __NO_STRING_INLINES.  
        */
   628  
   629  /* Get the machine-dependent optimizations (if any).  */
   630  #  include <bits/string.h>
   631  
   632  /* These are generic optimizations which do not add too much inline cod
        e.  */
   633  #  include <bits/string2.h>
   634  # endif
   635  
   636  # if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
   637  /* Functions with security checks.  */
   638  #  include <bits/string3.h>
   639  # endif
   640  #endif
   641  
   642  __END_DECLS
   643  
   644  #endif /* string.h  */
Close file: /usr/include/string.h
     8  #include <string.h>
Open file: /usr/include/unistd.h
     1  /* Copyright (C) 1991-2009, 2010, 2011, 2012 Free Software Foundation, 
        Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      POSIX Standard: 2.10 Symbolic Constants         <unistd.h>
    20   */
    21  
    22  #ifndef _UNISTD_H
    23  #define _UNISTD_H       1
    24  
Open file: /usr/include/features.h

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  
   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    25  #include <features.h>
    26  
    27  __BEGIN_DECLS
    28  
    29  /* These may be used to determine what facilities are present at compil
        e time.
    30     Their values can be obtained at run time from `sysconf'.  */
    31  
    32  #ifdef __USE_XOPEN2K8
    33  /* POSIX Standard approved as ISO/IEC 9945-1 as of September 2008.  */
    34  # define _POSIX_VERSION 200809L
    35  #elif defined __USE_XOPEN2K
    36  /* POSIX Standard approved as ISO/IEC 9945-1 as of December 2001.  */
    37  # define _POSIX_VERSION 200112L
    38  #elif defined __USE_POSIX199506
    39  /* POSIX Standard approved as ISO/IEC 9945-1 as of June 1995.  */
    40  # define _POSIX_VERSION 199506L
    41  #elif defined __USE_POSIX199309
    42  /* POSIX Standard approved as ISO/IEC 9945-1 as of September 1993.  */
    43  # define _POSIX_VERSION 199309L
    44  #else
    45  /* POSIX Standard approved as ISO/IEC 9945-1 as of September 1990.  */
    46  # define _POSIX_VERSION 199009L
    47  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    48  
    49  /* These are not #ifdef __USE_POSIX2 because they are
    50     in the theoretically application-owned namespace.  */
    51  
    52  #ifdef __USE_XOPEN2K8
    53  # define __POSIX2_THIS_VERSION  200809L
    54  /* The utilities on GNU systems also correspond to this version.  */
    55  #elif defined __USE_XOPEN2K
    56  /* The utilities on GNU systems also correspond to this version.  */
    57  # define __POSIX2_THIS_VERSION  200112L
    58  #elif defined __USE_POSIX199506
    59  /* The utilities on GNU systems also correspond to this version.  */
    60  # define __POSIX2_THIS_VERSION  199506L
    61  #else
    62  /* The utilities on GNU systems also correspond to this version.  */
    63  # define __POSIX2_THIS_VERSION  199209L
    64  #endif
    65  
    66  /* The utilities on GNU systems also correspond to this version.  */
    67  #define _POSIX2_VERSION __POSIX2_THIS_VERSION
    68  
    69  /* If defined, the implementation supports the
    70     C Language Bindings Option.  */
    71  #define _POSIX2_C_BIND  __POSIX2_THIS_VERSION
    72  
    73  /* If defined, the implementation supports the
    74     C Language Development Utilities Option.  */
    75  #define _POSIX2_C_DEV   __POSIX2_THIS_VERSION
    76  
    77  /* If defined, the implementation supports the
    78     Software Development Utilities Option.  */
    79  #define _POSIX2_SW_DEV  __POSIX2_THIS_VERSION
    80  
    81  /* If defined, the implementation supports the
    82     creation of locales with the localedef utility.  */
    83  #define _POSIX2_LOCALEDEF       __POSIX2_THIS_VERSION
    84  
    85  /* X/Open version number to which the library conforms.  It is selectab
        le.  */
    86  #ifdef __USE_XOPEN2K8
    87  # define _XOPEN_VERSION 700
    88  #elif defined __USE_XOPEN2K
    89  # define _XOPEN_VERSION 600
    90  #elif defined __USE_UNIX98
    91  # define _XOPEN_VERSION 500
    92  #else
    93  # define _XOPEN_VERSION 4
    94  #endif
    95  
    96  /* Commands and utilities from XPG4 are available.  */
    97  #define _XOPEN_XCU_VERSION      4
    98  
    99  /* We are compatible with the old published standards as well.  */
   100  #define _XOPEN_XPG2     1
   101  #define _XOPEN_XPG3     1
   102  #define _XOPEN_XPG4     1
   103  
   104  /* The X/Open Unix extensions are available.  */
   105  #define _XOPEN_UNIX     1
   106  
   107  /* Encryption is present.  */
   108  #define _XOPEN_CRYPT    1
   109  
   110  /* The enhanced internationalization capabilities according to XPG4.2
   111     are present.  */
   112  #define _XOPEN_ENH_I18N 1
   113  
   114  /* The legacy interfaces are also available.  */
   115  #define _XOPEN_LEGACY   1
   116  
   117  
   118  /* Get values of POSIX options:
   119  
   120     If these symbols are defined, the corresponding features are
   121     always available.  If not, they may be available sometimes.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   122     The current values can be obtained with `sysconf'.
   123  
   124     _POSIX_JOB_CONTROL           Job control is supported.
   125     _POSIX_SAVED_IDS             Processes have a saved set-user-ID
   126                                  and a saved set-group-ID.
   127     _POSIX_REALTIME_SIGNALS      Real-time, queued signals are supported
        .
   128     _POSIX_PRIORITY_SCHEDULING   Priority scheduling is supported.
   129     _POSIX_TIMERS                POSIX.4 clocks and timers are supported
        .
   130     _POSIX_ASYNCHRONOUS_IO       Asynchronous I/O is supported.
   131     _POSIX_PRIORITIZED_IO        Prioritized asynchronous I/O is support
        ed.
   132     _POSIX_SYNCHRONIZED_IO       Synchronizing file data is supported.
   133     _POSIX_FSYNC                 The fsync function is present.
   134     _POSIX_MAPPED_FILES          Mapping of files to memory is supported
        .
   135     _POSIX_MEMLOCK               Locking of all memory is supported.
   136     _POSIX_MEMLOCK_RANGE         Locking of ranges of memory is supporte
        d.
   137     _POSIX_MEMORY_PROTECTION     Setting of memory protections is suppor
        ted.
   138     _POSIX_MESSAGE_PASSING       POSIX.4 message queues are supported.
   139     _POSIX_SEMAPHORES            POSIX.4 counting semaphores are support
        ed.
   140     _POSIX_SHARED_MEMORY_OBJECTS POSIX.4 shared memory objects are suppo
        rted.
   141     _POSIX_THREADS               POSIX.1c pthreads are supported.
   142     _POSIX_THREAD_ATTR_STACKADDR Thread stack address attribute option s
        upported.
   143     _POSIX_THREAD_ATTR_STACKSIZE Thread stack size attribute option supp
        orted.
   144     _POSIX_THREAD_SAFE_FUNCTIONS Thread-safe functions are supported.
   145     _POSIX_THREAD_PRIORITY_SCHEDULING
   146                                  POSIX.1c thread execution scheduling su
        pported.
   147     _POSIX_THREAD_PRIO_INHERIT   Thread priority inheritance option supp
        orted.
   148     _POSIX_THREAD_PRIO_PROTECT   Thread priority protection option suppo
        rted.
   149     _POSIX_THREAD_PROCESS_SHARED Process-shared synchronization supporte
        d.
   150     _POSIX_PII                   Protocol-independent interfaces are sup
        ported.
   151     _POSIX_PII_XTI               XTI protocol-indep. interfaces are supp
        orted.
   152     _POSIX_PII_SOCKET            Socket protocol-indep. interfaces are s
        upported.
   153     _POSIX_PII_INTERNET          Internet family of protocols supported.
   154     _POSIX_PII_INTERNET_STREAM   Connection-mode Internet protocol suppo
        rted.
   155     _POSIX_PII_INTERNET_DGRAM    Connectionless Internet protocol suppor
        ted.
   156     _POSIX_PII_OSI               ISO/OSI family of protocols supported.
   157     _POSIX_PII_OSI_COTS          Connection-mode ISO/OSI service support
        ed.
   158     _POSIX_PII_OSI_CLTS          Connectionless ISO/OSI service supporte
        d.
   159     _POSIX_POLL                  Implementation supports `poll' function
        .
   160     _POSIX_SELECT                Implementation supports `select' and `p
        select'.
   161  
   162     _XOPEN_REALTIME              X/Open realtime support is available.
   163     _XOPEN_REALTIME_THREADS      X/Open realtime thread support is avail
        able.
   164     _XOPEN_SHM                   Shared memory interface according to XP
        G4.2.
   165  
   166     _XBS5_ILP32_OFF32            Implementation provides environment wit
        h 32-bit
   167                                  int, long, pointer, and off_t types.
   168     _XBS5_ILP32_OFFBIG           Implementation provides environment wit
        h 32-bit

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   169                                  int, long, and pointer and off_t with a
        t least
   170                                  64 bits.
   171     _XBS5_LP64_OFF64             Implementation provides environment wit
        h 32-bit
   172                                  int, and 64-bit long, pointer, and off_
        t types.
   173     _XBS5_LPBIG_OFFBIG           Implementation provides environment wit
        h at
   174                                  least 32 bits int and long, pointer, an
        d off_t
   175                                  with at least 64 bits.
   176  
   177     If any of these symbols is defined as -1, the corresponding option i
        s not
   178     true for any file.  If any is defined as other than -1, the correspo
        nding
   179     option is true for all files.  If a symbol is not defined at all, th
        e value
   180     for a specific file can be obtained from `pathconf' and `fpathconf'.
   181  
   182     _POSIX_CHOWN_RESTRICTED      Only the super user can use `chown' to 
        change
   183                                  the owner of a file.  `chown' can only 
        be used
   184                                  to change the group ID of a file to a g
        roup of
   185                                  which the calling process is a member.
   186     _POSIX_NO_TRUNC              Pathname components longer than
   187                                  NAME_MAX generate an error.
   188     _POSIX_VDISABLE              If defined, if the value of an element 
        of the
   189                                  `c_cc' member of `struct termios' is
   190                                  _POSIX_VDISABLE, no character will have
         the
   191                                  effect associated with that element.
   192     _POSIX_SYNC_IO               Synchronous I/O may be performed.
   193     _POSIX_ASYNC_IO              Asynchronous I/O may be performed.
   194     _POSIX_PRIO_IO               Prioritized Asynchronous I/O may be per
        formed.
   195  
   196     Support for the Large File Support interface is not generally availa
        ble.
   197     If it is available the following constants are defined to one.
   198     _LFS64_LARGEFILE             Low-level I/O supports large files.
   199     _LFS64_STDIO                 Standard I/O supports large files.
   200     */
   201  
Open file: /usr/include/bits/posix_opt.h
     1  /* Define POSIX options for Linux.
     2     Copyright (C) 1996-2004, 2006, 2008, 2009 Free Software Foundation, 
        Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public License a
        s
     7     published by the Free Software Foundation; either version 2.1 of the
     8     License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; see the file COPYING.LIB.  If
    17     not, see <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _BITS_POSIX_OPT_H
    20  #define _BITS_POSIX_OPT_H       1
    21  
    22  /* Job control is supported.  */
    23  #define _POSIX_JOB_CONTROL      1
    24  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    25  /* Processes have a saved set-user-ID and a saved set-group-ID.  */
    26  #define _POSIX_SAVED_IDS        1
    27  
    28  /* Priority scheduling is supported.  */
    29  #define _POSIX_PRIORITY_SCHEDULING      200809L
    30  
    31  /* Synchronizing file data is supported.  */
    32  #define _POSIX_SYNCHRONIZED_IO  200809L
    33  
    34  /* The fsync function is present.  */
    35  #define _POSIX_FSYNC    200809L
    36  
    37  /* Mapping of files to memory is supported.  */
    38  #define _POSIX_MAPPED_FILES     200809L
    39  
    40  /* Locking of all memory is supported.  */
    41  #define _POSIX_MEMLOCK  200809L
    42  
    43  /* Locking of ranges of memory is supported.  */
    44  #define _POSIX_MEMLOCK_RANGE    200809L
    45  
    46  /* Setting of memory protections is supported.  */
    47  #define _POSIX_MEMORY_PROTECTION        200809L
    48  
    49  /* Some filesystems allow all users to change file ownership.  */
    50  #define _POSIX_CHOWN_RESTRICTED 0
    51  
    52  /* `c_cc' member of 'struct termios' structure can be disabled by
    53     using the value _POSIX_VDISABLE.  */
    54  #define _POSIX_VDISABLE '\0'
    55  
    56  /* Filenames are not silently truncated.  */
    57  #define _POSIX_NO_TRUNC 1
    58  
    59  /* X/Open realtime support is available.  */
    60  #define _XOPEN_REALTIME 1
    61  
    62  /* X/Open thread realtime support is available.  */
    63  #define _XOPEN_REALTIME_THREADS 1
    64  
    65  /* XPG4.2 shared memory is supported.  */
    66  #define _XOPEN_SHM      1
    67  
    68  /* Tell we have POSIX threads.  */
    69  #define _POSIX_THREADS  200809L
    70  
    71  /* We have the reentrant functions described in POSIX.  */
    72  #define _POSIX_REENTRANT_FUNCTIONS      1
    73  #define _POSIX_THREAD_SAFE_FUNCTIONS    200809L
    74  
    75  /* We provide priority scheduling for threads.  */
    76  #define _POSIX_THREAD_PRIORITY_SCHEDULING       200809L
    77  
    78  /* We support user-defined stack sizes.  */
    79  #define _POSIX_THREAD_ATTR_STACKSIZE    200809L
    80  
    81  /* We support user-defined stacks.  */
    82  #define _POSIX_THREAD_ATTR_STACKADDR    200809L
    83  
    84  /* We support priority inheritence.  */
    85  #define _POSIX_THREAD_PRIO_INHERIT      200809L
    86  
    87  /* We support priority protection, though only for non-robust
    88     mutexes.  */
    89  #define _POSIX_THREAD_PRIO_PROTECT      200809L
    90  
    91  #ifdef __USE_XOPEN2K8
    92  /* We support priority inheritence for robust mutexes.  */
    93  # define _POSIX_THREAD_ROBUST_PRIO_INHERIT      200809L
    94  
    95  /* We do not support priority protection for robust mutexes.  */
    96  # define _POSIX_THREAD_ROBUST_PRIO_PROTECT      -1
    97  #endif
    98  
    99  /* We support POSIX.1b semaphores.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   100  #define _POSIX_SEMAPHORES       200809L
   101  
   102  /* Real-time signals are supported.  */
   103  #define _POSIX_REALTIME_SIGNALS 200809L
   104  
   105  /* We support asynchronous I/O.  */
   106  #define _POSIX_ASYNCHRONOUS_IO  200809L
   107  #define _POSIX_ASYNC_IO         1
   108  /* Alternative name for Unix98.  */
   109  #define _LFS_ASYNCHRONOUS_IO    1
   110  /* Support for prioritization is also available.  */
   111  #define _POSIX_PRIORITIZED_IO   200809L
   112  
   113  /* The LFS support in asynchronous I/O is also available.  */
   114  #define _LFS64_ASYNCHRONOUS_IO  1
   115  
   116  /* The rest of the LFS is also available.  */
   117  #define _LFS_LARGEFILE          1
   118  #define _LFS64_LARGEFILE        1
   119  #define _LFS64_STDIO            1
   120  
   121  /* POSIX shared memory objects are implemented.  */
   122  #define _POSIX_SHARED_MEMORY_OBJECTS    200809L
   123  
   124  /* CPU-time clocks support needs to be checked at runtime.  */
   125  #define _POSIX_CPUTIME  0
   126  
   127  /* Clock support in threads must be also checked at runtime.  */
   128  #define _POSIX_THREAD_CPUTIME   0
   129  
   130  /* GNU libc provides regular expression handling.  */
   131  #define _POSIX_REGEXP   1
   132  
   133  /* Reader/Writer locks are available.  */
   134  #define _POSIX_READER_WRITER_LOCKS      200809L
   135  
   136  /* We have a POSIX shell.  */
   137  #define _POSIX_SHELL    1
   138  
   139  /* We support the Timeouts option.  */
   140  #define _POSIX_TIMEOUTS 200809L
   141  
   142  /* We support spinlocks.  */
   143  #define _POSIX_SPIN_LOCKS       200809L
   144  
   145  /* The `spawn' function family is supported.  */
   146  #define _POSIX_SPAWN    200809L
   147  
   148  /* We have POSIX timers.  */
   149  #define _POSIX_TIMERS   200809L
   150  
   151  /* The barrier functions are available.  */
   152  #define _POSIX_BARRIERS 200809L
   153  
   154  /* POSIX message queues are available.  */
   155  #define _POSIX_MESSAGE_PASSING  200809L
   156  
   157  /* Thread process-shared synchronization is supported.  */
   158  #define _POSIX_THREAD_PROCESS_SHARED    200809L
   159  
   160  /* The monotonic clock might be available.  */
   161  #define _POSIX_MONOTONIC_CLOCK  0
   162  
   163  /* The clock selection interfaces are available.  */
   164  #define _POSIX_CLOCK_SELECTION  200809L
   165  
   166  /* Advisory information interfaces are available.  */
   167  #define _POSIX_ADVISORY_INFO    200809L
   168  
   169  /* IPv6 support is available.  */
   170  #define _POSIX_IPV6     200809L
   171  
   172  /* Raw socket support is available.  */
   173  #define _POSIX_RAW_SOCKETS      200809L
   174  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   175  /* We have at least one terminal.  */
   176  #define _POSIX2_CHAR_TERM       200809L
   177  
   178  /* Neither process nor thread sporadic server interfaces is available. 
         */
   179  #define _POSIX_SPORADIC_SERVER  -1
   180  #define _POSIX_THREAD_SPORADIC_SERVER   -1
   181  
   182  /* trace.h is not available.  */
   183  #define _POSIX_TRACE    -1
   184  #define _POSIX_TRACE_EVENT_FILTER       -1
   185  #define _POSIX_TRACE_INHERIT    -1
   186  #define _POSIX_TRACE_LOG        -1
   187  
   188  /* Typed memory objects are not available.  */
   189  #define _POSIX_TYPED_MEMORY_OBJECTS     -1
   190  
   191  /* Streams are not available.  */
   192  #define _XOPEN_STREAMS  -1
   193  
   194  #endif /* bits/posix_opt.h */
Close file: /usr/include/bits/posix_opt.h
   202  #include <bits/posix_opt.h>
   203  
   204  /* Get the environment definitions from Unix98.  */
   205  #if defined __USE_UNIX98 || defined __USE_XOPEN2K
Open file: /usr/include/bits/environments.h
     1  /* Copyright (C) 1999, 2001, 2004, 2009 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _UNISTD_H
    19  # error "Never include this file directly.  Use <unistd.h> instead"
    20  #endif
    21  
Open file: /usr/include/bits/wordsize.h
     1  /* Determine the wordsize from the preprocessor defines.  */
     2  
     3  #if defined __x86_64__ && !defined __ILP32__
     4  # define __WORDSIZE     64
     5  #else
     6  # define __WORDSIZE     32
     7  #endif
     8  
     9  #ifdef __x86_64__
    10  # define __WORDSIZE_TIME64_COMPAT32     1
    11  /* Both x86-64 and x32 use the 64-bit system call interface.  */
    12  # define __SYSCALL_WORDSIZE             64
    13  #endif
Close file: /usr/include/bits/wordsize.h
    22  #include <bits/wordsize.h>
    23  
    24  /* This header should define the following symbols under the described
    25     situations.  A value `1' means that the model is always supported,
    26     `-1' means it is never supported.  Undefined means it cannot be
    27     statically decided.
    28  
    29     _POSIX_V7_ILP32_OFF32   32bit int, long, pointers, and off_t type
    30     _POSIX_V7_ILP32_OFFBIG  32bit int, long, and pointers and larger off
        _t type
    31  
    32     _POSIX_V7_LP64_OFF32    64bit long and pointers and 32bit off_t type

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    33     _POSIX_V7_LPBIG_OFFBIG  64bit long and pointers and large off_t type
    34  
    35     The macros _POSIX_V6_ILP32_OFF32, _POSIX_V6_ILP32_OFFBIG,
    36     _POSIX_V6_LP64_OFF32, _POSIX_V6_LPBIG_OFFBIG, _XBS5_ILP32_OFF32,
    37     _XBS5_ILP32_OFFBIG, _XBS5_LP64_OFF32, and _XBS5_LPBIG_OFFBIG were
    38     used in previous versions of the Unix standard and are available
    39     only for compatibility.
    40  */
    41  
    42  #if __WORDSIZE == 64
    43  
    44  /* Environments with 32-bit wide pointers are optionally provided.
    45     Therefore following macros aren't defined:
    46     # undef _POSIX_V7_ILP32_OFF32
    47     # undef _POSIX_V7_ILP32_OFFBIG
    48     # undef _POSIX_V6_ILP32_OFF32
    49     # undef _POSIX_V6_ILP32_OFFBIG
    50     # undef _XBS5_ILP32_OFF32
    51     # undef _XBS5_ILP32_OFFBIG
    52     and users need to check at runtime.  */
    53  
    54  /* We also have no use (for now) for an environment with bigger pointer
        s
    55     and offsets.  */
    56  # define _POSIX_V7_LPBIG_OFFBIG -1
    57  # define _POSIX_V6_LPBIG_OFFBIG -1
    58  # define _XBS5_LPBIG_OFFBIG     -1
    59  
    60  /* By default we have 64-bit wide `long int', pointers and `off_t'.  */
    61  # define _POSIX_V7_LP64_OFF64   1
    62  # define _POSIX_V6_LP64_OFF64   1
    63  # define _XBS5_LP64_OFF64       1
    64  
    65  #else /* __WORDSIZE == 32 */
    66  
    67  /* By default we have 32-bit wide `int', `long int', pointers and `off_
        t'
    68     and all platforms support LFS.  */
    69  # define _POSIX_V7_ILP32_OFF32  1
    70  # define _POSIX_V7_ILP32_OFFBIG 1
    71  # define _POSIX_V6_ILP32_OFF32  1
    72  # define _POSIX_V6_ILP32_OFFBIG 1
    73  # define _XBS5_ILP32_OFF32      1
    74  # define _XBS5_ILP32_OFFBIG     1
    75  
    76  /* We optionally provide an environment with the above size but an 64-b
        it
    77     side `off_t'.  Therefore we don't define _POSIX_V7_ILP32_OFFBIG.  */
    78  
    79  /* Environments with 64-bit wide pointers can be provided,
    80     so these macros aren't defined:
    81     # undef _POSIX_V7_LP64_OFF64
    82     # undef _POSIX_V7_LPBIG_OFFBIG
    83     # undef _POSIX_V6_LP64_OFF64
    84     # undef _POSIX_V6_LPBIG_OFFBIG
    85     # undef _XBS5_LP64_OFF64
    86     # undef _XBS5_LPBIG_OFFBIG
    87     and sysconf tests for it at runtime.  */
    88  
    89  #endif /* __WORDSIZE == 32 */
    90  
    91  #define __ILP32_OFF32_CFLAGS    "-m32"
    92  #define __ILP32_OFFBIG_CFLAGS   "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSE
        T_BITS=64"
    93  #define __ILP32_OFF32_LDFLAGS   "-m32"
    94  #define __ILP32_OFFBIG_LDFLAGS  "-m32"
    95  #define __LP64_OFF64_CFLAGS     "-m64"
    96  #define __LP64_OFF64_LDFLAGS    "-m64"
Close file: /usr/include/bits/environments.h
   206  # include <bits/environments.h>
   207  #endif
   208  
   209  /* Standard file descriptors.  */
   210  #define STDIN_FILENO    0       /* Standard input.  */
   211  #define STDOUT_FILENO   1       /* Standard output.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   212  #define STDERR_FILENO   2       /* Standard error output.  */
   213  
   214  
   215  /* All functions that are not declared anywhere else.  */
   216  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;
    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];
    65  } __u_quad_t;
    66  #endif
    67  
    68  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    70     macros for each of the OS types we define below.  The definitions
    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long
    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.
    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    87     these types, where using the appropriate l or ll format modifiers ca
        n
    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,
    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t
   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int
   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else
   128  # error
   129  #endif
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   131  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   132  
   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;
   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  
   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   187  
   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   191  typedef __quad_t *__qaddr_t;
   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE
   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
   217  #include <bits/types.h>
   218  
   219  #ifndef __ssize_t_defined
   220  typedef __ssize_t ssize_t;
   221  # define __ssize_t_defined
   222  #endif
   223  
   224  #define __need_size_t
   225  #define __need_NULL
Open file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
     1  /* Copyright (C) 1989-2013 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \
    31      || defined(__need_wint_t)
    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \
    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  
    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.
    47     There's no way to win with the other order!  Sun lossage.  */
    48  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif
    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.
   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t
   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif
   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t
   115  #endif
   116  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually
   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  
   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF
   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #define _PTRDIFF_T
   137  #define _T_PTRDIFF_
   138  #define _T_PTRDIFF
   139  #define __PTRDIFF_T
   140  #define _PTRDIFF_T_
   141  #define _BSD_PTRDIFF_T_
   142  #define ___int_ptrdiff_t_h
   143  #define _GCC_PTRDIFF_T
   144  #ifndef __PTRDIFF_TYPE__
   145  #define __PTRDIFF_TYPE__ long int
   146  #endif
   147  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   148  #endif /* _GCC_PTRDIFF_T */
   149  #endif /* ___int_ptrdiff_t_h */
   150  #endif /* _BSD_PTRDIFF_T_ */
   151  #endif /* _PTRDIFF_T_ */
   152  #endif /* __PTRDIFF_T */
   153  #endif /* _T_PTRDIFF */
   154  #endif /* _T_PTRDIFF_ */
   155  #endif /* _PTRDIFF_T */
   156  
   157  /* If this symbol has done its job, get rid of it.  */
   158  #undef  __need_ptrdiff_t
   159  
   160  #endif /* _STDDEF_H or __need_ptrdiff_t.  */
   161  
   162  /* Unsigned type of `sizeof' something.  */
   163  
   164  /* Define this type if we are doing the whole job,
   165     or if we want this type in particular.  */
   166  #if defined (_STDDEF_H) || defined (__need_size_t)
   167  #ifndef __size_t__      /* BeOS */
   168  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   169  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */
   170  #ifndef _SYS_SIZE_T_H
   171  #ifndef _T_SIZE_
   172  #ifndef _T_SIZE
   173  #ifndef __SIZE_T
   174  #ifndef _SIZE_T_
   175  #ifndef _BSD_SIZE_T_
   176  #ifndef _SIZE_T_DEFINED_
   177  #ifndef _SIZE_T_DEFINED
   178  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   179  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   180  #ifndef ___int_size_t_h
   181  #ifndef _GCC_SIZE_T
   182  #ifndef _SIZET_
   183  #ifndef __size_t
   184  #define __size_t__      /* BeOS */
   185  #define __SIZE_T__      /* Cray Unicos/Mk */
   186  #define _SIZE_T
   187  #define _SYS_SIZE_T_H
   188  #define _T_SIZE_
   189  #define _T_SIZE
   190  #define __SIZE_T
   191  #define _SIZE_T_

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   192  #define _BSD_SIZE_T_
   193  #define _SIZE_T_DEFINED_
   194  #define _SIZE_T_DEFINED
   195  #define _BSD_SIZE_T_DEFINED_    /* Darwin */
   196  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   197  #define ___int_size_t_h
   198  #define _GCC_SIZE_T
   199  #define _SIZET_
   200  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   201    || defined(__FreeBSD_kernel__)
   202  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   203  #elif defined (__VMS__)
   204  /* __size_t is also a typedef on VMS.  */
   205  #else
   206  #define __size_t
   207  #endif
   208  #ifndef __SIZE_TYPE__
   209  #define __SIZE_TYPE__ long unsigned int
   210  #endif
   211  #if !(defined (__GNUG__) && defined (size_t))
   212  typedef __SIZE_TYPE__ size_t;
   213  #ifdef __BEOS__
   214  typedef long ssize_t;
   215  #endif /* __BEOS__ */
   216  #endif /* !(defined (__GNUG__) && defined (size_t)) */
   217  #endif /* __size_t */
   218  #endif /* _SIZET_ */
   219  #endif /* _GCC_SIZE_T */
   220  #endif /* ___int_size_t_h */
   221  #endif /* _SIZE_T_DECLARED */
   222  #endif /* _BSD_SIZE_T_DEFINED_ */
   223  #endif /* _SIZE_T_DEFINED */
   224  #endif /* _SIZE_T_DEFINED_ */
   225  #endif /* _BSD_SIZE_T_ */
   226  #endif /* _SIZE_T_ */
   227  #endif /* __SIZE_T */
   228  #endif /* _T_SIZE */
   229  #endif /* _T_SIZE_ */
   230  #endif /* _SYS_SIZE_T_H */
   231  #endif /* _SIZE_T */
   232  #endif /* __SIZE_T__ */
   233  #endif /* __size_t__ */
   234  #undef  __need_size_t
   235  #endif /* _STDDEF_H or __need_size_t.  */
   236  
   237  
   238  /* Wide character type.
   239     Locale-writers should change this as necessary to
   240     be big enough to hold unique values not between 0 and 127,
   241     and not (wchar_t) -1, for each defined multibyte character.  */
   242  
   243  /* Define this type if we are doing the whole job,
   244     or if we want this type in particular.  */
   245  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   246  #ifndef __wchar_t__     /* BeOS */
   247  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   248  #ifndef _WCHAR_T
   249  #ifndef _T_WCHAR_
   250  #ifndef _T_WCHAR
   251  #ifndef __WCHAR_T
   252  #ifndef _WCHAR_T_
   253  #ifndef _BSD_WCHAR_T_
   254  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
   255  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   256  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   257  #ifndef _WCHAR_T_DEFINED_
   258  #ifndef _WCHAR_T_DEFINED
   259  #ifndef _WCHAR_T_H
   260  #ifndef ___int_wchar_t_h
   261  #ifndef __INT_WCHAR_T_H
   262  #ifndef _GCC_WCHAR_T
   263  #define __wchar_t__     /* BeOS */
   264  #define __WCHAR_T__     /* Cray Unicos/Mk */
   265  #define _WCHAR_T
   266  #define _T_WCHAR_

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   267  #define _T_WCHAR
   268  #define __WCHAR_T
   269  #define _WCHAR_T_
   270  #define _BSD_WCHAR_T_
   271  #define _WCHAR_T_DEFINED_
   272  #define _WCHAR_T_DEFINED
   273  #define _WCHAR_T_H
   274  #define ___int_wchar_t_h
   275  #define __INT_WCHAR_T_H
   276  #define _GCC_WCHAR_T
   277  #define _WCHAR_T_DECLARED
   278  
   279  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   280     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   281     symbols in the _FOO_T_ family, stays defined even after its
   282     corresponding type is defined).  If we define wchar_t, then we
   283     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   284     we undef _WCHAR_T_, then we must also define rune_t, since 
   285     headers like runetype.h assume that if machine/ansi.h is included,
   286     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   287     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   288     the same type." */
   289  #ifdef _BSD_WCHAR_T_
   290  #undef _BSD_WCHAR_T_
   291  #ifdef _BSD_RUNE_T_
   292  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   293  typedef _BSD_RUNE_T_ rune_t;
   294  #define _BSD_WCHAR_T_DEFINED_
   295  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   296  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   297  /* Why is this file so hard to maintain properly?  In contrast to
   298     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   299     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   300     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   301  #undef _BSD_RUNE_T_
   302  #endif
   303  #endif
   304  #endif
   305  #endif
   306  /* FreeBSD 5 can't be handled well using "traditional" logic above
   307     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   308     rune_t in some cases... */
   309  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   310  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   311  #if __BSD_VISIBLE
   312  #ifndef _RUNE_T_DECLARED
   313  typedef __rune_t        rune_t;
   314  #define _RUNE_T_DECLARED
   315  #endif
   316  #endif
   317  #endif
   318  #endif
   319  
   320  #ifndef __WCHAR_TYPE__
   321  #define __WCHAR_TYPE__ int
   322  #endif
   323  #ifndef __cplusplus
   324  typedef __WCHAR_TYPE__ wchar_t;
   325  #endif
   326  #endif
   327  #endif
   328  #endif
   329  #endif
   330  #endif
   331  #endif
   332  #endif /* _WCHAR_T_DECLARED */
   333  #endif /* _BSD_RUNE_T_DEFINED_ */
   334  #endif
   335  #endif
   336  #endif
   337  #endif
   338  #endif
   339  #endif
   340  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   341  #endif /* __WCHAR_T__ */
   342  #endif /* __wchar_t__ */
   343  #undef  __need_wchar_t
   344  #endif /* _STDDEF_H or __need_wchar_t.  */
   345  
   346  #if defined (__need_wint_t)
   347  #ifndef _WINT_T
   348  #define _WINT_T
   349  
   350  #ifndef __WINT_TYPE__
   351  #define __WINT_TYPE__ unsigned int
   352  #endif
   353  typedef __WINT_TYPE__ wint_t;
   354  #endif
   355  #undef __need_wint_t
   356  #endif
   357  
   358  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   359      are already defined.  */
   360  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */
   361  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   362  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)
   363  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   364      are probably typos and should be removed before 2.8 is released.  *
        /
   365  #ifdef _GCC_PTRDIFF_T_
   366  #undef _PTRDIFF_T_
   367  #undef _BSD_PTRDIFF_T_
   368  #endif
   369  #ifdef _GCC_SIZE_T_
   370  #undef _SIZE_T_
   371  #undef _BSD_SIZE_T_
   372  #endif
   373  #ifdef _GCC_WCHAR_T_
   374  #undef _WCHAR_T_
   375  #undef _BSD_WCHAR_T_
   376  #endif
   377  /*  The following ones are the real ones.  */
   378  #ifdef _GCC_PTRDIFF_T
   379  #undef _PTRDIFF_T_
   380  #undef _BSD_PTRDIFF_T_
   381  #endif
   382  #ifdef _GCC_SIZE_T
   383  #undef _SIZE_T_
   384  #undef _BSD_SIZE_T_
   385  #endif
   386  #ifdef _GCC_WCHAR_T
   387  #undef _WCHAR_T_
   388  #undef _BSD_WCHAR_T_
   389  #endif
   390  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */
   391  
   392  #endif /* __sys_stdtypes_h */
   393  
   394  /* A null pointer constant.  */
   395  
   396  #if defined (_STDDEF_H) || defined (__need_NULL)
   397  #undef NULL             /* in case <stdio.h> has defined it. */
   398  #ifdef __GNUG__
   399  #define NULL __null
   400  #else   /* G++ */
   401  #ifndef __cplusplus
   402  #define NULL ((void *)0)
   403  #else   /* C++ */
   404  #define NULL 0
   405  #endif  /* C++ */
   406  #endif  /* G++ */
   407  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   408  #undef  __need_NULL
   409  
   410  #ifdef _STDDEF_H

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   411  
   412  /* Offset of member MEMBER in a struct of type TYPE. */
   413  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   414  
   415  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   416    || (defined(__cplusplus) && __cplusplus >= 201103L)
   417  #ifndef _GCC_MAX_ALIGN_T
   418  #define _GCC_MAX_ALIGN_T
   419  /* Type whose alignment is supported in every context and is at least
   420     as great as that of any standard type not using alignment
   421     specifiers.  */
   422  typedef struct {
   423    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));
   424    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   425  } max_align_t;
   426  #endif
   427  #endif /* C11 or C++11.  */
   428  
   429  #if defined(__cplusplus) && __cplusplus >= 201103L
   430  #ifndef _GXX_NULLPTR_T
   431  #define _GXX_NULLPTR_T
   432    typedef decltype(nullptr) nullptr_t;
   433  #endif
   434  #endif /* C++11.  */
   435  
   436  #endif /* _STDDEF_H was defined this time */
   437  
   438  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
   439            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
   226  #include <stddef.h>
   227  
   228  #if defined __USE_XOPEN || defined __USE_XOPEN2K
   229  /* The Single Unix specification says that some more types are
   230     available here.  */
   231  # ifndef __gid_t_defined
   232  typedef __gid_t gid_t;
   233  #  define __gid_t_defined
   234  # endif
   235  
   236  # ifndef __uid_t_defined
   237  typedef __uid_t uid_t;
   238  #  define __uid_t_defined
   239  # endif
   240  
   241  # ifndef __off_t_defined
   242  #  ifndef __USE_FILE_OFFSET64
   243  typedef __off_t off_t;
   244  #  else
   245  typedef __off64_t off_t;
   246  #  endif
   247  #  define __off_t_defined
   248  # endif
   249  # if defined __USE_LARGEFILE64 && !defined __off64_t_defined
   250  typedef __off64_t off64_t;
   251  #  define __off64_t_defined
   252  # endif
   253  
   254  # ifndef __useconds_t_defined
   255  typedef __useconds_t useconds_t;
   256  #  define __useconds_t_defined
   257  # endif
   258  
   259  # ifndef __pid_t_defined
   260  typedef __pid_t pid_t;
   261  #  define __pid_t_defined
   262  # endif
   263  #endif  /* X/Open */
   264  
   265  #if defined __USE_MISC || defined __USE_XOPEN_EXTENDED || defined __USE
        _XOPEN2K
   266  # ifndef __intptr_t_defined
   267  typedef __intptr_t intptr_t;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   268  #  define __intptr_t_defined
   269  # endif
   270  #endif
   271  
   272  #if defined __USE_BSD || defined __USE_XOPEN
   273  # ifndef __socklen_t_defined
   274  typedef __socklen_t socklen_t;
   275  #  define __socklen_t_defined
   276  # endif
   277  #endif
   278  
   279  /* Values for the second argument to access.
   280     These may be OR'd together.  */
   281  #define R_OK    4               /* Test for read permission.  */
   282  #define W_OK    2               /* Test for write permission.  */
   283  #define X_OK    1               /* Test for execute permission.  */
   284  #define F_OK    0               /* Test for existence.  */
   285  
   286  /* Test for access to NAME using the real UID and real GID.  */
   287  extern int access (const char *__name, int __type) __THROW __nonnull ((
        1));
   288  
   289  #ifdef __USE_GNU
   290  /* Test for access to NAME using the effective UID and GID
   291     (as normal file operations use).  */
   292  extern int euidaccess (const char *__name, int __type)
   293       __THROW __nonnull ((1));
   294  
   295  /* An alias for `euidaccess', used by some other systems.  */
   296  extern int eaccess (const char *__name, int __type)
   297       __THROW __nonnull ((1));
   298  #endif
   299  
   300  #ifdef __USE_ATFILE
   301  /* Test for access to FILE relative to the directory FD is open on.
   302     If AT_EACCESS is set in FLAG, then use effective IDs like `eaccess',
   303     otherwise use real IDs like `access'.  */
   304  extern int faccessat (int __fd, const char *__file, int __type, int __f
        lag)
   305       __THROW __nonnull ((2)) __wur;
   306  #endif /* Use GNU.  */
   307  
   308  
   309  /* Values for the WHENCE argument to lseek.  */
   310  #ifndef _STDIO_H                /* <stdio.h> has the same definitions. 
         */
   311  # define SEEK_SET       0       /* Seek from beginning of file.  */
   312  # define SEEK_CUR       1       /* Seek from current position.  */
   313  # define SEEK_END       2       /* Seek from end of file.  */
   314  # ifdef __USE_GNU
   315  #  define SEEK_DATA     3       /* Seek to next data.  */
   316  #  define SEEK_HOLE     4       /* Seek to next hole.  */
   317  # endif
   318  #endif
   319  
   320  #if defined __USE_BSD && !defined L_SET
   321  /* Old BSD names for the same constants; just for compatibility.  */
   322  # define L_SET          SEEK_SET
   323  # define L_INCR         SEEK_CUR
   324  # define L_XTND         SEEK_END
   325  #endif
   326  
   327  
   328  /* Move FD's file position to OFFSET bytes from the
   329     beginning of the file (if WHENCE is SEEK_SET),
   330     the current position (if WHENCE is SEEK_CUR),
   331     or the end of the file (if WHENCE is SEEK_END).
   332     Return the new file position.  */
   333  #ifndef __USE_FILE_OFFSET64
   334  extern __off_t lseek (int __fd, __off_t __offset, int __whence) __THROW
        ;
   335  #else
   336  # ifdef __REDIRECT_NTH
   337  extern __off64_t __REDIRECT_NTH (lseek,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   338                                   (int __fd, __off64_t __offset, int __w
        hence),
   339                                   lseek64);
   340  # else
   341  #  define lseek lseek64
   342  # endif
   343  #endif
   344  #ifdef __USE_LARGEFILE64
   345  extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
   346       __THROW;
   347  #endif
   348  
   349  /* Close the file descriptor FD.
   350  
   351     This function is a cancellation point and therefore not marked with
   352     __THROW.  */
   353  extern int close (int __fd);
   354  
   355  /* Read NBYTES into BUF from FD.  Return the
   356     number read, -1 for errors or 0 for EOF.
   357  
   358     This function is a cancellation point and therefore not marked with
   359     __THROW.  */
   360  extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __wur;
   361  
   362  /* Write N bytes of BUF to FD.  Return the number written, or -1.
   363  
   364     This function is a cancellation point and therefore not marked with
   365     __THROW.  */
   366  extern ssize_t write (int __fd, const void *__buf, size_t __n) __wur;
   367  
   368  #if defined __USE_UNIX98 || defined __USE_XOPEN2K8
   369  # ifndef __USE_FILE_OFFSET64
   370  /* Read NBYTES into BUF from FD at the given position OFFSET without
   371     changing the file pointer.  Return the number read, -1 for errors
   372     or 0 for EOF.
   373  
   374     This function is a cancellation point and therefore not marked with
   375     __THROW.  */
   376  extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
   377                        __off_t __offset) __wur;
   378  
   379  /* Write N bytes of BUF to FD at the given position OFFSET without
   380     changing the file pointer.  Return the number written, or -1.
   381  
   382     This function is a cancellation point and therefore not marked with
   383     __THROW.  */
   384  extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
   385                         __off_t __offset) __wur;
   386  # else
   387  #  ifdef __REDIRECT
   388  extern ssize_t __REDIRECT (pread, (int __fd, void *__buf, size_t __nbyt
        es,
   389                                     __off64_t __offset),
   390                             pread64) __wur;
   391  extern ssize_t __REDIRECT (pwrite, (int __fd, const void *__buf,
   392                                      size_t __nbytes, __off64_t __offset
        ),
   393                             pwrite64) __wur;
   394  #  else
   395  #   define pread pread64
   396  #   define pwrite pwrite64
   397  #  endif
   398  # endif
   399  
   400  # ifdef __USE_LARGEFILE64
   401  /* Read NBYTES into BUF from FD at the given position OFFSET without
   402     changing the file pointer.  Return the number read, -1 for errors
   403     or 0 for EOF.  */
   404  extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   405                          __off64_t __offset) __wur;
   406  /* Write N bytes of BUF to FD at the given position OFFSET without
   407     changing the file pointer.  Return the number written, or -1.  */
   408  extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
   409                           __off64_t __offset) __wur;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   410  # endif
   411  #endif
   412  
   413  /* Create a one-way communication channel (pipe).
   414     If successful, two file descriptors are stored in PIPEDES;
   415     bytes written on PIPEDES[1] can be read from PIPEDES[0].
   416     Returns 0 if successful, -1 if not.  */
   417  extern int pipe (int __pipedes[2]) __THROW __wur;
   418  
   419  #ifdef __USE_GNU
   420  /* Same as pipe but apply flags passed in FLAGS to the new file
   421     descriptors.  */
   422  extern int pipe2 (int __pipedes[2], int __flags) __THROW __wur;
   423  #endif
   424  
   425  /* Schedule an alarm.  In SECONDS seconds, the process will get a SIGAL
        RM.
   426     If SECONDS is zero, any currently scheduled alarm will be cancelled.
   427     The function returns the number of seconds remaining until the last
   428     alarm scheduled would have signaled, or zero if there wasn't one.
   429     There is no return value to indicate an error, but you can set `errn
        o'
   430     to 0 and check its value after calling `alarm', and this might tell 
        you.
   431     The signal may come late due to processor scheduling.  */
   432  extern unsigned int alarm (unsigned int __seconds) __THROW;
   433  
   434  /* Make the process sleep for SECONDS seconds, or until a signal arrive
        s
   435     and is not ignored.  The function returns the number of seconds less
   436     than SECONDS which it actually slept (thus zero if it slept the full
         time).
   437     If a signal handler does a `longjmp' or modifies the handling of the
   438     SIGALRM signal while inside `sleep' call, the handling of the SIGALR
        M
   439     signal afterwards is undefined.  There is no return value to indicat
        e
   440     error, but if `sleep' returns SECONDS, it probably didn't work.
   441  
   442     This function is a cancellation point and therefore not marked with
   443     __THROW.  */
   444  extern unsigned int sleep (unsigned int __seconds);
   445  
   446  #if (defined __USE_XOPEN_EXTENDED && !defined __USE_XOPEN2K8) \
   447      || defined __USE_BSD
   448  /* Set an alarm to go off (generating a SIGALRM signal) in VALUE
   449     microseconds.  If INTERVAL is nonzero, when the alarm goes off, the
   450     timer is reset to go off every INTERVAL microseconds thereafter.
   451     Returns the number of microseconds remaining before the alarm.  */
   452  extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interv
        al)
   453       __THROW;
   454  
   455  /* Sleep USECONDS microseconds, or until a signal arrives that is not b
        locked
   456     or ignored.
   457  
   458     This function is a cancellation point and therefore not marked with
   459     __THROW.  */
   460  extern int usleep (__useconds_t __useconds);
   461  #endif
   462  
   463  
   464  /* Suspend the process until a signal arrives.
   465     This always returns -1 and sets `errno' to EINTR.
   466  
   467     This function is a cancellation point and therefore not marked with
   468     __THROW.  */
   469  extern int pause (void);
   470  
   471  
   472  /* Change the owner and group of FILE.  */
   473  extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
   474       __THROW __nonnull ((1)) __wur;
   475  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   476  #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED || defined __USE_
        XOPEN2K8
   477  /* Change the owner and group of the file that FD is open on.  */
   478  extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __THROW 
        __wur;
   479  
   480  
   481  /* Change owner and group of FILE, if it is a symbolic
   482     link the ownership of the symbolic link is changed.  */
   483  extern int lchown (const char *__file, __uid_t __owner, __gid_t __group
        )
   484       __THROW __nonnull ((1)) __wur;
   485  
   486  #endif /* Use BSD || X/Open Unix.  */
   487  
   488  #ifdef __USE_ATFILE
   489  /* Change the owner and group of FILE relative to the directory FD is o
        pen
   490     on.  */
   491  extern int fchownat (int __fd, const char *__file, __uid_t __owner,
   492                       __gid_t __group, int __flag)
   493       __THROW __nonnull ((2)) __wur;
   494  #endif /* Use GNU.  */
   495  
   496  /* Change the process's working directory to PATH.  */
   497  extern int chdir (const char *__path) __THROW __nonnull ((1)) __wur;
   498  
   499  #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED || defined __USE_
        XOPEN2K8
   500  /* Change the process's working directory to the one FD is open on.  */
   501  extern int fchdir (int __fd) __THROW __wur;
   502  #endif
   503  
   504  /* Get the pathname of the current working directory,
   505     and put it in SIZE bytes of BUF.  Returns NULL if the
   506     directory couldn't be determined or SIZE was too small.
   507     If successful, returns BUF.  In GNU, if BUF is NULL,
   508     an array is allocated with `malloc'; the array is SIZE
   509     bytes long, unless SIZE == 0, in which case it is as
   510     big as necessary.  */
   511  extern char *getcwd (char *__buf, size_t __size) __THROW __wur;
   512  
   513  #ifdef  __USE_GNU
   514  /* Return a malloc'd string containing the current directory name.
   515     If the environment variable `PWD' is set, and its value is correct,
   516     that value is used.  */
   517  extern char *get_current_dir_name (void) __THROW;
   518  #endif
   519  
   520  #if (defined __USE_XOPEN_EXTENDED && !defined __USE_XOPEN2K8) \
   521      || defined __USE_BSD
   522  /* Put the absolute pathname of the current working directory in BUF.
   523     If successful, return BUF.  If not, put an error message in
   524     BUF and return NULL.  BUF should be at least PATH_MAX bytes long.  *
        /
   525  extern char *getwd (char *__buf)
   526       __THROW __nonnull ((1)) __attribute_deprecated__ __wur;
   527  #endif
   528  
   529  
   530  /* Duplicate FD, returning a new file descriptor on the same file.  */
   531  extern int dup (int __fd) __THROW __wur;
   532  
   533  /* Duplicate FD to FD2, closing FD2 and making it open on the same file
        .  */
   534  extern int dup2 (int __fd, int __fd2) __THROW;
   535  
   536  #ifdef __USE_GNU
   537  /* Duplicate FD to FD2, closing FD2 and making it open on the same
   538     file while setting flags according to FLAGS.  */
   539  extern int dup3 (int __fd, int __fd2, int __flags) __THROW;
   540  #endif
   541  
   542  /* NULL-terminated array of "NAME=VALUE" environment variables.  */
   543  extern char **__environ;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   544  #ifdef __USE_GNU
   545  extern char **environ;
   546  #endif
   547  
   548  
   549  /* Replace the current process, executing PATH with arguments ARGV and
   550     environment ENVP.  ARGV and ENVP are terminated by NULL pointers.  *
        /
   551  extern int execve (const char *__path, char *const __argv[],
   552                     char *const __envp[]) __THROW __nonnull ((1, 2));
   553  
   554  #ifdef __USE_XOPEN2K8
   555  /* Execute the file FD refers to, overlaying the running program image.
   556     ARGV and ENVP are passed to the new program, as for `execve'.  */
   557  extern int fexecve (int __fd, char *const __argv[], char *const __envp[
        ])
   558       __THROW __nonnull ((2));
   559  #endif
   560  
   561  
   562  /* Execute PATH with arguments ARGV and environment from `environ'.  */
   563  extern int execv (const char *__path, char *const __argv[])
   564       __THROW __nonnull ((1, 2));
   565  
   566  /* Execute PATH with all arguments after PATH until a NULL pointer,
   567     and the argument after that for environment.  */
   568  extern int execle (const char *__path, const char *__arg, ...)
   569       __THROW __nonnull ((1, 2));
   570  
   571  /* Execute PATH with all arguments after PATH until
   572     a NULL pointer and environment from `environ'.  */
   573  extern int execl (const char *__path, const char *__arg, ...)
   574       __THROW __nonnull ((1, 2));
   575  
   576  /* Execute FILE, searching in the `PATH' environment variable if it con
        tains
   577     no slashes, with arguments ARGV and environment from `environ'.  */
   578  extern int execvp (const char *__file, char *const __argv[])
   579       __THROW __nonnull ((1, 2));
   580  
   581  /* Execute FILE, searching in the `PATH' environment variable if
   582     it contains no slashes, with all arguments after FILE until a
   583     NULL pointer and environment from `environ'.  */
   584  extern int execlp (const char *__file, const char *__arg, ...)
   585       __THROW __nonnull ((1, 2));
   586  
   587  #ifdef __USE_GNU
   588  /* Execute FILE, searching in the `PATH' environment variable if it con
        tains
   589     no slashes, with arguments ARGV and environment from `environ'.  */
   590  extern int execvpe (const char *__file, char *const __argv[],
   591                      char *const __envp[])
   592       __THROW __nonnull ((1, 2));
   593  #endif
   594  
   595  
   596  #if defined __USE_MISC || defined __USE_XOPEN
   597  /* Add INC to priority of the current process.  */
   598  extern int nice (int __inc) __THROW __wur;
   599  #endif
   600  
   601  
   602  /* Terminate program execution with the low-order 8 bits of STATUS.  */
   603  extern void _exit (int __status) __attribute__ ((__noreturn__));
   604  
   605  
   606  /* Get the `_PC_*' symbols for the NAME argument to `pathconf' and `fpa
        thconf';
   607     the `_SC_*' symbols for the NAME argument to `sysconf';
   608     and the `_CS_*' symbols for the NAME argument to `confstr'.  */
Open file: /usr/include/bits/confname.h
     1  /* `sysconf', `pathconf', and `confstr' NAME values.  Generic version.
     2     Copyright (C) 1993,1995-1998,2000,2001,2003,2004,2007,2009,2010
     3     Free Software Foundation, Inc.
     4     This file is part of the GNU C Library.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     5  
     6     The GNU C Library is free software; you can redistribute it and/or
     7     modify it under the terms of the GNU Lesser General Public
     8     License as published by the Free Software Foundation; either
     9     version 2.1 of the License, or (at your option) any later version.
    10  
    11     The GNU C Library is distributed in the hope that it will be useful,
    12     but WITHOUT ANY WARRANTY; without even the implied warranty of
    13     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    14     Lesser General Public License for more details.
    15  
    16     You should have received a copy of the GNU Lesser General Public
    17     License along with the GNU C Library; if not, see
    18     <http://www.gnu.org/licenses/>.  */
    19  
    20  #ifndef _UNISTD_H
    21  # error "Never use <bits/confname.h> directly; include <unistd.h> inste
        ad."
    22  #endif
    23  
    24  /* Values for the NAME argument to `pathconf' and `fpathconf'.  */
    25  enum
    26    {
    27      _PC_LINK_MAX,
    28  #define _PC_LINK_MAX                    _PC_LINK_MAX
    29      _PC_MAX_CANON,
    30  #define _PC_MAX_CANON                   _PC_MAX_CANON
    31      _PC_MAX_INPUT,
    32  #define _PC_MAX_INPUT                   _PC_MAX_INPUT
    33      _PC_NAME_MAX,
    34  #define _PC_NAME_MAX                    _PC_NAME_MAX
    35      _PC_PATH_MAX,
    36  #define _PC_PATH_MAX                    _PC_PATH_MAX
    37      _PC_PIPE_BUF,
    38  #define _PC_PIPE_BUF                    _PC_PIPE_BUF
    39      _PC_CHOWN_RESTRICTED,
    40  #define _PC_CHOWN_RESTRICTED            _PC_CHOWN_RESTRICTED
    41      _PC_NO_TRUNC,
    42  #define _PC_NO_TRUNC                    _PC_NO_TRUNC
    43      _PC_VDISABLE,
    44  #define _PC_VDISABLE                    _PC_VDISABLE
    45      _PC_SYNC_IO,
    46  #define _PC_SYNC_IO                     _PC_SYNC_IO
    47      _PC_ASYNC_IO,
    48  #define _PC_ASYNC_IO                    _PC_ASYNC_IO
    49      _PC_PRIO_IO,
    50  #define _PC_PRIO_IO                     _PC_PRIO_IO
    51      _PC_SOCK_MAXBUF,
    52  #define _PC_SOCK_MAXBUF                 _PC_SOCK_MAXBUF
    53      _PC_FILESIZEBITS,
    54  #define _PC_FILESIZEBITS                _PC_FILESIZEBITS
    55      _PC_REC_INCR_XFER_SIZE,
    56  #define _PC_REC_INCR_XFER_SIZE          _PC_REC_INCR_XFER_SIZE
    57      _PC_REC_MAX_XFER_SIZE,
    58  #define _PC_REC_MAX_XFER_SIZE           _PC_REC_MAX_XFER_SIZE
    59      _PC_REC_MIN_XFER_SIZE,
    60  #define _PC_REC_MIN_XFER_SIZE           _PC_REC_MIN_XFER_SIZE
    61      _PC_REC_XFER_ALIGN,
    62  #define _PC_REC_XFER_ALIGN              _PC_REC_XFER_ALIGN
    63      _PC_ALLOC_SIZE_MIN,
    64  #define _PC_ALLOC_SIZE_MIN              _PC_ALLOC_SIZE_MIN
    65      _PC_SYMLINK_MAX,
    66  #define _PC_SYMLINK_MAX                 _PC_SYMLINK_MAX
    67      _PC_2_SYMLINKS
    68  #define _PC_2_SYMLINKS                  _PC_2_SYMLINKS
    69    };
    70  
    71  /* Values for the argument to `sysconf'.  */
    72  enum
    73    {
    74      _SC_ARG_MAX,
    75  #define _SC_ARG_MAX                     _SC_ARG_MAX
    76      _SC_CHILD_MAX,
    77  #define _SC_CHILD_MAX                   _SC_CHILD_MAX
    78      _SC_CLK_TCK,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    79  #define _SC_CLK_TCK                     _SC_CLK_TCK
    80      _SC_NGROUPS_MAX,
    81  #define _SC_NGROUPS_MAX                 _SC_NGROUPS_MAX
    82      _SC_OPEN_MAX,
    83  #define _SC_OPEN_MAX                    _SC_OPEN_MAX
    84      _SC_STREAM_MAX,
    85  #define _SC_STREAM_MAX                  _SC_STREAM_MAX
    86      _SC_TZNAME_MAX,
    87  #define _SC_TZNAME_MAX                  _SC_TZNAME_MAX
    88      _SC_JOB_CONTROL,
    89  #define _SC_JOB_CONTROL                 _SC_JOB_CONTROL
    90      _SC_SAVED_IDS,
    91  #define _SC_SAVED_IDS                   _SC_SAVED_IDS
    92      _SC_REALTIME_SIGNALS,
    93  #define _SC_REALTIME_SIGNALS            _SC_REALTIME_SIGNALS
    94      _SC_PRIORITY_SCHEDULING,
    95  #define _SC_PRIORITY_SCHEDULING         _SC_PRIORITY_SCHEDULING
    96      _SC_TIMERS,
    97  #define _SC_TIMERS                      _SC_TIMERS
    98      _SC_ASYNCHRONOUS_IO,
    99  #define _SC_ASYNCHRONOUS_IO             _SC_ASYNCHRONOUS_IO
   100      _SC_PRIORITIZED_IO,
   101  #define _SC_PRIORITIZED_IO              _SC_PRIORITIZED_IO
   102      _SC_SYNCHRONIZED_IO,
   103  #define _SC_SYNCHRONIZED_IO             _SC_SYNCHRONIZED_IO
   104      _SC_FSYNC,
   105  #define _SC_FSYNC                       _SC_FSYNC
   106      _SC_MAPPED_FILES,
   107  #define _SC_MAPPED_FILES                _SC_MAPPED_FILES
   108      _SC_MEMLOCK,
   109  #define _SC_MEMLOCK                     _SC_MEMLOCK
   110      _SC_MEMLOCK_RANGE,
   111  #define _SC_MEMLOCK_RANGE               _SC_MEMLOCK_RANGE
   112      _SC_MEMORY_PROTECTION,
   113  #define _SC_MEMORY_PROTECTION           _SC_MEMORY_PROTECTION
   114      _SC_MESSAGE_PASSING,
   115  #define _SC_MESSAGE_PASSING             _SC_MESSAGE_PASSING
   116      _SC_SEMAPHORES,
   117  #define _SC_SEMAPHORES                  _SC_SEMAPHORES
   118      _SC_SHARED_MEMORY_OBJECTS,
   119  #define _SC_SHARED_MEMORY_OBJECTS       _SC_SHARED_MEMORY_OBJECTS
   120      _SC_AIO_LISTIO_MAX,
   121  #define _SC_AIO_LISTIO_MAX              _SC_AIO_LISTIO_MAX
   122      _SC_AIO_MAX,
   123  #define _SC_AIO_MAX                     _SC_AIO_MAX
   124      _SC_AIO_PRIO_DELTA_MAX,
   125  #define _SC_AIO_PRIO_DELTA_MAX          _SC_AIO_PRIO_DELTA_MAX
   126      _SC_DELAYTIMER_MAX,
   127  #define _SC_DELAYTIMER_MAX              _SC_DELAYTIMER_MAX
   128      _SC_MQ_OPEN_MAX,
   129  #define _SC_MQ_OPEN_MAX                 _SC_MQ_OPEN_MAX
   130      _SC_MQ_PRIO_MAX,
   131  #define _SC_MQ_PRIO_MAX                 _SC_MQ_PRIO_MAX
   132      _SC_VERSION,
   133  #define _SC_VERSION                     _SC_VERSION
   134      _SC_PAGESIZE,
   135  #define _SC_PAGESIZE                    _SC_PAGESIZE
   136  #define _SC_PAGE_SIZE                   _SC_PAGESIZE
   137      _SC_RTSIG_MAX,
   138  #define _SC_RTSIG_MAX                   _SC_RTSIG_MAX
   139      _SC_SEM_NSEMS_MAX,
   140  #define _SC_SEM_NSEMS_MAX               _SC_SEM_NSEMS_MAX
   141      _SC_SEM_VALUE_MAX,
   142  #define _SC_SEM_VALUE_MAX               _SC_SEM_VALUE_MAX
   143      _SC_SIGQUEUE_MAX,
   144  #define _SC_SIGQUEUE_MAX                _SC_SIGQUEUE_MAX
   145      _SC_TIMER_MAX,
   146  #define _SC_TIMER_MAX                   _SC_TIMER_MAX
   147  
   148      /* Values for the argument to `sysconf'
   149         corresponding to _POSIX2_* symbols.  */
   150      _SC_BC_BASE_MAX,
   151  #define _SC_BC_BASE_MAX                 _SC_BC_BASE_MAX
   152      _SC_BC_DIM_MAX,
   153  #define _SC_BC_DIM_MAX                  _SC_BC_DIM_MAX

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   154      _SC_BC_SCALE_MAX,
   155  #define _SC_BC_SCALE_MAX                _SC_BC_SCALE_MAX
   156      _SC_BC_STRING_MAX,
   157  #define _SC_BC_STRING_MAX               _SC_BC_STRING_MAX
   158      _SC_COLL_WEIGHTS_MAX,
   159  #define _SC_COLL_WEIGHTS_MAX            _SC_COLL_WEIGHTS_MAX
   160      _SC_EQUIV_CLASS_MAX,
   161  #define _SC_EQUIV_CLASS_MAX             _SC_EQUIV_CLASS_MAX
   162      _SC_EXPR_NEST_MAX,
   163  #define _SC_EXPR_NEST_MAX               _SC_EXPR_NEST_MAX
   164      _SC_LINE_MAX,
   165  #define _SC_LINE_MAX                    _SC_LINE_MAX
   166      _SC_RE_DUP_MAX,
   167  #define _SC_RE_DUP_MAX                  _SC_RE_DUP_MAX
   168      _SC_CHARCLASS_NAME_MAX,
   169  #define _SC_CHARCLASS_NAME_MAX          _SC_CHARCLASS_NAME_MAX
   170  
   171      _SC_2_VERSION,
   172  #define _SC_2_VERSION                   _SC_2_VERSION
   173      _SC_2_C_BIND,
   174  #define _SC_2_C_BIND                    _SC_2_C_BIND
   175      _SC_2_C_DEV,
   176  #define _SC_2_C_DEV                     _SC_2_C_DEV
   177      _SC_2_FORT_DEV,
   178  #define _SC_2_FORT_DEV                  _SC_2_FORT_DEV
   179      _SC_2_FORT_RUN,
   180  #define _SC_2_FORT_RUN                  _SC_2_FORT_RUN
   181      _SC_2_SW_DEV,
   182  #define _SC_2_SW_DEV                    _SC_2_SW_DEV
   183      _SC_2_LOCALEDEF,
   184  #define _SC_2_LOCALEDEF                 _SC_2_LOCALEDEF
   185  
   186      _SC_PII,
   187  #define _SC_PII                         _SC_PII
   188      _SC_PII_XTI,
   189  #define _SC_PII_XTI                     _SC_PII_XTI
   190      _SC_PII_SOCKET,
   191  #define _SC_PII_SOCKET                  _SC_PII_SOCKET
   192      _SC_PII_INTERNET,
   193  #define _SC_PII_INTERNET                _SC_PII_INTERNET
   194      _SC_PII_OSI,
   195  #define _SC_PII_OSI                     _SC_PII_OSI
   196      _SC_POLL,
   197  #define _SC_POLL                        _SC_POLL
   198      _SC_SELECT,
   199  #define _SC_SELECT                      _SC_SELECT
   200      _SC_UIO_MAXIOV,
   201  #define _SC_UIO_MAXIOV                  _SC_UIO_MAXIOV
   202      _SC_IOV_MAX = _SC_UIO_MAXIOV,
   203  #define _SC_IOV_MAX                     _SC_IOV_MAX
   204      _SC_PII_INTERNET_STREAM,
   205  #define _SC_PII_INTERNET_STREAM         _SC_PII_INTERNET_STREAM
   206      _SC_PII_INTERNET_DGRAM,
   207  #define _SC_PII_INTERNET_DGRAM          _SC_PII_INTERNET_DGRAM
   208      _SC_PII_OSI_COTS,
   209  #define _SC_PII_OSI_COTS                _SC_PII_OSI_COTS
   210      _SC_PII_OSI_CLTS,
   211  #define _SC_PII_OSI_CLTS                _SC_PII_OSI_CLTS
   212      _SC_PII_OSI_M,
   213  #define _SC_PII_OSI_M                   _SC_PII_OSI_M
   214      _SC_T_IOV_MAX,
   215  #define _SC_T_IOV_MAX                   _SC_T_IOV_MAX
   216  
   217      /* Values according to POSIX 1003.1c (POSIX threads).  */
   218      _SC_THREADS,
   219  #define _SC_THREADS                     _SC_THREADS
   220      _SC_THREAD_SAFE_FUNCTIONS,
   221  #define _SC_THREAD_SAFE_FUNCTIONS       _SC_THREAD_SAFE_FUNCTIONS
   222      _SC_GETGR_R_SIZE_MAX,
   223  #define _SC_GETGR_R_SIZE_MAX            _SC_GETGR_R_SIZE_MAX
   224      _SC_GETPW_R_SIZE_MAX,
   225  #define _SC_GETPW_R_SIZE_MAX            _SC_GETPW_R_SIZE_MAX
   226      _SC_LOGIN_NAME_MAX,
   227  #define _SC_LOGIN_NAME_MAX              _SC_LOGIN_NAME_MAX
   228      _SC_TTY_NAME_MAX,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   229  #define _SC_TTY_NAME_MAX                _SC_TTY_NAME_MAX
   230      _SC_THREAD_DESTRUCTOR_ITERATIONS,
   231  #define _SC_THREAD_DESTRUCTOR_ITERATIONS _SC_THREAD_DESTRUCTOR_ITERATIO
        NS
   232      _SC_THREAD_KEYS_MAX,
   233  #define _SC_THREAD_KEYS_MAX             _SC_THREAD_KEYS_MAX
   234      _SC_THREAD_STACK_MIN,
   235  #define _SC_THREAD_STACK_MIN            _SC_THREAD_STACK_MIN
   236      _SC_THREAD_THREADS_MAX,
   237  #define _SC_THREAD_THREADS_MAX          _SC_THREAD_THREADS_MAX
   238      _SC_THREAD_ATTR_STACKADDR,
   239  #define _SC_THREAD_ATTR_STACKADDR       _SC_THREAD_ATTR_STACKADDR
   240      _SC_THREAD_ATTR_STACKSIZE,
   241  #define _SC_THREAD_ATTR_STACKSIZE       _SC_THREAD_ATTR_STACKSIZE
   242      _SC_THREAD_PRIORITY_SCHEDULING,
   243  #define _SC_THREAD_PRIORITY_SCHEDULING  _SC_THREAD_PRIORITY_SCHEDULING
   244      _SC_THREAD_PRIO_INHERIT,
   245  #define _SC_THREAD_PRIO_INHERIT         _SC_THREAD_PRIO_INHERIT
   246      _SC_THREAD_PRIO_PROTECT,
   247  #define _SC_THREAD_PRIO_PROTECT         _SC_THREAD_PRIO_PROTECT
   248      _SC_THREAD_PROCESS_SHARED,
   249  #define _SC_THREAD_PROCESS_SHARED       _SC_THREAD_PROCESS_SHARED
   250  
   251      _SC_NPROCESSORS_CONF,
   252  #define _SC_NPROCESSORS_CONF            _SC_NPROCESSORS_CONF
   253      _SC_NPROCESSORS_ONLN,
   254  #define _SC_NPROCESSORS_ONLN            _SC_NPROCESSORS_ONLN
   255      _SC_PHYS_PAGES,
   256  #define _SC_PHYS_PAGES                  _SC_PHYS_PAGES
   257      _SC_AVPHYS_PAGES,
   258  #define _SC_AVPHYS_PAGES                _SC_AVPHYS_PAGES
   259      _SC_ATEXIT_MAX,
   260  #define _SC_ATEXIT_MAX                  _SC_ATEXIT_MAX
   261      _SC_PASS_MAX,
   262  #define _SC_PASS_MAX                    _SC_PASS_MAX
   263  
   264      _SC_XOPEN_VERSION,
   265  #define _SC_XOPEN_VERSION               _SC_XOPEN_VERSION
   266      _SC_XOPEN_XCU_VERSION,
   267  #define _SC_XOPEN_XCU_VERSION           _SC_XOPEN_XCU_VERSION
   268      _SC_XOPEN_UNIX,
   269  #define _SC_XOPEN_UNIX                  _SC_XOPEN_UNIX
   270      _SC_XOPEN_CRYPT,
   271  #define _SC_XOPEN_CRYPT                 _SC_XOPEN_CRYPT
   272      _SC_XOPEN_ENH_I18N,
   273  #define _SC_XOPEN_ENH_I18N              _SC_XOPEN_ENH_I18N
   274      _SC_XOPEN_SHM,
   275  #define _SC_XOPEN_SHM                   _SC_XOPEN_SHM
   276  
   277      _SC_2_CHAR_TERM,
   278  #define _SC_2_CHAR_TERM                 _SC_2_CHAR_TERM
   279      _SC_2_C_VERSION,
   280  #define _SC_2_C_VERSION                 _SC_2_C_VERSION
   281      _SC_2_UPE,
   282  #define _SC_2_UPE                       _SC_2_UPE
   283  
   284      _SC_XOPEN_XPG2,
   285  #define _SC_XOPEN_XPG2                  _SC_XOPEN_XPG2
   286      _SC_XOPEN_XPG3,
   287  #define _SC_XOPEN_XPG3                  _SC_XOPEN_XPG3
   288      _SC_XOPEN_XPG4,
   289  #define _SC_XOPEN_XPG4                  _SC_XOPEN_XPG4
   290  
   291      _SC_CHAR_BIT,
   292  #define _SC_CHAR_BIT                    _SC_CHAR_BIT
   293      _SC_CHAR_MAX,
   294  #define _SC_CHAR_MAX                    _SC_CHAR_MAX
   295      _SC_CHAR_MIN,
   296  #define _SC_CHAR_MIN                    _SC_CHAR_MIN
   297      _SC_INT_MAX,
   298  #define _SC_INT_MAX                     _SC_INT_MAX
   299      _SC_INT_MIN,
   300  #define _SC_INT_MIN                     _SC_INT_MIN
   301      _SC_LONG_BIT,
   302  #define _SC_LONG_BIT                    _SC_LONG_BIT

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   303      _SC_WORD_BIT,
   304  #define _SC_WORD_BIT                    _SC_WORD_BIT
   305      _SC_MB_LEN_MAX,
   306  #define _SC_MB_LEN_MAX                  _SC_MB_LEN_MAX
   307      _SC_NZERO,
   308  #define _SC_NZERO                       _SC_NZERO
   309      _SC_SSIZE_MAX,
   310  #define _SC_SSIZE_MAX                   _SC_SSIZE_MAX
   311      _SC_SCHAR_MAX,
   312  #define _SC_SCHAR_MAX                   _SC_SCHAR_MAX
   313      _SC_SCHAR_MIN,
   314  #define _SC_SCHAR_MIN                   _SC_SCHAR_MIN
   315      _SC_SHRT_MAX,
   316  #define _SC_SHRT_MAX                    _SC_SHRT_MAX
   317      _SC_SHRT_MIN,
   318  #define _SC_SHRT_MIN                    _SC_SHRT_MIN
   319      _SC_UCHAR_MAX,
   320  #define _SC_UCHAR_MAX                   _SC_UCHAR_MAX
   321      _SC_UINT_MAX,
   322  #define _SC_UINT_MAX                    _SC_UINT_MAX
   323      _SC_ULONG_MAX,
   324  #define _SC_ULONG_MAX                   _SC_ULONG_MAX
   325      _SC_USHRT_MAX,
   326  #define _SC_USHRT_MAX                   _SC_USHRT_MAX
   327  
   328      _SC_NL_ARGMAX,
   329  #define _SC_NL_ARGMAX                   _SC_NL_ARGMAX
   330      _SC_NL_LANGMAX,
   331  #define _SC_NL_LANGMAX                  _SC_NL_LANGMAX
   332      _SC_NL_MSGMAX,
   333  #define _SC_NL_MSGMAX                   _SC_NL_MSGMAX
   334      _SC_NL_NMAX,
   335  #define _SC_NL_NMAX                     _SC_NL_NMAX
   336      _SC_NL_SETMAX,
   337  #define _SC_NL_SETMAX                   _SC_NL_SETMAX
   338      _SC_NL_TEXTMAX,
   339  #define _SC_NL_TEXTMAX                  _SC_NL_TEXTMAX
   340  
   341      _SC_XBS5_ILP32_OFF32,
   342  #define _SC_XBS5_ILP32_OFF32            _SC_XBS5_ILP32_OFF32
   343      _SC_XBS5_ILP32_OFFBIG,
   344  #define _SC_XBS5_ILP32_OFFBIG           _SC_XBS5_ILP32_OFFBIG
   345      _SC_XBS5_LP64_OFF64,
   346  #define _SC_XBS5_LP64_OFF64             _SC_XBS5_LP64_OFF64
   347      _SC_XBS5_LPBIG_OFFBIG,
   348  #define _SC_XBS5_LPBIG_OFFBIG           _SC_XBS5_LPBIG_OFFBIG
   349  
   350      _SC_XOPEN_LEGACY,
   351  #define _SC_XOPEN_LEGACY                _SC_XOPEN_LEGACY
   352      _SC_XOPEN_REALTIME,
   353  #define _SC_XOPEN_REALTIME              _SC_XOPEN_REALTIME
   354      _SC_XOPEN_REALTIME_THREADS,
   355  #define _SC_XOPEN_REALTIME_THREADS      _SC_XOPEN_REALTIME_THREADS
   356  
   357      _SC_ADVISORY_INFO,
   358  #define _SC_ADVISORY_INFO               _SC_ADVISORY_INFO
   359      _SC_BARRIERS,
   360  #define _SC_BARRIERS                    _SC_BARRIERS
   361      _SC_BASE,
   362  #define _SC_BASE                        _SC_BASE
   363      _SC_C_LANG_SUPPORT,
   364  #define _SC_C_LANG_SUPPORT              _SC_C_LANG_SUPPORT
   365      _SC_C_LANG_SUPPORT_R,
   366  #define _SC_C_LANG_SUPPORT_R            _SC_C_LANG_SUPPORT_R
   367      _SC_CLOCK_SELECTION,
   368  #define _SC_CLOCK_SELECTION             _SC_CLOCK_SELECTION
   369      _SC_CPUTIME,
   370  #define _SC_CPUTIME                     _SC_CPUTIME
   371      _SC_THREAD_CPUTIME,
   372  #define _SC_THREAD_CPUTIME              _SC_THREAD_CPUTIME
   373      _SC_DEVICE_IO,
   374  #define _SC_DEVICE_IO                   _SC_DEVICE_IO
   375      _SC_DEVICE_SPECIFIC,
   376  #define _SC_DEVICE_SPECIFIC             _SC_DEVICE_SPECIFIC
   377      _SC_DEVICE_SPECIFIC_R,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   378  #define _SC_DEVICE_SPECIFIC_R           _SC_DEVICE_SPECIFIC_R
   379      _SC_FD_MGMT,
   380  #define _SC_FD_MGMT                     _SC_FD_MGMT
   381      _SC_FIFO,
   382  #define _SC_FIFO                        _SC_FIFO
   383      _SC_PIPE,
   384  #define _SC_PIPE                        _SC_PIPE
   385      _SC_FILE_ATTRIBUTES,
   386  #define _SC_FILE_ATTRIBUTES             _SC_FILE_ATTRIBUTES
   387      _SC_FILE_LOCKING,
   388  #define _SC_FILE_LOCKING                _SC_FILE_LOCKING
   389      _SC_FILE_SYSTEM,
   390  #define _SC_FILE_SYSTEM                 _SC_FILE_SYSTEM
   391      _SC_MONOTONIC_CLOCK,
   392  #define _SC_MONOTONIC_CLOCK             _SC_MONOTONIC_CLOCK
   393      _SC_MULTI_PROCESS,
   394  #define _SC_MULTI_PROCESS               _SC_MULTI_PROCESS
   395      _SC_SINGLE_PROCESS,
   396  #define _SC_SINGLE_PROCESS              _SC_SINGLE_PROCESS
   397      _SC_NETWORKING,
   398  #define _SC_NETWORKING                  _SC_NETWORKING
   399      _SC_READER_WRITER_LOCKS,
   400  #define _SC_READER_WRITER_LOCKS         _SC_READER_WRITER_LOCKS
   401      _SC_SPIN_LOCKS,
   402  #define _SC_SPIN_LOCKS                  _SC_SPIN_LOCKS
   403      _SC_REGEXP,
   404  #define _SC_REGEXP                      _SC_REGEXP
   405      _SC_REGEX_VERSION,
   406  #define _SC_REGEX_VERSION               _SC_REGEX_VERSION
   407      _SC_SHELL,
   408  #define _SC_SHELL                       _SC_SHELL
   409      _SC_SIGNALS,
   410  #define _SC_SIGNALS                     _SC_SIGNALS
   411      _SC_SPAWN,
   412  #define _SC_SPAWN                       _SC_SPAWN
   413      _SC_SPORADIC_SERVER,
   414  #define _SC_SPORADIC_SERVER             _SC_SPORADIC_SERVER
   415      _SC_THREAD_SPORADIC_SERVER,
   416  #define _SC_THREAD_SPORADIC_SERVER      _SC_THREAD_SPORADIC_SERVER
   417      _SC_SYSTEM_DATABASE,
   418  #define _SC_SYSTEM_DATABASE             _SC_SYSTEM_DATABASE
   419      _SC_SYSTEM_DATABASE_R,
   420  #define _SC_SYSTEM_DATABASE_R           _SC_SYSTEM_DATABASE_R
   421      _SC_TIMEOUTS,
   422  #define _SC_TIMEOUTS                    _SC_TIMEOUTS
   423      _SC_TYPED_MEMORY_OBJECTS,
   424  #define _SC_TYPED_MEMORY_OBJECTS        _SC_TYPED_MEMORY_OBJECTS
   425      _SC_USER_GROUPS,
   426  #define _SC_USER_GROUPS                 _SC_USER_GROUPS
   427      _SC_USER_GROUPS_R,
   428  #define _SC_USER_GROUPS_R               _SC_USER_GROUPS_R
   429      _SC_2_PBS,
   430  #define _SC_2_PBS                       _SC_2_PBS
   431      _SC_2_PBS_ACCOUNTING,
   432  #define _SC_2_PBS_ACCOUNTING            _SC_2_PBS_ACCOUNTING
   433      _SC_2_PBS_LOCATE,
   434  #define _SC_2_PBS_LOCATE                _SC_2_PBS_LOCATE
   435      _SC_2_PBS_MESSAGE,
   436  #define _SC_2_PBS_MESSAGE               _SC_2_PBS_MESSAGE
   437      _SC_2_PBS_TRACK,
   438  #define _SC_2_PBS_TRACK                 _SC_2_PBS_TRACK
   439      _SC_SYMLOOP_MAX,
   440  #define _SC_SYMLOOP_MAX                 _SC_SYMLOOP_MAX
   441      _SC_STREAMS,
   442  #define _SC_STREAMS                     _SC_STREAMS
   443      _SC_2_PBS_CHECKPOINT,
   444  #define _SC_2_PBS_CHECKPOINT            _SC_2_PBS_CHECKPOINT
   445  
   446      _SC_V6_ILP32_OFF32,
   447  #define _SC_V6_ILP32_OFF32              _SC_V6_ILP32_OFF32
   448      _SC_V6_ILP32_OFFBIG,
   449  #define _SC_V6_ILP32_OFFBIG             _SC_V6_ILP32_OFFBIG
   450      _SC_V6_LP64_OFF64,
   451  #define _SC_V6_LP64_OFF64               _SC_V6_LP64_OFF64
   452      _SC_V6_LPBIG_OFFBIG,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   453  #define _SC_V6_LPBIG_OFFBIG             _SC_V6_LPBIG_OFFBIG
   454  
   455      _SC_HOST_NAME_MAX,
   456  #define _SC_HOST_NAME_MAX               _SC_HOST_NAME_MAX
   457      _SC_TRACE,
   458  #define _SC_TRACE                       _SC_TRACE
   459      _SC_TRACE_EVENT_FILTER,
   460  #define _SC_TRACE_EVENT_FILTER          _SC_TRACE_EVENT_FILTER
   461      _SC_TRACE_INHERIT,
   462  #define _SC_TRACE_INHERIT               _SC_TRACE_INHERIT
   463      _SC_TRACE_LOG,
   464  #define _SC_TRACE_LOG                   _SC_TRACE_LOG
   465  
   466      _SC_LEVEL1_ICACHE_SIZE,
   467  #define _SC_LEVEL1_ICACHE_SIZE          _SC_LEVEL1_ICACHE_SIZE
   468      _SC_LEVEL1_ICACHE_ASSOC,
   469  #define _SC_LEVEL1_ICACHE_ASSOC         _SC_LEVEL1_ICACHE_ASSOC
   470      _SC_LEVEL1_ICACHE_LINESIZE,
   471  #define _SC_LEVEL1_ICACHE_LINESIZE      _SC_LEVEL1_ICACHE_LINESIZE
   472      _SC_LEVEL1_DCACHE_SIZE,
   473  #define _SC_LEVEL1_DCACHE_SIZE          _SC_LEVEL1_DCACHE_SIZE
   474      _SC_LEVEL1_DCACHE_ASSOC,
   475  #define _SC_LEVEL1_DCACHE_ASSOC         _SC_LEVEL1_DCACHE_ASSOC
   476      _SC_LEVEL1_DCACHE_LINESIZE,
   477  #define _SC_LEVEL1_DCACHE_LINESIZE      _SC_LEVEL1_DCACHE_LINESIZE
   478      _SC_LEVEL2_CACHE_SIZE,
   479  #define _SC_LEVEL2_CACHE_SIZE           _SC_LEVEL2_CACHE_SIZE
   480      _SC_LEVEL2_CACHE_ASSOC,
   481  #define _SC_LEVEL2_CACHE_ASSOC          _SC_LEVEL2_CACHE_ASSOC
   482      _SC_LEVEL2_CACHE_LINESIZE,
   483  #define _SC_LEVEL2_CACHE_LINESIZE       _SC_LEVEL2_CACHE_LINESIZE
   484      _SC_LEVEL3_CACHE_SIZE,
   485  #define _SC_LEVEL3_CACHE_SIZE           _SC_LEVEL3_CACHE_SIZE
   486      _SC_LEVEL3_CACHE_ASSOC,
   487  #define _SC_LEVEL3_CACHE_ASSOC          _SC_LEVEL3_CACHE_ASSOC
   488      _SC_LEVEL3_CACHE_LINESIZE,
   489  #define _SC_LEVEL3_CACHE_LINESIZE       _SC_LEVEL3_CACHE_LINESIZE
   490      _SC_LEVEL4_CACHE_SIZE,
   491  #define _SC_LEVEL4_CACHE_SIZE           _SC_LEVEL4_CACHE_SIZE
   492      _SC_LEVEL4_CACHE_ASSOC,
   493  #define _SC_LEVEL4_CACHE_ASSOC          _SC_LEVEL4_CACHE_ASSOC
   494      _SC_LEVEL4_CACHE_LINESIZE,
   495  #define _SC_LEVEL4_CACHE_LINESIZE       _SC_LEVEL4_CACHE_LINESIZE
   496      /* Leave room here, maybe we need a few more cache levels some day.
          */
   497  
   498      _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,
   499  #define _SC_IPV6                        _SC_IPV6
   500      _SC_RAW_SOCKETS,
   501  #define _SC_RAW_SOCKETS                 _SC_RAW_SOCKETS
   502  
   503      _SC_V7_ILP32_OFF32,
   504  #define _SC_V7_ILP32_OFF32              _SC_V7_ILP32_OFF32
   505      _SC_V7_ILP32_OFFBIG,
   506  #define _SC_V7_ILP32_OFFBIG             _SC_V7_ILP32_OFFBIG
   507      _SC_V7_LP64_OFF64,
   508  #define _SC_V7_LP64_OFF64               _SC_V7_LP64_OFF64
   509      _SC_V7_LPBIG_OFFBIG,
   510  #define _SC_V7_LPBIG_OFFBIG             _SC_V7_LPBIG_OFFBIG
   511  
   512      _SC_SS_REPL_MAX,
   513  #define _SC_SS_REPL_MAX                 _SC_SS_REPL_MAX
   514  
   515      _SC_TRACE_EVENT_NAME_MAX,
   516  #define _SC_TRACE_EVENT_NAME_MAX        _SC_TRACE_EVENT_NAME_MAX
   517      _SC_TRACE_NAME_MAX,
   518  #define _SC_TRACE_NAME_MAX              _SC_TRACE_NAME_MAX
   519      _SC_TRACE_SYS_MAX,
   520  #define _SC_TRACE_SYS_MAX               _SC_TRACE_SYS_MAX
   521      _SC_TRACE_USER_EVENT_MAX,
   522  #define _SC_TRACE_USER_EVENT_MAX        _SC_TRACE_USER_EVENT_MAX
   523  
   524      _SC_XOPEN_STREAMS,
   525  #define _SC_XOPEN_STREAMS               _SC_XOPEN_STREAMS
   526  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   527      _SC_THREAD_ROBUST_PRIO_INHERIT,
   528  #define _SC_THREAD_ROBUST_PRIO_INHERIT  _SC_THREAD_ROBUST_PRIO_INHERIT
   529      _SC_THREAD_ROBUST_PRIO_PROTECT
   530  #define _SC_THREAD_ROBUST_PRIO_PROTECT  _SC_THREAD_ROBUST_PRIO_PROTECT
   531    };
   532  
   533  /* Values for the NAME argument to `confstr'.  */
   534  enum
   535    {
   536      _CS_PATH,                   /* The default search path.  */
   537  #define _CS_PATH                _CS_PATH
   538  
   539      _CS_V6_WIDTH_RESTRICTED_ENVS,
   540  #define _CS_V6_WIDTH_RESTRICTED_ENVS    _CS_V6_WIDTH_RESTRICTED_ENVS
   541  #define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS      _CS_V6_WIDTH_RESTRICTED
        _ENVS
   542  
   543      _CS_GNU_LIBC_VERSION,
   544  #define _CS_GNU_LIBC_VERSION    _CS_GNU_LIBC_VERSION
   545      _CS_GNU_LIBPTHREAD_VERSION,
   546  #define _CS_GNU_LIBPTHREAD_VERSION      _CS_GNU_LIBPTHREAD_VERSION
   547  
   548      _CS_V5_WIDTH_RESTRICTED_ENVS,
   549  #define _CS_V5_WIDTH_RESTRICTED_ENVS    _CS_V5_WIDTH_RESTRICTED_ENVS
   550  #define _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS      _CS_V5_WIDTH_RESTRICTED
        _ENVS
   551  
   552      _CS_V7_WIDTH_RESTRICTED_ENVS,
   553  #define _CS_V7_WIDTH_RESTRICTED_ENVS    _CS_V7_WIDTH_RESTRICTED_ENVS
   554  #define _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS      _CS_V7_WIDTH_RESTRICTED
        _ENVS
   555  
   556      _CS_LFS_CFLAGS = 1000,
   557  #define _CS_LFS_CFLAGS  _CS_LFS_CFLAGS
   558      _CS_LFS_LDFLAGS,
   559  #define _CS_LFS_LDFLAGS _CS_LFS_LDFLAGS
   560      _CS_LFS_LIBS,
   561  #define _CS_LFS_LIBS            _CS_LFS_LIBS
   562      _CS_LFS_LINTFLAGS,
   563  #define _CS_LFS_LINTFLAGS       _CS_LFS_LINTFLAGS
   564      _CS_LFS64_CFLAGS,
   565  #define _CS_LFS64_CFLAGS        _CS_LFS64_CFLAGS
   566      _CS_LFS64_LDFLAGS,
   567  #define _CS_LFS64_LDFLAGS       _CS_LFS64_LDFLAGS
   568      _CS_LFS64_LIBS,
   569  #define _CS_LFS64_LIBS  _CS_LFS64_LIBS
   570      _CS_LFS64_LINTFLAGS,
   571  #define _CS_LFS64_LINTFLAGS     _CS_LFS64_LINTFLAGS
   572  
   573      _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
   574  #define _CS_XBS5_ILP32_OFF32_CFLAGS _CS_XBS5_ILP32_OFF32_CFLAGS
   575      _CS_XBS5_ILP32_OFF32_LDFLAGS,
   576  #define _CS_XBS5_ILP32_OFF32_LDFLAGS _CS_XBS5_ILP32_OFF32_LDFLAGS
   577      _CS_XBS5_ILP32_OFF32_LIBS,
   578  #define _CS_XBS5_ILP32_OFF32_LIBS _CS_XBS5_ILP32_OFF32_LIBS
   579      _CS_XBS5_ILP32_OFF32_LINTFLAGS,
   580  #define _CS_XBS5_ILP32_OFF32_LINTFLAGS _CS_XBS5_ILP32_OFF32_LINTFLAGS
   581      _CS_XBS5_ILP32_OFFBIG_CFLAGS,
   582  #define _CS_XBS5_ILP32_OFFBIG_CFLAGS _CS_XBS5_ILP32_OFFBIG_CFLAGS
   583      _CS_XBS5_ILP32_OFFBIG_LDFLAGS,
   584  #define _CS_XBS5_ILP32_OFFBIG_LDFLAGS _CS_XBS5_ILP32_OFFBIG_LDFLAGS
   585      _CS_XBS5_ILP32_OFFBIG_LIBS,
   586  #define _CS_XBS5_ILP32_OFFBIG_LIBS _CS_XBS5_ILP32_OFFBIG_LIBS
   587      _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,
   588  #define _CS_XBS5_ILP32_OFFBIG_LINTFLAGS _CS_XBS5_ILP32_OFFBIG_LINTFLAGS
   589      _CS_XBS5_LP64_OFF64_CFLAGS,
   590  #define _CS_XBS5_LP64_OFF64_CFLAGS _CS_XBS5_LP64_OFF64_CFLAGS
   591      _CS_XBS5_LP64_OFF64_LDFLAGS,
   592  #define _CS_XBS5_LP64_OFF64_LDFLAGS _CS_XBS5_LP64_OFF64_LDFLAGS
   593      _CS_XBS5_LP64_OFF64_LIBS,
   594  #define _CS_XBS5_LP64_OFF64_LIBS _CS_XBS5_LP64_OFF64_LIBS
   595      _CS_XBS5_LP64_OFF64_LINTFLAGS,
   596  #define _CS_XBS5_LP64_OFF64_LINTFLAGS _CS_XBS5_LP64_OFF64_LINTFLAGS
   597      _CS_XBS5_LPBIG_OFFBIG_CFLAGS,
   598  #define _CS_XBS5_LPBIG_OFFBIG_CFLAGS _CS_XBS5_LPBIG_OFFBIG_CFLAGS

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   599      _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,
   600  #define _CS_XBS5_LPBIG_OFFBIG_LDFLAGS _CS_XBS5_LPBIG_OFFBIG_LDFLAGS
   601      _CS_XBS5_LPBIG_OFFBIG_LIBS,
   602  #define _CS_XBS5_LPBIG_OFFBIG_LIBS _CS_XBS5_LPBIG_OFFBIG_LIBS
   603      _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,
   604  #define _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
   605  
   606      _CS_POSIX_V6_ILP32_OFF32_CFLAGS,
   607  #define _CS_POSIX_V6_ILP32_OFF32_CFLAGS _CS_POSIX_V6_ILP32_OFF32_CFLAGS
   608      _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,
   609  #define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS _CS_POSIX_V6_ILP32_OFF32_LDFLA
        GS
   610      _CS_POSIX_V6_ILP32_OFF32_LIBS,
   611  #define _CS_POSIX_V6_ILP32_OFF32_LIBS _CS_POSIX_V6_ILP32_OFF32_LIBS
   612      _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,
   613  #define _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS _CS_POSIX_V6_ILP32_OFF32_LIN
        TFLAGS
   614      _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,
   615  #define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS _CS_POSIX_V6_ILP32_OFFBIG_CFLA
        GS
   616      _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,
   617  #define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS _CS_POSIX_V6_ILP32_OFFBIG_LDF
        LAGS
   618      _CS_POSIX_V6_ILP32_OFFBIG_LIBS,
   619  #define _CS_POSIX_V6_ILP32_OFFBIG_LIBS _CS_POSIX_V6_ILP32_OFFBIG_LIBS
   620      _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,
   621  #define _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS _CS_POSIX_V6_ILP32_OFFBIG_L
        INTFLAGS
   622      _CS_POSIX_V6_LP64_OFF64_CFLAGS,
   623  #define _CS_POSIX_V6_LP64_OFF64_CFLAGS _CS_POSIX_V6_LP64_OFF64_CFLAGS
   624      _CS_POSIX_V6_LP64_OFF64_LDFLAGS,
   625  #define _CS_POSIX_V6_LP64_OFF64_LDFLAGS _CS_POSIX_V6_LP64_OFF64_LDFLAGS
   626      _CS_POSIX_V6_LP64_OFF64_LIBS,
   627  #define _CS_POSIX_V6_LP64_OFF64_LIBS _CS_POSIX_V6_LP64_OFF64_LIBS
   628      _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,
   629  #define _CS_POSIX_V6_LP64_OFF64_LINTFLAGS _CS_POSIX_V6_LP64_OFF64_LINTF
        LAGS
   630      _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,
   631  #define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS _CS_POSIX_V6_LPBIG_OFFBIG_CFLA
        GS
   632      _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,
   633  #define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS _CS_POSIX_V6_LPBIG_OFFBIG_LDF
        LAGS
   634      _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,
   635  #define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS _CS_POSIX_V6_LPBIG_OFFBIG_LIBS
   636      _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,
   637  #define _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS _CS_POSIX_V6_LPBIG_OFFBIG_L
        INTFLAGS
   638  
   639      _CS_POSIX_V7_ILP32_OFF32_CFLAGS,
   640  #define _CS_POSIX_V7_ILP32_OFF32_CFLAGS _CS_POSIX_V7_ILP32_OFF32_CFLAGS
   641      _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,
   642  #define _CS_POSIX_V7_ILP32_OFF32_LDFLAGS _CS_POSIX_V7_ILP32_OFF32_LDFLA
        GS
   643      _CS_POSIX_V7_ILP32_OFF32_LIBS,
   644  #define _CS_POSIX_V7_ILP32_OFF32_LIBS _CS_POSIX_V7_ILP32_OFF32_LIBS
   645      _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,
   646  #define _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS _CS_POSIX_V7_ILP32_OFF32_LIN
        TFLAGS
   647      _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,
   648  #define _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS _CS_POSIX_V7_ILP32_OFFBIG_CFLA
        GS
   649      _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,
   650  #define _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS _CS_POSIX_V7_ILP32_OFFBIG_LDF
        LAGS
   651      _CS_POSIX_V7_ILP32_OFFBIG_LIBS,
   652  #define _CS_POSIX_V7_ILP32_OFFBIG_LIBS _CS_POSIX_V7_ILP32_OFFBIG_LIBS
   653      _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,
   654  #define _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS _CS_POSIX_V7_ILP32_OFFBIG_L
        INTFLAGS
   655      _CS_POSIX_V7_LP64_OFF64_CFLAGS,
   656  #define _CS_POSIX_V7_LP64_OFF64_CFLAGS _CS_POSIX_V7_LP64_OFF64_CFLAGS
   657      _CS_POSIX_V7_LP64_OFF64_LDFLAGS,
   658  #define _CS_POSIX_V7_LP64_OFF64_LDFLAGS _CS_POSIX_V7_LP64_OFF64_LDFLAGS
   659      _CS_POSIX_V7_LP64_OFF64_LIBS,

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   660  #define _CS_POSIX_V7_LP64_OFF64_LIBS _CS_POSIX_V7_LP64_OFF64_LIBS
   661      _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,
   662  #define _CS_POSIX_V7_LP64_OFF64_LINTFLAGS _CS_POSIX_V7_LP64_OFF64_LINTF
        LAGS
   663      _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,
   664  #define _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS _CS_POSIX_V7_LPBIG_OFFBIG_CFLA
        GS
   665      _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,
   666  #define _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS _CS_POSIX_V7_LPBIG_OFFBIG_LDF
        LAGS
   667      _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,
   668  #define _CS_POSIX_V7_LPBIG_OFFBIG_LIBS _CS_POSIX_V7_LPBIG_OFFBIG_LIBS
   669      _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,
   670  #define _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS _CS_POSIX_V7_LPBIG_OFFBIG_L
        INTFLAGS
   671  
   672      _CS_V6_ENV,
   673  #define _CS_V6_ENV                      _CS_V6_ENV
   674      _CS_V7_ENV
   675  #define _CS_V7_ENV                      _CS_V7_ENV
   676    };
Close file: /usr/include/bits/confname.h
   609  #include <bits/confname.h>
   610  
   611  /* Get file-specific configuration information about PATH.  */
   612  extern long int pathconf (const char *__path, int __name)
   613       __THROW __nonnull ((1));
   614  
   615  /* Get file-specific configuration about descriptor FD.  */
   616  extern long int fpathconf (int __fd, int __name) __THROW;
   617  
   618  /* Get the value of the system variable NAME.  */
   619  extern long int sysconf (int __name) __THROW;
   620  
   621  #ifdef  __USE_POSIX2
   622  /* Get the value of the string-valued system variable NAME.  */
   623  extern size_t confstr (int __name, char *__buf, size_t __len) __THROW;
   624  #endif
   625  
   626  
   627  /* Get the process ID of the calling process.  */
   628  extern __pid_t getpid (void) __THROW;
   629  
   630  /* Get the process ID of the calling process's parent.  */
   631  extern __pid_t getppid (void) __THROW;
   632  
   633  /* Get the process group ID of the calling process.
   634     This function is different on old BSD. */
   635  #ifndef __FAVOR_BSD
   636  extern __pid_t getpgrp (void) __THROW;
   637  #else
   638  # ifdef __REDIRECT_NTH
   639  extern __pid_t __REDIRECT_NTH (getpgrp, (__pid_t __pid), __getpgid);
   640  # else
   641  #  define getpgrp __getpgid
   642  # endif
   643  #endif
   644  
   645  /* Get the process group ID of process PID.  */
   646  extern __pid_t __getpgid (__pid_t __pid) __THROW;
   647  #if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8
   648  extern __pid_t getpgid (__pid_t __pid) __THROW;
   649  #endif
   650  
   651  
   652  /* Set the process group ID of the process matching PID to PGID.
   653     If PID is zero, the current process's process group ID is set.
   654     If PGID is zero, the process ID of the process is used.  */
   655  extern int setpgid (__pid_t __pid, __pid_t __pgid) __THROW;
   656  
   657  #if defined __USE_SVID || defined __USE_BSD || defined __USE_XOPEN_EXTE
        NDED
   658  /* Both System V and BSD have `setpgrp' functions, but with different
   659     calling conventions.  The BSD function is the same as POSIX.1 `setpg
        id'

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   660     (above).  The System V function takes no arguments and puts the call
        ing
   661     process in its on group like `setpgid (0, 0)'.
   662  
   663     New programs should always use `setpgid' instead.
   664  
   665     The default in GNU is to provide the System V function.  The BSD
   666     function is available under -D_BSD_SOURCE.  */
   667  
   668  # ifndef __FAVOR_BSD
   669  
   670  /* Set the process group ID of the calling process to its own PID.
   671     This is exactly the same as `setpgid (0, 0)'.  */
   672  extern int setpgrp (void) __THROW;
   673  
   674  # else
   675  
   676  /* Another name for `setpgid' (above).  */
   677  #  ifdef __REDIRECT_NTH
   678  extern int __REDIRECT_NTH (setpgrp, (__pid_t __pid, __pid_t __pgrp), se
        tpgid);
   679  #  else
   680  #   define setpgrp setpgid
   681  #  endif
   682  
   683  # endif /* Favor BSD.  */
   684  #endif  /* Use SVID or BSD.  */
   685  
   686  /* Create a new session with the calling process as its leader.
   687     The process group IDs of the session and the calling process
   688     are set to the process ID of the calling process, which is returned.
          */
   689  extern __pid_t setsid (void) __THROW;
   690  
   691  #if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8
   692  /* Return the session ID of the given process.  */
   693  extern __pid_t getsid (__pid_t __pid) __THROW;
   694  #endif
   695  
   696  /* Get the real user ID of the calling process.  */
   697  extern __uid_t getuid (void) __THROW;
   698  
   699  /* Get the effective user ID of the calling process.  */
   700  extern __uid_t geteuid (void) __THROW;
   701  
   702  /* Get the real group ID of the calling process.  */
   703  extern __gid_t getgid (void) __THROW;
   704  
   705  /* Get the effective group ID of the calling process.  */
   706  extern __gid_t getegid (void) __THROW;
   707  
   708  /* If SIZE is zero, return the number of supplementary groups
   709     the calling process is in.  Otherwise, fill in the group IDs
   710     of its supplementary groups in LIST and return the number written.  
        */
   711  extern int getgroups (int __size, __gid_t __list[]) __THROW __wur;
   712  
   713  #ifdef  __USE_GNU
   714  /* Return nonzero iff the calling process is in group GID.  */
   715  extern int group_member (__gid_t __gid) __THROW;
   716  #endif
   717  
   718  /* Set the user ID of the calling process to UID.
   719     If the calling process is the super-user, set the real
   720     and effective user IDs, and the saved set-user-ID to UID;
   721     if not, the effective user ID is set to UID.  */
   722  extern int setuid (__uid_t __uid) __THROW __wur;
   723  
   724  #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED
   725  /* Set the real user ID of the calling process to RUID,
   726     and the effective user ID of the calling process to EUID.  */
   727  extern int setreuid (__uid_t __ruid, __uid_t __euid) __THROW __wur;
   728  #endif
   729  
   730  #if defined __USE_BSD || defined __USE_XOPEN2K

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   731  /* Set the effective user ID of the calling process to UID.  */
   732  extern int seteuid (__uid_t __uid) __THROW __wur;
   733  #endif /* Use BSD.  */
   734  
   735  /* Set the group ID of the calling process to GID.
   736     If the calling process is the super-user, set the real
   737     and effective group IDs, and the saved set-group-ID to GID;
   738     if not, the effective group ID is set to GID.  */
   739  extern int setgid (__gid_t __gid) __THROW __wur;
   740  
   741  #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED
   742  /* Set the real group ID of the calling process to RGID,
   743     and the effective group ID of the calling process to EGID.  */
   744  extern int setregid (__gid_t __rgid, __gid_t __egid) __THROW __wur;
   745  #endif
   746  
   747  #if defined __USE_BSD || defined __USE_XOPEN2K
   748  /* Set the effective group ID of the calling process to GID.  */
   749  extern int setegid (__gid_t __gid) __THROW __wur;
   750  #endif /* Use BSD.  */
   751  
   752  #ifdef __USE_GNU
   753  /* Fetch the real user ID, effective user ID, and saved-set user ID,
   754     of the calling process.  */
   755  extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid
        )
   756       __THROW;
   757  
   758  /* Fetch the real group ID, effective group ID, and saved-set group ID,
   759     of the calling process.  */
   760  extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid
        )
   761       __THROW;
   762  
   763  /* Set the real user ID, effective user ID, and saved-set user ID,
   764     of the calling process to RUID, EUID, and SUID, respectively.  */
   765  extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
   766       __THROW __wur;
   767  
   768  /* Set the real group ID, effective group ID, and saved-set group ID,
   769     of the calling process to RGID, EGID, and SGID, respectively.  */
   770  extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
   771       __THROW __wur;
   772  #endif
   773  
   774  
   775  /* Clone the calling process, creating an exact copy.
   776     Return -1 for errors, 0 to the new process,
   777     and the process ID of the new process to the old process.  */
   778  extern __pid_t fork (void) __THROWNL;
   779  
   780  #if (defined __USE_XOPEN_EXTENDED && !defined __USE_XOPEN2K8) \
   781      || defined __USE_BSD
   782  /* Clone the calling process, but without copying the whole address spa
        ce.
   783     The calling process is suspended until the new process exits or is
   784     replaced by a call to `execve'.  Return -1 for errors, 0 to the new 
        process,
   785     and the process ID of the new process to the old process.  */
   786  extern __pid_t vfork (void) __THROW;
   787  #endif /* Use BSD or XPG < 7. */
   788  
   789  
   790  /* Return the pathname of the terminal FD is open on, or NULL on errors
        .
   791     The returned storage is good only until the next call to this functi
        on.  */
   792  extern char *ttyname (int __fd) __THROW;
   793  
   794  /* Store at most BUFLEN characters of the pathname of the terminal FD i
        s
   795     open on in BUF.  Return 0 on success, otherwise an error number.  */
   796  extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
   797       __THROW __nonnull ((2)) __wur;
   798  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   799  /* Return 1 if FD is a valid descriptor associated
   800     with a terminal, zero if not.  */
   801  extern int isatty (int __fd) __THROW;
   802  
   803  #if defined __USE_BSD \
   804      || (defined __USE_XOPEN_EXTENDED && !defined __USE_UNIX98)
   805  /* Return the index into the active-logins file (utmp) for
   806     the controlling terminal.  */
   807  extern int ttyslot (void) __THROW;
   808  #endif
   809  
   810  
   811  /* Make a link to FROM named TO.  */
   812  extern int link (const char *__from, const char *__to)
   813       __THROW __nonnull ((1, 2)) __wur;
   814  
   815  #ifdef __USE_ATFILE
   816  /* Like link but relative paths in TO and FROM are interpreted relative
   817     to FROMFD and TOFD respectively.  */
   818  extern int linkat (int __fromfd, const char *__from, int __tofd,
   819                     const char *__to, int __flags)
   820       __THROW __nonnull ((2, 4)) __wur;
   821  #endif
   822  
   823  #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED || defined __USE_
        XOPEN2K
   824  /* Make a symbolic link to FROM named TO.  */
   825  extern int symlink (const char *__from, const char *__to)
   826       __THROW __nonnull ((1, 2)) __wur;
   827  
   828  /* Read the contents of the symbolic link PATH into no more than
   829     LEN bytes of BUF.  The contents are not null-terminated.
   830     Returns the number of characters read, or -1 for errors.  */
   831  extern ssize_t readlink (const char *__restrict __path,
   832                           char *__restrict __buf, size_t __len)
   833       __THROW __nonnull ((1, 2)) __wur;
   834  #endif /* Use BSD.  */
   835  
   836  #ifdef __USE_ATFILE
   837  /* Like symlink but a relative path in TO is interpreted relative to TO
        FD.  */
   838  extern int symlinkat (const char *__from, int __tofd,
   839                        const char *__to) __THROW __nonnull ((1, 3)) __wu
        r;
   840  
   841  /* Like readlink but a relative PATH is interpreted relative to FD.  */
   842  extern ssize_t readlinkat (int __fd, const char *__restrict __path,
   843                             char *__restrict __buf, size_t __len)
   844       __THROW __nonnull ((2, 3)) __wur;
   845  #endif
   846  
   847  /* Remove the link NAME.  */
   848  extern int unlink (const char *__name) __THROW __nonnull ((1));
   849  
   850  #ifdef __USE_ATFILE
   851  /* Remove the link NAME relative to FD.  */
   852  extern int unlinkat (int __fd, const char *__name, int __flag)
   853       __THROW __nonnull ((2));
   854  #endif
   855  
   856  /* Remove the directory PATH.  */
   857  extern int rmdir (const char *__path) __THROW __nonnull ((1));
   858  
   859  
   860  /* Return the foreground process group ID of FD.  */
   861  extern __pid_t tcgetpgrp (int __fd) __THROW;
   862  
   863  /* Set the foreground process group ID of FD set PGRP_ID.  */
   864  extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __THROW;
   865  
   866  
   867  /* Return the login name of the user.
   868  
   869     This function is a possible cancellation point and therefore not
   870     marked with __THROW.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   871  extern char *getlogin (void);
   872  #if defined __USE_REENTRANT || defined __USE_POSIX199506
   873  /* Return at most NAME_LEN characters of the login name of the user in 
        NAME.
   874     If it cannot be determined or some other error occurred, return the 
        error
   875     code.  Otherwise return 0.
   876  
   877     This function is a possible cancellation point and therefore not
   878     marked with __THROW.  */
   879  extern int getlogin_r (char *__name, size_t __name_len) __nonnull ((1))
        ;
   880  #endif
   881  
   882  #ifdef  __USE_BSD
   883  /* Set the login name returned by `getlogin'.  */
   884  extern int setlogin (const char *__name) __THROW __nonnull ((1));
   885  #endif
   886  
   887  
   888  #ifdef  __USE_POSIX2
   889  /* Get definitions and prototypes for functions to process the
   890     arguments in ARGV (ARGC of them, minus the program name) for
   891     options given in OPTS.  */
   892  # define __need_getopt
Open file: /usr/include/getopt.h
     1  /* Declarations for getopt.
     2     Copyright (C) 1989-1994,1996-1999,2001,2003,2004,2009,2010
     3     Free Software Foundation, Inc.
     4     This file is part of the GNU C Library.
     5  
     6     The GNU C Library is free software; you can redistribute it and/or
     7     modify it under the terms of the GNU Lesser General Public
     8     License as published by the Free Software Foundation; either
     9     version 2.1 of the License, or (at your option) any later version.
    10  
    11     The GNU C Library is distributed in the hope that it will be useful,
    12     but WITHOUT ANY WARRANTY; without even the implied warranty of
    13     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    14     Lesser General Public License for more details.
    15  
    16     You should have received a copy of the GNU Lesser General Public
    17     License along with the GNU C Library; if not, see
    18     <http://www.gnu.org/licenses/>.  */
    19  
    20  #ifndef _GETOPT_H
    21  
    22  #ifndef __need_getopt
    23  # define _GETOPT_H 1
    24  #endif
    25  
    26  /* If __GNU_LIBRARY__ is not already defined, either we are being used
    27     standalone, or this is the first header included in the source file.
    28     If we are being used with glibc, we need to include <features.h>, bu
        t
    29     that does not exist if we are standalone.  So: if __GNU_LIBRARY__ is
    30     not defined, include <ctype.h>, which will pull in <features.h> for 
        us
    31     if it's from glibc.  (Why ctype.h?  It's guaranteed to exist and it
    32     doesn't flood the namespace with stuff the way some other headers do
        .)  */
    33  #if !defined __GNU_LIBRARY__
    34  # include <ctype.h>
    35  #endif
    36  
    37  #ifndef __THROW
    38  # ifndef __GNUC_PREREQ
    39  #  define __GNUC_PREREQ(maj, min) (0)
    40  # endif
    41  # if defined __cplusplus && __GNUC_PREREQ (2,8)
    42  #  define __THROW       throw ()
    43  # else
    44  #  define __THROW
    45  # endif
    46  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    47  
    48  #ifdef  __cplusplus
    49  extern "C" {
    50  #endif
    51  
    52  /* For communication from `getopt' to the caller.
    53     When `getopt' finds an option that takes an argument,
    54     the argument value is returned here.
    55     Also, when `ordering' is RETURN_IN_ORDER,
    56     each non-option ARGV-element is returned here.  */
    57  
    58  extern char *optarg;
    59  
    60  /* Index in ARGV of the next element to be scanned.
    61     This is used for communication to and from the caller
    62     and for communication between successive calls to `getopt'.
    63  
    64     On entry to `getopt', zero means this is the first call; initialize.
    65  
    66     When `getopt' returns -1, this is the index of the first of the
    67     non-option elements that the caller should itself scan.
    68  
    69     Otherwise, `optind' communicates from one call to the next
    70     how much of ARGV has been scanned so far.  */
    71  
    72  extern int optind;
    73  
    74  /* Callers store zero here to inhibit the error message `getopt' prints
    75     for unrecognized options.  */
    76  
    77  extern int opterr;
    78  
    79  /* Set to an option character which was unrecognized.  */
    80  
    81  extern int optopt;
    82  
    83  #ifndef __need_getopt
    84  /* Describe the long-named options requested by the application.
    85     The LONG_OPTIONS argument to getopt_long or getopt_long_only is a ve
        ctor
    86     of `struct option' terminated by an element containing a name which 
        is
    87     zero.
    88  
    89     The field `has_arg' is:
    90     no_argument          (or 0) if the option does not take an argument,
    91     required_argument    (or 1) if the option requires an argument,
    92     optional_argument    (or 2) if the option takes an optional argument
        .
    93  
    94     If the field `flag' is not NULL, it points to a variable that is set
    95     to the value given in the field `val' when the option is found, but
    96     left unchanged if the option is not found.
    97  
    98     To have a long-named option do something other than set an `int' to
    99     a compiled-in constant, such as set a value from `optarg', set the
   100     option's `flag' field to zero and its `val' field to a nonzero
   101     value (the equivalent single-letter option character, if there is
   102     one).  For long options that have a zero `flag' field, `getopt'
   103     returns the contents of the `val' field.  */
   104  
   105  struct option
   106  {
   107    const char *name;
   108    /* has_arg can't be an enum because some compilers complain about
   109       type mismatches in all the code that assumes it is an int.  */
   110    int has_arg;
   111    int *flag;
   112    int val;
   113  };
   114  
   115  /* Names for the values of the `has_arg' field of `struct option'.  */
   116  
   117  # define no_argument            0
   118  # define required_argument      1

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   119  # define optional_argument      2
   120  #endif  /* need getopt */
   121  
   122  
   123  /* Get definitions and prototypes for functions to process the
   124     arguments in ARGV (ARGC of them, minus the program name) for
   125     options given in OPTS.
   126  
   127     Return the option character from OPTS just read.  Return -1 when
   128     there are no more options.  For unrecognized options, or options
   129     missing arguments, `optopt' is set to the option letter, and '?' is
   130     returned.
   131  
   132     The OPTS string is a list of characters which are recognized option
   133     letters, optionally followed by colons, specifying that that letter
   134     takes an argument, to be placed in `optarg'.
   135  
   136     If a letter in OPTS is followed by two colons, its argument is
   137     optional.  This behavior is specific to the GNU `getopt'.
   138  
   139     The argument `--' causes premature termination of argument
   140     scanning, explicitly telling `getopt' that there are no more
   141     options.
   142  
   143     If OPTS begins with `--', then non-option arguments are treated as
   144     arguments to the option '\0'.  This behavior is specific to the GNU
   145     `getopt'.  */
   146  
   147  #ifdef __GNU_LIBRARY__
   148  /* Many other libraries have conflicting prototypes for getopt, with
   149     differences in the consts, in stdlib.h.  To avoid compilation
   150     errors, only prototype getopt for the GNU C library.  */
   151  extern int getopt (int ___argc, char *const *___argv, const char *__sho
        rtopts)
   152         __THROW;
   153  
   154  # if defined __need_getopt && defined __USE_POSIX2 \
   155    && !defined __USE_POSIX_IMPLICITLY && !defined __USE_GNU
   156  /* The GNU getopt has more functionality than the standard version.  Th
        e
   157     additional functionality can be disable at runtime.  This redirectio
        n
   158     helps to also do this at runtime.  */
   159  #  ifdef __REDIRECT
   160    extern int __REDIRECT_NTH (getopt, (int ___argc, char *const *___argv
        ,
   161                                        const char *__shortopts),
   162                               __posix_getopt);
   163  #  else
   164  extern int __posix_getopt (int ___argc, char *const *___argv,
   165                             const char *__shortopts) __THROW;
   166  #   define getopt __posix_getopt
   167  #  endif
   168  # endif
   169  #else /* not __GNU_LIBRARY__ */
   170  extern int getopt ();
   171  #endif /* __GNU_LIBRARY__ */
   172  
   173  #ifndef __need_getopt
   174  extern int getopt_long (int ___argc, char *const *___argv,
   175                          const char *__shortopts,
   176                          const struct option *__longopts, int *__longind
        )
   177         __THROW;
   178  extern int getopt_long_only (int ___argc, char *const *___argv,
   179                               const char *__shortopts,
   180                               const struct option *__longopts, int *__lo
        ngind)
   181         __THROW;
   182  
   183  #endif
   184  
   185  #ifdef  __cplusplus
   186  }
   187  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   188  
   189  /* Make sure we later can get all the definitions and declarations.  */
   190  #undef __need_getopt
   191  
   192  #endif /* getopt.h */
Close file: /usr/include/getopt.h
   893  # include <getopt.h>
   894  #endif
   895  
   896  
   897  #if defined __USE_BSD || defined __USE_UNIX98 || defined __USE_XOPEN2K
   898  /* Put the name of the current host in no more than LEN bytes of NAME.
   899     The result is null-terminated if LEN is large enough for the full
   900     name and the terminator.  */
   901  extern int gethostname (char *__name, size_t __len) __THROW __nonnull (
        (1));
   902  #endif
   903  
   904  
   905  #if defined __USE_BSD || (defined __USE_XOPEN && !defined __USE_UNIX98)
   906  /* Set the name of the current host to NAME, which is LEN bytes long.
   907     This call is restricted to the super-user.  */
   908  extern int sethostname (const char *__name, size_t __len)
   909       __THROW __nonnull ((1)) __wur;
   910  
   911  /* Set the current machine's Internet number to ID.
   912     This call is restricted to the super-user.  */
   913  extern int sethostid (long int __id) __THROW __wur;
   914  
   915  
   916  /* Get and set the NIS (aka YP) domain name, if any.
   917     Called just like `gethostname' and `sethostname'.
   918     The NIS domain name is usually the empty string when not using NIS. 
         */
   919  extern int getdomainname (char *__name, size_t __len)
   920       __THROW __nonnull ((1)) __wur;
   921  extern int setdomainname (const char *__name, size_t __len)
   922       __THROW __nonnull ((1)) __wur;
   923  
   924  
   925  /* Revoke access permissions to all processes currently communicating
   926     with the control terminal, and then send a SIGHUP signal to the proc
        ess
   927     group of the control terminal.  */
   928  extern int vhangup (void) __THROW;
   929  
   930  /* Revoke the access of all descriptors currently open on FILE.  */
   931  extern int revoke (const char *__file) __THROW __nonnull ((1)) __wur;
   932  
   933  
   934  /* Enable statistical profiling, writing samples of the PC into at most
   935     SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profil
        ing
   936     is enabled, the system examines the user PC and increments
   937     SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zer
        o,
   938     disable profiling.  Returns zero on success, -1 on error.  */
   939  extern int profil (unsigned short int *__sample_buffer, size_t __size,
   940                     size_t __offset, unsigned int __scale)
   941       __THROW __nonnull ((1));
   942  
   943  
   944  /* Turn accounting on if NAME is an existing file.  The system will the
        n write
   945     a record for each process as it terminates, to this file.  If NAME i
        s NULL,
   946     turn accounting off.  This call is restricted to the super-user.  */
   947  extern int acct (const char *__name) __THROW;
   948  
   949  
   950  /* Successive calls return the shells listed in `/etc/shells'.  */
   951  extern char *getusershell (void) __THROW;
   952  extern void endusershell (void) __THROW; /* Discard cached info.  */
   953  extern void setusershell (void) __THROW; /* Rewind and re-read the file
        .  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   954  
   955  
   956  /* Put the program in the background, and dissociate from the controlli
        ng
   957     terminal.  If NOCHDIR is zero, do `chdir ("/")'.  If NOCLOSE is zero
        ,
   958     redirects stdin, stdout, and stderr to /dev/null.  */
   959  extern int daemon (int __nochdir, int __noclose) __THROW __wur;
   960  #endif /* Use BSD || X/Open.  */
   961  
   962  
   963  #if defined __USE_BSD || (defined __USE_XOPEN && !defined __USE_XOPEN2K
        )
   964  /* Make PATH be the root directory (the starting point for absolute pat
        hs).
   965     This call is restricted to the super-user.  */
   966  extern int chroot (const char *__path) __THROW __nonnull ((1)) __wur;
   967  
   968  /* Prompt with PROMPT and read a string from the terminal without echoi
        ng.
   969     Uses /dev/tty if possible; otherwise stderr and stdin.  */
   970  extern char *getpass (const char *__prompt) __nonnull ((1));
   971  #endif /* Use BSD || X/Open.  */
   972  
   973  
   974  /* Make all changes done to FD actually appear on disk.
   975  
   976     This function is a cancellation point and therefore not marked with
   977     __THROW.  */
   978  extern int fsync (int __fd);
   979  
   980  
   981  #ifdef __USE_GNU
   982  /* Make all changes done to all files on the file system associated
   983     with FD actually appear on disk.  */
   984  extern int syncfs (int __fd) __THROW;
   985  #endif
   986  
   987  
   988  #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED
   989  
   990  /* Return identifier for the current host.  */
   991  extern long int gethostid (void);
   992  
   993  /* Make all changes done to all files actually appear on disk.  */
   994  extern void sync (void) __THROW;
   995  
   996  
   997  # if defined __USE_BSD || !defined __USE_XOPEN2K
   998  /* Return the number of bytes in a page.  This is the system's page siz
        e,
   999     which is not necessarily the same as the hardware page size.  */
  1000  extern int getpagesize (void)  __THROW __attribute__ ((__const__));
  1001  
  1002  
  1003  /* Return the maximum number of file descriptors
  1004     the current process could possibly have.  */
  1005  extern int getdtablesize (void) __THROW;
  1006  # endif
  1007  
  1008  #endif /* Use BSD || X/Open Unix.  */
  1009  
  1010  
  1011  #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED || defined __USE_
        XOPEN2K8
  1012  
  1013  /* Truncate FILE to LENGTH bytes.  */
  1014  # ifndef __USE_FILE_OFFSET64
  1015  extern int truncate (const char *__file, __off_t __length)
  1016       __THROW __nonnull ((1)) __wur;
  1017  # else
  1018  #  ifdef __REDIRECT_NTH
  1019  extern int __REDIRECT_NTH (truncate,
  1020                             (const char *__file, __off64_t __length),
  1021                             truncate64) __nonnull ((1)) __wur;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

  1022  #  else
  1023  #   define truncate truncate64
  1024  #  endif
  1025  # endif
  1026  # ifdef __USE_LARGEFILE64
  1027  extern int truncate64 (const char *__file, __off64_t __length)
  1028       __THROW __nonnull ((1)) __wur;
  1029  # endif
  1030  
  1031  #endif /* Use BSD || X/Open Unix || POSIX 2008.  */
  1032  
  1033  #if defined __USE_BSD || defined __USE_POSIX199309 \
  1034      || defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K
  1035  
  1036  /* Truncate the file FD is open on to LENGTH bytes.  */
  1037  # ifndef __USE_FILE_OFFSET64
  1038  extern int ftruncate (int __fd, __off_t __length) __THROW __wur;
  1039  # else
  1040  #  ifdef __REDIRECT_NTH
  1041  extern int __REDIRECT_NTH (ftruncate, (int __fd, __off64_t __length),
  1042                             ftruncate64) __wur;
  1043  #  else
  1044  #   define ftruncate ftruncate64
  1045  #  endif
  1046  # endif
  1047  # ifdef __USE_LARGEFILE64
  1048  extern int ftruncate64 (int __fd, __off64_t __length) __THROW __wur;
  1049  # endif
  1050  
  1051  #endif /* Use BSD || POSIX.1b || X/Open Unix || XPG6.  */
  1052  
  1053  
  1054  #if (defined __USE_XOPEN_EXTENDED && !defined __USE_XOPEN2K) \
  1055      || defined __USE_MISC
  1056  
  1057  /* Set the end of accessible data space (aka "the break") to ADDR.
  1058     Returns zero on success and -1 for errors (with errno set).  */
  1059  extern int brk (void *__addr) __THROW __wur;
  1060  
  1061  /* Increase or decrease the end of accessible data space by DELTA bytes
        .
  1062     If successful, returns the address the previous end of data space
  1063     (i.e. the beginning of the new space, if DELTA > 0);
  1064     returns (void *) -1 for errors (with errno set).  */
  1065  extern void *sbrk (intptr_t __delta) __THROW;
  1066  #endif
  1067  
  1068  
  1069  #ifdef __USE_MISC
  1070  /* Invoke `system call' number SYSNO, passing it the remaining argument
        s.
  1071     This is completely system-dependent, and not often useful.
  1072  
  1073     In Unix, `syscall' sets `errno' for all errors and most calls return
         -1
  1074     for errors; in many systems you cannot pass arguments or get return
  1075     values for all system calls (`pipe', `fork', and `getppid' typically
  1076     among them).
  1077  
  1078     In Mach, all system calls take normal arguments and always return an
  1079     error code (zero for success).  */
  1080  extern long int syscall (long int __sysno, ...) __THROW;
  1081  
  1082  #endif  /* Use misc.  */
  1083  
  1084  
  1085  #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_
        LOCK
  1086  /* NOTE: These declarations also appear in <fcntl.h>; be sure to keep b
        oth
  1087     files consistent.  Some systems have them there and some here, and s
        ome
  1088     software depends on the macros being defined without including both.
          */
  1089  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

  1090  /* `lockf' is a simpler interface to the locking facilities of `fcntl'.
  1091     LEN is always relative to the current file position.
  1092     The CMD argument is one of the following.
  1093  
  1094     This function is a cancellation point and therefore not marked with
  1095     __THROW.  */
  1096  
  1097  # define F_ULOCK 0      /* Unlock a previously locked region.  */
  1098  # define F_LOCK  1      /* Lock a region for exclusive use.  */
  1099  # define F_TLOCK 2      /* Test and lock a region for exclusive use.  *
        /
  1100  # define F_TEST  3      /* Test a region for other processes locks.  */
  1101  
  1102  # ifndef __USE_FILE_OFFSET64
  1103  extern int lockf (int __fd, int __cmd, __off_t __len) __wur;
  1104  # else
  1105  #  ifdef __REDIRECT
  1106  extern int __REDIRECT (lockf, (int __fd, int __cmd, __off64_t __len),
  1107                         lockf64) __wur;
  1108  #  else
  1109  #   define lockf lockf64
  1110  #  endif
  1111  # endif
  1112  # ifdef __USE_LARGEFILE64
  1113  extern int lockf64 (int __fd, int __cmd, __off64_t __len) __wur;
  1114  # endif
  1115  #endif /* Use misc and F_LOCK not already defined.  */
  1116  
  1117  
  1118  #ifdef __USE_GNU
  1119  
  1120  /* Evaluate EXPRESSION, and repeat as long as it returns -1 with `errno
        '
  1121     set to EINTR.  */
  1122  
  1123  # define TEMP_FAILURE_RETRY(expression) \
  1124    (__extension__                                                        
              \
  1125      ({ long int __result;                                               
              \
  1126         do __result = (long int) (expression);                           
              \
  1127         while (__result == -1L && errno == EINTR);                       
              \
  1128         __result; }))
  1129  #endif
  1130  
  1131  #if defined __USE_POSIX199309 || defined __USE_UNIX98
  1132  /* Synchronize at least the data part of a file with the underlying
  1133     media.  */
  1134  extern int fdatasync (int __fildes);
  1135  #endif /* Use POSIX199309 */
  1136  
  1137  
  1138  /* XPG4.2 specifies that prototypes for the encryption functions must
  1139     be defined here.  */
  1140  #ifdef  __USE_XOPEN
  1141  /* Encrypt at most 8 characters from KEY using salt to perturb DES.  */
  1142  extern char *crypt (const char *__key, const char *__salt)
  1143       __THROW __nonnull ((1, 2));
  1144  
  1145  /* Encrypt data in BLOCK in place if EDFLAG is zero; otherwise decrypt
  1146     block in place.  */
  1147  extern void encrypt (char *__block, int __edflag) __THROW __nonnull ((1
        ));
  1148  
  1149  
  1150  /* Swab pairs bytes in the first N bytes of the area pointed to by
  1151     FROM and copy the result to TO.  The value of TO must not be in the
  1152     range [FROM - N + 1, FROM - 1].  If N is odd the first byte in FROM
  1153     is without partner.  */
  1154  extern void swab (const void *__restrict __from, void *__restrict __to,
  1155                    ssize_t __n) __THROW __nonnull ((1, 2));
  1156  #endif
  1157  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

  1158  
  1159  /* The Single Unix specification demands this prototype to be here.
  1160     It is also found in <stdio.h>.  */
  1161  #if defined __USE_XOPEN && !defined __USE_XOPEN2K
  1162  /* Return the name of the controlling terminal.  */
  1163  extern char *ctermid (char *__s) __THROW;
  1164  #endif
  1165  
  1166  
  1167  /* Define some macros helping to catch buffer overflows.  */
  1168  #if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
  1169  # include <bits/unistd.h>
  1170  #endif
  1171  
  1172  __END_DECLS
  1173  
  1174  #endif /* unistd.h  */
Close file: /usr/include/unistd.h
     9  #include <unistd.h>
Open file: /usr/include/signal.h
     1  /* Copyright (C) 1991-2004,2007,2009,2010,2012 Free Software Foundation
        , Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      ISO C99 Standard: 7.14 Signal handling <signal.h>
    20   */
    21  
    22  #ifndef _SIGNAL_H
    23  
    24  #if !defined __need_sig_atomic_t && !defined __need_sigset_t
    25  # define _SIGNAL_H
    26  #endif
    27  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.
    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__
   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */
   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif
   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2
   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   384  
   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    28  #include <features.h>
    29  
    30  __BEGIN_DECLS
    31  
Open file: /usr/include/bits/sigset.h
     1  /* __sig_atomic_t, __sigset_t, and related definitions.  Linux version.
     2     Copyright (C) 1991, 1992, 1994, 1996, 1997, 2007, 2012
     3     Free Software Foundation, Inc.
     4     This file is part of the GNU C Library.
     5  
     6     The GNU C Library is free software; you can redistribute it and/or
     7     modify it under the terms of the GNU Lesser General Public
     8     License as published by the Free Software Foundation; either
     9     version 2.1 of the License, or (at your option) any later version.
    10  
    11     The GNU C Library is distributed in the hope that it will be useful,
    12     but WITHOUT ANY WARRANTY; without even the implied warranty of
    13     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    14     Lesser General Public License for more details.
    15  
    16     You should have received a copy of the GNU Lesser General Public
    17     License along with the GNU C Library; if not, see
    18     <http://www.gnu.org/licenses/>.  */
    19  
    20  #ifndef _SIGSET_H_types
    21  # define _SIGSET_H_types        1
    22  
    23  typedef int __sig_atomic_t;
    24  
    25  /* A `sigset_t' has a bit for each signal.  */
    26  
    27  # define _SIGSET_NWORDS (1024 / (8 * sizeof (unsigned long int)))
    28  typedef struct
    29    {
    30      unsigned long int __val[_SIGSET_NWORDS];
    31    } __sigset_t;
    32  
    33  #endif
    34  
    35  
    36  /* We only want to define these functions if <signal.h> was actually
    37     included; otherwise we were included just to define the types.  Sinc
        e we
    38     are namespace-clean, it wouldn't hurt to define extra macros.  But
    39     trouble can be caused by functions being defined (e.g., any global
    40     register vars declared later will cause compilation errors).  */
    41  
    42  #if !defined _SIGSET_H_fns && defined _SIGNAL_H
    43  # define _SIGSET_H_fns 1
    44  
    45  # ifndef _EXTERN_INLINE

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    46  #  define _EXTERN_INLINE __extern_inline
    47  # endif
    48  
    49  /* Return a mask that includes the bit for SIG only.  */
    50  # define __sigmask(sig) \
    51    (((unsigned long int) 1) << (((sig) - 1) % (8 * sizeof (unsigned long
         int))))
    52  
    53  /* Return the word index for SIG.  */
    54  # define __sigword(sig) (((sig) - 1) / (8 * sizeof (unsigned long int))
        )
    55  
    56  # if defined __GNUC__ && __GNUC__ >= 2
    57  #  define __sigemptyset(set) \
    58    (__extension__ ({ int __cnt = _SIGSET_NWORDS;                         
              \
    59                      sigset_t *__set = (set);                            
              \
    60                      while (--__cnt >= 0) __set->__val[__cnt] = 0;       
              \
    61                      0; }))
    62  #  define __sigfillset(set) \
    63    (__extension__ ({ int __cnt = _SIGSET_NWORDS;                         
              \
    64                      sigset_t *__set = (set);                            
              \
    65                      while (--__cnt >= 0) __set->__val[__cnt] = ~0UL;    
              \
    66                      0; }))
    67  
    68  #  ifdef __USE_GNU
    69  /* The POSIX does not specify for handling the whole signal set in one
    70     command.  This is often wanted and so we define three more functions
    71     here.  */
    72  #   define __sigisemptyset(set) \
    73    (__extension__ ({ int __cnt = _SIGSET_NWORDS;                         
              \
    74                      const sigset_t *__set = (set);                      
              \
    75                      int __ret = __set->__val[--__cnt];                  
              \
    76                      while (!__ret && --__cnt >= 0)                      
              \
    77                          __ret = __set->__val[__cnt];                    
              \
    78                      __ret == 0; }))
    79  #   define __sigandset(dest, left, right) \
    80    (__extension__ ({ int __cnt = _SIGSET_NWORDS;                         
              \
    81                      sigset_t *__dest = (dest);                          
              \
    82                      const sigset_t *__left = (left);                    
              \
    83                      const sigset_t *__right = (right);                  
              \
    84                      while (--__cnt >= 0)                                
              \
    85                        __dest->__val[__cnt] = (__left->__val[__cnt]      
              \
    86                                                & __right->__val[__cnt]);
                      \
    87                      0; }))
    88  #   define __sigorset(dest, left, right) \
    89    (__extension__ ({ int __cnt = _SIGSET_NWORDS;                         
              \
    90                      sigset_t *__dest = (dest);                          
              \
    91                      const sigset_t *__left = (left);                    
              \
    92                      const sigset_t *__right = (right);                  
              \
    93                      while (--__cnt >= 0)                                
              \
    94                        __dest->__val[__cnt] = (__left->__val[__cnt]      
              \

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    95                                                | __right->__val[__cnt]);
                      \
    96                      0; }))
    97  #  endif
    98  # endif
    99  
   100  /* These functions needn't check for a bogus signal number -- error
   101     checking is done in the non __ versions.  */
   102  
   103  extern int __sigismember (const __sigset_t *, int);
   104  extern int __sigaddset (__sigset_t *, int);
   105  extern int __sigdelset (__sigset_t *, int);
   106  
   107  # ifdef __USE_EXTERN_INLINES
   108  #  define __SIGSETFN(NAME, BODY, CONST)                                 
              \
   109    _EXTERN_INLINE int                                                    
              \
   110    NAME (CONST __sigset_t *__set, int __sig)                             
              \
   111    {                                                                     
              \
   112      unsigned long int __mask = __sigmask (__sig);                       
              \
   113      unsigned long int __word = __sigword (__sig);                       
              \
   114      return BODY;                                                        
              \
   115    }
   116  
   117  __SIGSETFN (__sigismember, (__set->__val[__word] & __mask) ? 1 : 0, con
        st)
   118  __SIGSETFN (__sigaddset, ((__set->__val[__word] |= __mask), 0), )
   119  __SIGSETFN (__sigdelset, ((__set->__val[__word] &= ~__mask), 0), )
   120  
   121  #  undef __SIGSETFN
   122  # endif
   123  
   124  
   125  #endif /* ! _SIGSET_H_fns.  */
Close file: /usr/include/bits/sigset.h
    32  #include <bits/sigset.h>                /* __sigset_t, __sig_atomic_t. 
         */
    33  
    34  /* An integral type that can be modified atomically, without the
    35     possibility of a signal arriving in the middle of the operation.  */
    36  #if defined __need_sig_atomic_t || defined _SIGNAL_H
    37  # ifndef __sig_atomic_t_defined
    38  #  define __sig_atomic_t_defined
    39  __BEGIN_NAMESPACE_STD
    40  typedef __sig_atomic_t sig_atomic_t;
    41  __END_NAMESPACE_STD
    42  # endif
    43  # undef __need_sig_atomic_t
    44  #endif
    45  
    46  #if defined __need_sigset_t || (defined _SIGNAL_H && defined __USE_POSI
        X)
    47  # ifndef __sigset_t_defined
    48  #  define __sigset_t_defined
    49  typedef __sigset_t sigset_t;
    50  # endif
    51  # undef __need_sigset_t
    52  #endif
    53  
    54  #ifdef _SIGNAL_H
    55  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #elif defined __GLIBC_HAVE_LONG_LONG
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* quad_t is also 64 bits.  */
    51  #if __WORDSIZE == 64
    52  typedef long int __quad_t;
    53  typedef unsigned long int __u_quad_t;
    54  #elif defined __GLIBC_HAVE_LONG_LONG
    55  __extension__ typedef long long int __quad_t;
    56  __extension__ typedef unsigned long long int __u_quad_t;
    57  #else
    58  typedef struct
    59  {
    60    long __val[2];
    61  } __quad_t;
    62  typedef struct
    63  {
    64    __u_long __val[2];
    65  } __u_quad_t;
    66  #endif
    67  
    68  
    69  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    70     macros for each of the OS types we define below.  The definitions
    71     of those macros must use the following macros for underlying types.
    72     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    73     variants of each of the following integer types on this machine.
    74  
    75          16              -- "natural" 16-bit type (always short)
    76          32              -- "natural" 32-bit type (always int)
    77          64              -- "natural" 64-bit type (long or long long)
    78          LONG32          -- 32-bit type, traditionally long
    79          QUAD            -- 64-bit type, always long long

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    80          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    81          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    82  
    83     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    84     conventional uses of `long' or `long long' type modifiers match the
    85     types we define, even when a less-adorned type would be the same siz
        e.
    86     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    87     these types, where using the appropriate l or ll format modifiers ca
        n
    88     make the typedefs and the formats match up across all GNU platforms.
          If
    89     we used `long' when it's 64 bits where `long long' is expected, then
         the
    90     compiler would warn about the formats not matching the argument type
        s,
    91     and the programmer changing them to shut up the compiler would break
         the
    92     program's portability.
    93  
    94     Here we assume what is presently the case in all the GCC configurati
        ons
    95     we support: long long is always 64 bits, long is always word/address
         size,
    96     and int is always 32 bits.  */
    97  
    98  #define __S16_TYPE              short int
    99  #define __U16_TYPE              unsigned short int
   100  #define __S32_TYPE              int
   101  #define __U32_TYPE              unsigned int
   102  #define __SLONGWORD_TYPE        long int
   103  #define __ULONGWORD_TYPE        unsigned long int
   104  #if __WORDSIZE == 32
   105  # define __SQUAD_TYPE           __quad_t
   106  # define __UQUAD_TYPE           __u_quad_t
   107  # define __SWORD_TYPE           int
   108  # define __UWORD_TYPE           unsigned int
   109  # define __SLONG32_TYPE         long int
   110  # define __ULONG32_TYPE         unsigned long int
   111  # define __S64_TYPE             __quad_t
   112  # define __U64_TYPE             __u_quad_t
   113  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   114     such as `long long' in C89 mode.  */
   115  # define __STD_TYPE             __extension__ typedef
   116  #elif __WORDSIZE == 64
   117  # define __SQUAD_TYPE           long int
   118  # define __UQUAD_TYPE           unsigned long int
   119  # define __SWORD_TYPE           long int
   120  # define __UWORD_TYPE           unsigned long int
   121  # define __SLONG32_TYPE         int
   122  # define __ULONG32_TYPE         unsigned int
   123  # define __S64_TYPE             long int
   124  # define __U64_TYPE             unsigned long int
   125  /* No need to mark the typedef with __extension__.   */
   126  # define __STD_TYPE             typedef
   127  #else
   128  # error
   129  #endif
   130  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   131  
   132  
   133  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   134  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   135  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   136  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   137  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   138  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   139  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   140  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   141  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   142  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   143  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   144  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   145  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   146  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   147  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   148  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   149  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   150  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   151  
   152  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   153  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   154  
   155  /* Clock ID used in clock and timer functions.  */
   156  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   157  
   158  /* Timer ID returned by `timer_create'.  */
   159  __STD_TYPE __TIMER_T_TYPE __timer_t;
   160  
   161  /* Type to represent block size.  */
   162  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   163  
   164  /* Types from the Large File Support interface.  */
   165  
   166  /* Type to count number of disk blocks.  */
   167  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   168  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   169  
   170  /* Type to count file system blocks.  */
   171  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   172  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   173  
   174  /* Type to count file system nodes.  */
   175  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   176  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   177  
   178  /* Type of miscellaneous file system fields.  */
   179  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   180  
   181  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   182  
   183  /* Signed long type used in system calls.  */
   184  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   185  /* Unsigned long type used in system calls.  */
   186  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   187  
   188  /* These few don't really vary by system, they always correspond
   189     to one of the other defined types.  */
   190  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   191  typedef __quad_t *__qaddr_t;
   192  typedef char *__caddr_t;
   193  
   194  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   195  __STD_TYPE __SWORD_TYPE __intptr_t;
   196  
   197  /* Duplicate info from sys/socket.h.  */
   198  __STD_TYPE __U32_TYPE __socklen_t;
   199  
   200  
   201  #undef __STD_TYPE

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   202  
   203  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    56  #include <bits/types.h>
Open file: /usr/include/bits/signum.h
     1  /* Signal number definitions.  Linux version.
     2     Copyright (C) 1995,1996,1997,1998,1999,2003 Free Software Foundation
        , Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifdef  _SIGNAL_H
    20  
    21  /* Fake signal functions.  */
    22  #define SIG_ERR ((__sighandler_t) -1)           /* Error return.  */
    23  #define SIG_DFL ((__sighandler_t) 0)            /* Default action.  */
    24  #define SIG_IGN ((__sighandler_t) 1)            /* Ignore signal.  */
    25  
    26  #ifdef __USE_UNIX98
    27  # define SIG_HOLD       ((__sighandler_t) 2)    /* Add signal to hold m
        ask.  */
    28  #endif
    29  
    30  
    31  /* Signals.  */
    32  #define SIGHUP          1       /* Hangup (POSIX).  */
    33  #define SIGINT          2       /* Interrupt (ANSI).  */
    34  #define SIGQUIT         3       /* Quit (POSIX).  */
    35  #define SIGILL          4       /* Illegal instruction (ANSI).  */
    36  #define SIGTRAP         5       /* Trace trap (POSIX).  */
    37  #define SIGABRT         6       /* Abort (ANSI).  */
    38  #define SIGIOT          6       /* IOT trap (4.2 BSD).  */
    39  #define SIGBUS          7       /* BUS error (4.2 BSD).  */
    40  #define SIGFPE          8       /* Floating-point exception (ANSI).  */
    41  #define SIGKILL         9       /* Kill, unblockable (POSIX).  */
    42  #define SIGUSR1         10      /* User-defined signal 1 (POSIX).  */
    43  #define SIGSEGV         11      /* Segmentation violation (ANSI).  */
    44  #define SIGUSR2         12      /* User-defined signal 2 (POSIX).  */
    45  #define SIGPIPE         13      /* Broken pipe (POSIX).  */
    46  #define SIGALRM         14      /* Alarm clock (POSIX).  */
    47  #define SIGTERM         15      /* Termination (ANSI).  */
    48  #define SIGSTKFLT       16      /* Stack fault.  */
    49  #define SIGCLD          SIGCHLD /* Same as SIGCHLD (System V).  */
    50  #define SIGCHLD         17      /* Child status has changed (POSIX).  *
        /
    51  #define SIGCONT         18      /* Continue (POSIX).  */
    52  #define SIGSTOP         19      /* Stop, unblockable (POSIX).  */
    53  #define SIGTSTP         20      /* Keyboard stop (POSIX).  */
    54  #define SIGTTIN         21      /* Background read from tty (POSIX).  *
        /
    55  #define SIGTTOU         22      /* Background write to tty (POSIX).  */
    56  #define SIGURG          23      /* Urgent condition on socket (4.2 BSD)
        .  */
    57  #define SIGXCPU         24      /* CPU limit exceeded (4.2 BSD).  */
    58  #define SIGXFSZ         25      /* File size limit exceeded (4.2 BSD). 
         */
    59  #define SIGVTALRM       26      /* Virtual alarm clock (4.2 BSD).  */
    60  #define SIGPROF         27      /* Profiling alarm clock (4.2 BSD).  */
    61  #define SIGWINCH        28      /* Window size change (4.3 BSD, Sun).  
        */
    62  #define SIGPOLL         SIGIO   /* Pollable event occurred (System V). 
         */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    63  #define SIGIO           29      /* I/O now possible (4.2 BSD).  */
    64  #define SIGPWR          30      /* Power failure restart (System V).  *
        /
    65  #define SIGSYS          31      /* Bad system call.  */
    66  #define SIGUNUSED       31
    67  
    68  #define _NSIG           65      /* Biggest signal number + 1
    69                                     (including real-time signals).  */
    70  
    71  #define SIGRTMIN        (__libc_current_sigrtmin ())
    72  #define SIGRTMAX        (__libc_current_sigrtmax ())
    73  
    74  /* These are the hard limits of the kernel.  These values should not be
    75     used directly at user level.  */
    76  #define __SIGRTMIN      32
    77  #define __SIGRTMAX      (_NSIG - 1)
    78  
    79  #endif  /* <signal.h> included.  */
Close file: /usr/include/bits/signum.h
    57  #include <bits/signum.h>
    58  
    59  #if defined __USE_XOPEN || defined __USE_XOPEN2K
    60  # ifndef __pid_t_defined
    61  typedef __pid_t pid_t;
    62  #  define __pid_t_defined
    63  #endif
    64  #ifdef __USE_XOPEN
    65  # endif
    66  # ifndef __uid_t_defined
    67  typedef __uid_t uid_t;
    68  #  define __uid_t_defined
    69  # endif
    70  #endif  /* Unix98 */
    71  
    72  #ifdef __USE_POSIX199309
    73  /* We need `struct timespec' later on.  */
    74  # define __need_timespec
Open file: /usr/include/time.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      ISO C99 Standard: 7.23 Date and time    <time.h>
    20   */
    21  
    22  #ifndef _TIME_H
    23  
    24  #if (! defined __need_time_t && !defined __need_clock_t && \
    25       ! defined __need_timespec)
    26  # define _TIME_H        1
    27  # include <features.h>
    28  
    29  __BEGIN_DECLS
    30  
    31  #endif
    32  
    33  #ifdef  _TIME_H
    34  /* Get size_t and NULL from <stddef.h>.  */
    35  # define __need_size_t
    36  # define __need_NULL
    37  # include <stddef.h>

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    38  
    39  /* This defines CLOCKS_PER_SEC, which is the number of processor clock
    40     ticks per second.  */
    41  # include <bits/time.h>
    42  
    43  /* This is the obsolete POSIX.1-1988 name for the same constant.  */
    44  # if !defined __STRICT_ANSI__ && !defined __USE_XOPEN2K
    45  #  ifndef CLK_TCK
    46  #   define CLK_TCK      CLOCKS_PER_SEC
    47  #  endif
    48  # endif
    49  
    50  #endif /* <time.h> included.  */
    51  
    52  #if !defined __clock_t_defined && (defined _TIME_H || defined __need_cl
        ock_t)
    53  # define __clock_t_defined      1
    54  
    55  # include <bits/types.h>
    56  
    57  __BEGIN_NAMESPACE_STD
    58  /* Returned by `clock'.  */
    59  typedef __clock_t clock_t;
    60  __END_NAMESPACE_STD
    61  #if defined __USE_XOPEN || defined __USE_POSIX || defined __USE_MISC
    62  __USING_NAMESPACE_STD(clock_t)
    63  #endif
    64  
    65  #endif /* clock_t not defined and <time.h> or need clock_t.  */
    66  #undef  __need_clock_t
    67  
    68  #if !defined __time_t_defined && (defined _TIME_H || defined __need_tim
        e_t)
    69  # define __time_t_defined       1
    70  
    71  # include <bits/types.h>
    72  
    73  __BEGIN_NAMESPACE_STD
    74  /* Returned by `time'.  */
    75  typedef __time_t time_t;
    76  __END_NAMESPACE_STD
    77  #if defined __USE_POSIX || defined __USE_MISC || defined __USE_SVID
    78  __USING_NAMESPACE_STD(time_t)
    79  #endif
    80  
    81  #endif /* time_t not defined and <time.h> or need time_t.  */
    82  #undef  __need_time_t
    83  
    84  #if !defined __clockid_t_defined && \
    85     ((defined _TIME_H && defined __USE_POSIX199309) || defined __need_cl
        ockid_t)
    86  # define __clockid_t_defined    1
    87  
    88  # include <bits/types.h>
    89  
    90  /* Clock ID used in clock and timer functions.  */
    91  typedef __clockid_t clockid_t;
    92  
    93  #endif /* clockid_t not defined and <time.h> or need clockid_t.  */
    94  #undef  __clockid_time_t
    95  
    96  #if !defined __timer_t_defined && \
    97      ((defined _TIME_H && defined __USE_POSIX199309) || defined __need_t
        imer_t)
    98  # define __timer_t_defined      1
    99  
   100  # include <bits/types.h>
   101  
   102  /* Timer ID returned by `timer_create'.  */
   103  typedef __timer_t timer_t;
   104  
   105  #endif /* timer_t not defined and <time.h> or need timer_t.  */
   106  #undef  __need_timer_t
   107  
   108  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   109  #if (!defined __timespec_defined                                        
        \
   110       && ((defined _TIME_H                                               
        \
   111            && (defined __USE_POSIX199309 || defined __USE_MISC           
        \
   112                || defined __USE_ISOC11))                                 
        \
   113           || defined __need_timespec))
   114  # define __timespec_defined     1
   115  
   116  # include <bits/types.h>        /* This defines __time_t for us.  */
   117  
   118  /* POSIX.1b structure for a time value.  This is like a `struct timeval
        ' but
   119     has nanoseconds instead of microseconds.  */
   120  struct timespec
   121    {
   122      __time_t tv_sec;            /* Seconds.  */
   123      __syscall_slong_t tv_nsec;  /* Nanoseconds.  */
   124    };
   125  
   126  #endif /* timespec not defined and <time.h> or need timespec.  */
   127  #undef  __need_timespec
   128  
   129  
   130  #ifdef  _TIME_H
   131  __BEGIN_NAMESPACE_STD
   132  /* Used by other time functions.  */
   133  struct tm
   134  {
   135    int tm_sec;                   /* Seconds.     [0-60] (1 leap second) 
        */
   136    int tm_min;                   /* Minutes.     [0-59] */
   137    int tm_hour;                  /* Hours.       [0-23] */
   138    int tm_mday;                  /* Day.         [1-31] */
   139    int tm_mon;                   /* Month.       [0-11] */
   140    int tm_year;                  /* Year - 1900.  */
   141    int tm_wday;                  /* Day of week. [0-6] */
   142    int tm_yday;                  /* Days in year.[0-365] */
   143    int tm_isdst;                 /* DST.         [-1/0/1]*/
   144  
   145  # ifdef __USE_BSD
   146    long int tm_gmtoff;           /* Seconds east of UTC.  */
   147    const char *tm_zone;          /* Timezone abbreviation.  */
   148  # else
   149    long int __tm_gmtoff;         /* Seconds east of UTC.  */
   150    const char *__tm_zone;        /* Timezone abbreviation.  */
   151  # endif
   152  };
   153  __END_NAMESPACE_STD
   154  #if defined __USE_XOPEN || defined __USE_POSIX || defined __USE_MISC
   155  __USING_NAMESPACE_STD(tm)
   156  #endif
   157  
   158  
   159  # ifdef __USE_POSIX199309
   160  /* POSIX.1b structure for timer start values and intervals.  */
   161  struct itimerspec
   162    {
   163      struct timespec it_interval;
   164      struct timespec it_value;
   165    };
   166  
   167  /* We can use a simple forward declaration.  */
   168  struct sigevent;
   169  
   170  # endif /* POSIX.1b */
   171  
   172  # ifdef __USE_XOPEN2K
   173  #  ifndef __pid_t_defined
   174  typedef __pid_t pid_t;
   175  #   define __pid_t_defined
   176  #  endif
   177  # endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   178  
   179  
   180  # ifdef __USE_ISOC11
   181  /* Time base values for timespec_get.  */
   182  # define TIME_UTC 1
   183  # endif
   184  
   185  
   186  __BEGIN_NAMESPACE_STD
   187  /* Time used by the program so far (user time + system time).
   188     The result / CLOCKS_PER_SECOND is program time in seconds.  */
   189  extern clock_t clock (void) __THROW;
   190  
   191  /* Return the current time and put it in *TIMER if TIMER is not NULL.  
        */
   192  extern time_t time (time_t *__timer) __THROW;
   193  
   194  /* Return the difference between TIME1 and TIME0.  */
   195  extern double difftime (time_t __time1, time_t __time0)
   196       __THROW __attribute__ ((__const__));
   197  
   198  /* Return the `time_t' representation of TP and normalize TP.  */
   199  extern time_t mktime (struct tm *__tp) __THROW;
   200  
   201  
   202  /* Format TP into S according to FORMAT.
   203     Write no more than MAXSIZE characters and return the number
   204     of characters written, or 0 if it would exceed MAXSIZE.  */
   205  extern size_t strftime (char *__restrict __s, size_t __maxsize,
   206                          const char *__restrict __format,
   207                          const struct tm *__restrict __tp) __THROW;
   208  __END_NAMESPACE_STD
   209  
   210  # ifdef __USE_XOPEN
   211  /* Parse S according to FORMAT and store binary time information in TP.
   212     The return value is a pointer to the first unparsed character in S. 
         */
   213  extern char *strptime (const char *__restrict __s,
   214                         const char *__restrict __fmt, struct tm *__tp)
   215       __THROW;
   216  # endif
   217  
   218  # ifdef __USE_XOPEN2K8
   219  /* Similar to the two functions above but take the information from
   220     the provided locale and not the global locale.  */
   221  # include <xlocale.h>
   222  
   223  extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
   224                            const char *__restrict __format,
   225                            const struct tm *__restrict __tp,
   226                            __locale_t __loc) __THROW;
   227  # endif
   228  
   229  # ifdef __USE_GNU
   230  extern char *strptime_l (const char *__restrict __s,
   231                           const char *__restrict __fmt, struct tm *__tp,
   232                           __locale_t __loc) __THROW;
   233  # endif
   234  
   235  
   236  __BEGIN_NAMESPACE_STD
   237  /* Return the `struct tm' representation of *TIMER
   238     in Universal Coordinated Time (aka Greenwich Mean Time).  */
   239  extern struct tm *gmtime (const time_t *__timer) __THROW;
   240  
   241  /* Return the `struct tm' representation
   242     of *TIMER in the local timezone.  */
   243  extern struct tm *localtime (const time_t *__timer) __THROW;
   244  __END_NAMESPACE_STD
   245  
   246  # if defined __USE_POSIX || defined __USE_MISC
   247  /* Return the `struct tm' representation of *TIMER in UTC,
   248     using *TP to store the result.  */
   249  extern struct tm *gmtime_r (const time_t *__restrict __timer,
   250                              struct tm *__restrict __tp) __THROW;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   251  
   252  /* Return the `struct tm' representation of *TIMER in local time,
   253     using *TP to store the result.  */
   254  extern struct tm *localtime_r (const time_t *__restrict __timer,
   255                                 struct tm *__restrict __tp) __THROW;
   256  # endif /* POSIX or misc */
   257  
   258  __BEGIN_NAMESPACE_STD
   259  /* Return a string of the form "Day Mon dd hh:mm:ss yyyy\n"
   260     that is the representation of TP in this format.  */
   261  extern char *asctime (const struct tm *__tp) __THROW;
   262  
   263  /* Equivalent to `asctime (localtime (timer))'.  */
   264  extern char *ctime (const time_t *__timer) __THROW;
   265  __END_NAMESPACE_STD
   266  
   267  # if defined __USE_POSIX || defined __USE_MISC
   268  /* Reentrant versions of the above functions.  */
   269  
   270  /* Return in BUF a string of the form "Day Mon dd hh:mm:ss yyyy\n"
   271     that is the representation of TP in this format.  */
   272  extern char *asctime_r (const struct tm *__restrict __tp,
   273                          char *__restrict __buf) __THROW;
   274  
   275  /* Equivalent to `asctime_r (localtime_r (timer, *TMP*), buf)'.  */
   276  extern char *ctime_r (const time_t *__restrict __timer,
   277                        char *__restrict __buf) __THROW;
   278  # endif /* POSIX or misc */
   279  
   280  
   281  /* Defined in localtime.c.  */
   282  extern char *__tzname[2];       /* Current timezone names.  */
   283  extern int __daylight;          /* If daylight-saving time is ever in u
        se.  */
   284  extern long int __timezone;     /* Seconds west of UTC.  */
   285  
   286  
   287  # ifdef __USE_POSIX
   288  /* Same as above.  */
   289  extern char *tzname[2];
   290  
   291  /* Set time conversion information from the TZ environment variable.
   292     If TZ is not defined, a locale-dependent default is used.  */
   293  extern void tzset (void) __THROW;
   294  # endif
   295  
   296  # if defined __USE_SVID || defined __USE_XOPEN
   297  extern int daylight;
   298  extern long int timezone;
   299  # endif
   300  
   301  # ifdef __USE_SVID
   302  /* Set the system time to *WHEN.
   303     This call is restricted to the superuser.  */
   304  extern int stime (const time_t *__when) __THROW;
   305  # endif
   306  
   307  
   308  /* Nonzero if YEAR is a leap year (every 4 years,
   309     except every 100th isn't, and every 400th is).  */
   310  # define __isleap(year) \
   311    ((year) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))
   312  
   313  
   314  # ifdef __USE_MISC
   315  /* Miscellaneous functions many Unices inherited from the public domain
   316     localtime package.  These are included only for compatibility.  */
   317  
   318  /* Like `mktime', but for TP represents Universal Time, not local time.
          */
   319  extern time_t timegm (struct tm *__tp) __THROW;
   320  
   321  /* Another name for `mktime'.  */
   322  extern time_t timelocal (struct tm *__tp) __THROW;
   323  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   324  /* Return the number of days in YEAR.  */
   325  extern int dysize (int __year) __THROW  __attribute__ ((__const__));
   326  # endif
   327  
   328  
   329  # ifdef __USE_POSIX199309
   330  /* Pause execution for a number of nanoseconds.
   331  
   332     This function is a cancellation point and therefore not marked with
   333     __THROW.  */
   334  extern int nanosleep (const struct timespec *__requested_time,
   335                        struct timespec *__remaining);
   336  
   337  
   338  /* Get resolution of clock CLOCK_ID.  */
   339  extern int clock_getres (clockid_t __clock_id, struct timespec *__res) 
        __THROW;
   340  
   341  /* Get current value of clock CLOCK_ID and store it in TP.  */
   342  extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) 
        __THROW;
   343  
   344  /* Set clock CLOCK_ID to value TP.  */
   345  extern int clock_settime (clockid_t __clock_id, const struct timespec *
        __tp)
   346       __THROW;
   347  
   348  #  ifdef __USE_XOPEN2K
   349  /* High-resolution sleep with the specified clock.
   350  
   351     This function is a cancellation point and therefore not marked with
   352     __THROW.  */
   353  extern int clock_nanosleep (clockid_t __clock_id, int __flags,
   354                              const struct timespec *__req,
   355                              struct timespec *__rem);
   356  
   357  /* Return clock ID for CPU-time clock.  */
   358  extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __T
        HROW;
   359  #  endif
   360  
   361  
   362  /* Create new per-process timer using CLOCK_ID.  */
   363  extern int timer_create (clockid_t __clock_id,
   364                           struct sigevent *__restrict __evp,
   365                           timer_t *__restrict __timerid) __THROW;
   366  
   367  /* Delete timer TIMERID.  */
   368  extern int timer_delete (timer_t __timerid) __THROW;
   369  
   370  /* Set timer TIMERID to VALUE, returning old value in OVALUE.  */
   371  extern int timer_settime (timer_t __timerid, int __flags,
   372                            const struct itimerspec *__restrict __value,
   373                            struct itimerspec *__restrict __ovalue) __THR
        OW;
   374  
   375  /* Get current value of timer TIMERID and store it in VALUE.  */
   376  extern int timer_gettime (timer_t __timerid, struct itimerspec *__value
        )
   377       __THROW;
   378  
   379  /* Get expiration overrun for timer TIMERID.  */
   380  extern int timer_getoverrun (timer_t __timerid) __THROW;
   381  # endif
   382  
   383  
   384  # ifdef __USE_ISOC11
   385  /* Set TS to calendar time based in time base BASE.  */
   386  extern int timespec_get (struct timespec *__ts, int __base)
   387       __THROW __nonnull ((1));
   388  # endif
   389  
   390  
   391  # ifdef __USE_XOPEN_EXTENDED
   392  /* Set to one of the following values to indicate an error.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   393       1  the DATEMSK environment variable is null or undefined,
   394       2  the template file cannot be opened for reading,
   395       3  failed to get file status information,
   396       4  the template file is not a regular file,
   397       5  an error is encountered while reading the template file,
   398       6  memory allication failed (not enough memory available),
   399       7  there is no line in the template that matches the input,
   400       8  invalid input specification Example: February 31 or a time is
   401          specified that can not be represented in a time_t (representing
   402          the time in seconds since 00:00:00 UTC, January 1, 1970) */
   403  extern int getdate_err;
   404  
   405  /* Parse the given string as a date specification and return a value
   406     representing the value.  The templates from the file identified by
   407     the environment variable DATEMSK are used.  In case of an error
   408     `getdate_err' is set.
   409  
   410     This function is a possible cancellation point and therefore not
   411     marked with __THROW.  */
   412  extern struct tm *getdate (const char *__string);
   413  # endif
   414  
   415  # ifdef __USE_GNU
   416  /* Since `getdate' is not reentrant because of the use of `getdate_err'
   417     and the static buffer to return the result in, we provide a thread-s
        afe
   418     variant.  The functionality is the same.  The result is returned in
   419     the buffer pointed to by RESBUFP and in case of an error the return
   420     value is != 0 with the same values as given above for `getdate_err'.
   421  
   422     This function is not part of POSIX and therefore no official
   423     cancellation point.  But due to similarity with an POSIX interface
   424     or due to the implementation it is a cancellation point and
   425     therefore not marked with __THROW.  */
   426  extern int getdate_r (const char *__restrict __string,
   427                        struct tm *__restrict __resbufp);
   428  # endif
   429  
   430  __END_DECLS
   431  
   432  #endif /* <time.h> included.  */
   433  
   434  #endif /* <time.h> not already included.  */
Close file: /usr/include/time.h
    75  # include <time.h>
    76  #endif
    77  
    78  #if defined __USE_POSIX199309 || defined __USE_XOPEN_EXTENDED
    79  /* Get the `siginfo_t' type plus the needed symbols.  */
Open file: /usr/include/bits/siginfo.h
     1  /* siginfo_t, sigevent and constants.  Linux x86-64 version.
     2     Copyright (C) 2012 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #if !defined _SIGNAL_H && !defined __need_siginfo_t \
    20      && !defined __need_sigevent_t
    21  # error "Never include this file directly.  Use <signal.h> instead"
    22  #endif
    23  
Open file: /usr/include/bits/wordsize.h
     1  /* Determine the wordsize from the preprocessor defines.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     2  
     3  #if defined __x86_64__ && !defined __ILP32__
     4  # define __WORDSIZE     64
     5  #else
     6  # define __WORDSIZE     32
     7  #endif
     8  
     9  #ifdef __x86_64__
    10  # define __WORDSIZE_TIME64_COMPAT32     1
    11  /* Both x86-64 and x32 use the 64-bit system call interface.  */
    12  # define __SYSCALL_WORDSIZE             64
    13  #endif
Close file: /usr/include/bits/wordsize.h
    24  #include <bits/wordsize.h>
    25  
    26  #if (!defined __have_sigval_t \
    27       && (defined _SIGNAL_H || defined __need_siginfo_t \
    28           || defined __need_sigevent_t))
    29  # define __have_sigval_t        1
    30  
    31  /* Type for data associated with a signal.  */
    32  typedef union sigval
    33    {
    34      int sival_int;
    35      void *sival_ptr;
    36    } sigval_t;
    37  #endif
    38  
    39  #if (!defined __have_siginfo_t \
    40       && (defined _SIGNAL_H || defined __need_siginfo_t))
    41  # define __have_siginfo_t       1
    42  
    43  # define __SI_MAX_SIZE     128
    44  # if __WORDSIZE == 64
    45  #  define __SI_PAD_SIZE     ((__SI_MAX_SIZE / sizeof (int)) - 4)
    46  # else
    47  #  define __SI_PAD_SIZE     ((__SI_MAX_SIZE / sizeof (int)) - 3)
    48  # endif
    49  
    50  # if defined __x86_64__ && __WORDSIZE == 32
    51  /* si_utime and si_stime must be 4 byte aligned for x32 to match the
    52     kernel.  We align siginfo_t to 8 bytes so that si_utime and si_stime
    53     are actually aligned to 8 bytes since their offsets are multiple of
    54     8 bytes.  */
    55  typedef __clock_t __attribute__ ((__aligned__ (4))) __sigchld_clock_t;
    56  #  define __SI_ALIGNMENT __attribute__ ((__aligned__ (8)))
    57  # else
    58  typedef __clock_t __sigchld_clock_t;
    59  #  define __SI_ALIGNMENT
    60  # endif
    61  
    62  typedef struct
    63    {
    64      int si_signo;               /* Signal number.  */
    65      int si_errno;               /* If non-zero, an errno value associat
        ed with
    66                                     this signal, as defined in <errno.h>
        .  */
    67      int si_code;                /* Signal code.  */
    68  
    69      union
    70        {
    71          int _pad[__SI_PAD_SIZE];
    72  
    73           /* kill().  */
    74          struct
    75            {
    76              __pid_t si_pid;     /* Sending process ID.  */
    77              __uid_t si_uid;     /* Real user ID of sending process.  */
    78            } _kill;
    79  
    80          /* POSIX.1b timers.  */
    81          struct
    82            {
    83              int si_tid;         /* Timer ID.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    84              int si_overrun;     /* Overrun count.  */
    85              sigval_t si_sigval; /* Signal value.  */
    86            } _timer;
    87  
    88          /* POSIX.1b signals.  */
    89          struct
    90            {
    91              __pid_t si_pid;     /* Sending process ID.  */
    92              __uid_t si_uid;     /* Real user ID of sending process.  */
    93              sigval_t si_sigval; /* Signal value.  */
    94            } _rt;
    95  
    96          /* SIGCHLD.  */
    97          struct
    98            {
    99              __pid_t si_pid;     /* Which child.  */
   100              __uid_t si_uid;     /* Real user ID of sending process.  */
   101              int si_status;      /* Exit value or signal.  */
   102              __sigchld_clock_t si_utime;
   103              __sigchld_clock_t si_stime;
   104            } _sigchld;
   105  
   106          /* SIGILL, SIGFPE, SIGSEGV, SIGBUS.  */
   107          struct
   108            {
   109              void *si_addr;      /* Faulting insn/memory ref.  */
   110            } _sigfault;
   111  
   112          /* SIGPOLL.  */
   113          struct
   114            {
   115              long int si_band;   /* Band event for SIGPOLL.  */
   116              int si_fd;
   117            } _sigpoll;
   118  
   119          /* SIGSYS.  */
   120          struct
   121            {
   122              void *_call_addr;   /* Calling user insn.  */
   123              int _syscall;       /* Triggering system call number.  */
   124              unsigned int _arch; /* AUDIT_ARCH_* of syscall.  */
   125            } _sigsys;
   126        } _sifields;
   127    } siginfo_t __SI_ALIGNMENT;
   128  
   129  
   130  /* X/Open requires some more fields with fixed names.  */
   131  # define si_pid         _sifields._kill.si_pid
   132  # define si_uid         _sifields._kill.si_uid
   133  # define si_timerid     _sifields._timer.si_tid
   134  # define si_overrun     _sifields._timer.si_overrun
   135  # define si_status      _sifields._sigchld.si_status
   136  # define si_utime       _sifields._sigchld.si_utime
   137  # define si_stime       _sifields._sigchld.si_stime
   138  # define si_value       _sifields._rt.si_sigval
   139  # define si_int         _sifields._rt.si_sigval.sival_int
   140  # define si_ptr         _sifields._rt.si_sigval.sival_ptr
   141  # define si_addr        _sifields._sigfault.si_addr
   142  # define si_band        _sifields._sigpoll.si_band
   143  # define si_fd          _sifields._sigpoll.si_fd
   144  # define si_call_addr   _sifields._sigsys._call_addr
   145  # define si_syscall     _sifields._sigsys._syscall
   146  # define si_arch        _sifields._sigsys._arch
   147  
   148  
   149  /* Values for `si_code'.  Positive values are reserved for kernel-gener
        ated
   150     signals.  */
   151  enum
   152  {
   153    SI_ASYNCNL = -60,             /* Sent by asynch name lookup completio
        n.  */
   154  # define SI_ASYNCNL     SI_ASYNCNL
   155    SI_TKILL = -6,                /* Sent by tkill.  */
   156  # define SI_TKILL       SI_TKILL

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   157    SI_SIGIO,                     /* Sent by queued SIGIO. */
   158  # define SI_SIGIO       SI_SIGIO
   159    SI_ASYNCIO,                   /* Sent by AIO completion.  */
   160  # define SI_ASYNCIO     SI_ASYNCIO
   161    SI_MESGQ,                     /* Sent by real time mesq state change.
          */
   162  # define SI_MESGQ       SI_MESGQ
   163    SI_TIMER,                     /* Sent by timer expiration.  */
   164  # define SI_TIMER       SI_TIMER
   165    SI_QUEUE,                     /* Sent by sigqueue.  */
   166  # define SI_QUEUE       SI_QUEUE
   167    SI_USER,                      /* Sent by kill, sigsend.  */
   168  # define SI_USER        SI_USER
   169    SI_KERNEL = 0x80              /* Send by kernel.  */
   170  #define SI_KERNEL       SI_KERNEL
   171  };
   172  
   173  
   174  /* `si_code' values for SIGILL signal.  */
   175  enum
   176  {
   177    ILL_ILLOPC = 1,               /* Illegal opcode.  */
   178  # define ILL_ILLOPC     ILL_ILLOPC
   179    ILL_ILLOPN,                   /* Illegal operand.  */
   180  # define ILL_ILLOPN     ILL_ILLOPN
   181    ILL_ILLADR,                   /* Illegal addressing mode.  */
   182  # define ILL_ILLADR     ILL_ILLADR
   183    ILL_ILLTRP,                   /* Illegal trap. */
   184  # define ILL_ILLTRP     ILL_ILLTRP
   185    ILL_PRVOPC,                   /* Privileged opcode.  */
   186  # define ILL_PRVOPC     ILL_PRVOPC
   187    ILL_PRVREG,                   /* Privileged register.  */
   188  # define ILL_PRVREG     ILL_PRVREG
   189    ILL_COPROC,                   /* Coprocessor error.  */
   190  # define ILL_COPROC     ILL_COPROC
   191    ILL_BADSTK                    /* Internal stack error.  */
   192  # define ILL_BADSTK     ILL_BADSTK
   193  };
   194  
   195  /* `si_code' values for SIGFPE signal.  */
   196  enum
   197  {
   198    FPE_INTDIV = 1,               /* Integer divide by zero.  */
   199  # define FPE_INTDIV     FPE_INTDIV
   200    FPE_INTOVF,                   /* Integer overflow.  */
   201  # define FPE_INTOVF     FPE_INTOVF
   202    FPE_FLTDIV,                   /* Floating point divide by zero.  */
   203  # define FPE_FLTDIV     FPE_FLTDIV
   204    FPE_FLTOVF,                   /* Floating point overflow.  */
   205  # define FPE_FLTOVF     FPE_FLTOVF
   206    FPE_FLTUND,                   /* Floating point underflow.  */
   207  # define FPE_FLTUND     FPE_FLTUND
   208    FPE_FLTRES,                   /* Floating point inexact result.  */
   209  # define FPE_FLTRES     FPE_FLTRES
   210    FPE_FLTINV,                   /* Floating point invalid operation.  *
        /
   211  # define FPE_FLTINV     FPE_FLTINV
   212    FPE_FLTSUB                    /* Subscript out of range.  */
   213  # define FPE_FLTSUB     FPE_FLTSUB
   214  };
   215  
   216  /* `si_code' values for SIGSEGV signal.  */
   217  enum
   218  {
   219    SEGV_MAPERR = 1,              /* Address not mapped to object.  */
   220  # define SEGV_MAPERR    SEGV_MAPERR
   221    SEGV_ACCERR                   /* Invalid permissions for mapped objec
        t.  */
   222  # define SEGV_ACCERR    SEGV_ACCERR
   223  };
   224  
   225  /* `si_code' values for SIGBUS signal.  */
   226  enum
   227  {
   228    BUS_ADRALN = 1,               /* Invalid address alignment.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   229  # define BUS_ADRALN     BUS_ADRALN
   230    BUS_ADRERR,                   /* Non-existant physical address.  */
   231  # define BUS_ADRERR     BUS_ADRERR
   232    BUS_OBJERR                    /* Object specific hardware error.  */
   233  # define BUS_OBJERR     BUS_OBJERR
   234  };
   235  
   236  /* `si_code' values for SIGTRAP signal.  */
   237  enum
   238  {
   239    TRAP_BRKPT = 1,               /* Process breakpoint.  */
   240  # define TRAP_BRKPT     TRAP_BRKPT
   241    TRAP_TRACE                    /* Process trace trap.  */
   242  # define TRAP_TRACE     TRAP_TRACE
   243  };
   244  
   245  /* `si_code' values for SIGCHLD signal.  */
   246  enum
   247  {
   248    CLD_EXITED = 1,               /* Child has exited.  */
   249  # define CLD_EXITED     CLD_EXITED
   250    CLD_KILLED,                   /* Child was killed.  */
   251  # define CLD_KILLED     CLD_KILLED
   252    CLD_DUMPED,                   /* Child terminated abnormally.  */
   253  # define CLD_DUMPED     CLD_DUMPED
   254    CLD_TRAPPED,                  /* Traced child has trapped.  */
   255  # define CLD_TRAPPED    CLD_TRAPPED
   256    CLD_STOPPED,                  /* Child has stopped.  */
   257  # define CLD_STOPPED    CLD_STOPPED
   258    CLD_CONTINUED                 /* Stopped child has continued.  */
   259  # define CLD_CONTINUED  CLD_CONTINUED
   260  };
   261  
   262  /* `si_code' values for SIGPOLL signal.  */
   263  enum
   264  {
   265    POLL_IN = 1,                  /* Data input available.  */
   266  # define POLL_IN        POLL_IN
   267    POLL_OUT,                     /* Output buffers available.  */
   268  # define POLL_OUT       POLL_OUT
   269    POLL_MSG,                     /* Input message available.   */
   270  # define POLL_MSG       POLL_MSG
   271    POLL_ERR,                     /* I/O error.  */
   272  # define POLL_ERR       POLL_ERR
   273    POLL_PRI,                     /* High priority input available.  */
   274  # define POLL_PRI       POLL_PRI
   275    POLL_HUP                      /* Device disconnected.  */
   276  # define POLL_HUP       POLL_HUP
   277  };
   278  
   279  # undef __need_siginfo_t
   280  #endif  /* !have siginfo_t && (have _SIGNAL_H || need siginfo_t).  */
   281  
   282  
   283  #if (defined _SIGNAL_H || defined __need_sigevent_t) \
   284      && !defined __have_sigevent_t
   285  # define __have_sigevent_t      1
   286  
   287  /* Structure to transport application-defined values with signals.  */
   288  # define __SIGEV_MAX_SIZE       64
   289  # if __WORDSIZE == 64
   290  #  define __SIGEV_PAD_SIZE      ((__SIGEV_MAX_SIZE / sizeof (int)) - 4)
   291  # else
   292  #  define __SIGEV_PAD_SIZE      ((__SIGEV_MAX_SIZE / sizeof (int)) - 3)
   293  # endif
   294  
   295  /* Forward declaration.  */
   296  # ifndef __have_pthread_attr_t
   297  typedef union pthread_attr_t pthread_attr_t;
   298  #  define __have_pthread_attr_t 1
   299  # endif
   300  
   301  typedef struct sigevent
   302    {
   303      sigval_t sigev_value;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   304      int sigev_signo;
   305      int sigev_notify;
   306  
   307      union
   308        {
   309          int _pad[__SIGEV_PAD_SIZE];
   310  
   311          /* When SIGEV_SIGNAL and SIGEV_THREAD_ID set, LWP ID of the
   312             thread to receive the signal.  */
   313          __pid_t _tid;
   314  
   315          struct
   316            {
   317              void (*_function) (sigval_t);       /* Function to start.  
        */
   318              pthread_attr_t *_attribute;         /* Thread attributes.  
        */
   319            } _sigev_thread;
   320        } _sigev_un;
   321    } sigevent_t;
   322  
   323  /* POSIX names to access some of the members.  */
   324  # define sigev_notify_function   _sigev_un._sigev_thread._function
   325  # define sigev_notify_attributes _sigev_un._sigev_thread._attribute
   326  
   327  /* `sigev_notify' values.  */
   328  enum
   329  {
   330    SIGEV_SIGNAL = 0,             /* Notify via signal.  */
   331  # define SIGEV_SIGNAL   SIGEV_SIGNAL
   332    SIGEV_NONE,                   /* Other notification: meaningless.  */
   333  # define SIGEV_NONE     SIGEV_NONE
   334    SIGEV_THREAD,                 /* Deliver via thread creation.  */
   335  # define SIGEV_THREAD   SIGEV_THREAD
   336  
   337    SIGEV_THREAD_ID = 4           /* Send signal to specific thread.  */
   338  #define SIGEV_THREAD_ID SIGEV_THREAD_ID
   339  };
   340  
   341  #endif  /* have _SIGNAL_H.  */
Close file: /usr/include/bits/siginfo.h
    80  # include <bits/siginfo.h>
    81  #endif
    82  
    83  
    84  /* Type of a signal handler.  */
    85  typedef void (*__sighandler_t) (int);
    86  
    87  /* The X/Open definition of `signal' specifies the SVID semantic.  Use
    88     the additional function `sysv_signal' when X/Open compatibility is
    89     requested.  */
    90  extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handle
        r)
    91       __THROW;
    92  #ifdef __USE_GNU
    93  extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
    94       __THROW;
    95  #endif
    96  
    97  /* Set the handler for the signal SIG to HANDLER, returning the old
    98     handler, or SIG_ERR on error.
    99     By default `signal' has the BSD semantic.  */
   100  __BEGIN_NAMESPACE_STD
   101  #ifdef __USE_BSD
   102  extern __sighandler_t signal (int __sig, __sighandler_t __handler)
   103       __THROW;
   104  #else
   105  /* Make sure the used `signal' implementation is the SVID version. */
   106  # ifdef __REDIRECT_NTH
   107  extern __sighandler_t __REDIRECT_NTH (signal,
   108                                        (int __sig, __sighandler_t __hand
        ler),
   109                                        __sysv_signal);
   110  # else
   111  #  define signal __sysv_signal

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   112  # endif
   113  #endif
   114  __END_NAMESPACE_STD
   115  
   116  #ifdef __USE_XOPEN
   117  /* The X/Open definition of `signal' conflicts with the BSD version.
   118     So they defined another function `bsd_signal'.  */
   119  extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
   120       __THROW;
   121  #endif
   122  
   123  /* Send signal SIG to process number PID.  If PID is zero,
   124     send SIG to all processes in the current process's process group.
   125     If PID is < -1, send SIG to all processes in process group - PID.  *
        /
   126  #ifdef __USE_POSIX
   127  extern int kill (__pid_t __pid, int __sig) __THROW;
   128  #endif /* Use POSIX.  */
   129  
   130  #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED
   131  /* Send SIG to all processes in process group PGRP.
   132     If PGRP is zero, send SIG to all processes in
   133     the current process's process group.  */
   134  extern int killpg (__pid_t __pgrp, int __sig) __THROW;
   135  #endif /* Use BSD || X/Open Unix.  */
   136  
   137  __BEGIN_NAMESPACE_STD
   138  /* Raise signal SIG, i.e., send SIG to yourself.  */
   139  extern int raise (int __sig) __THROW;
   140  __END_NAMESPACE_STD
   141  
   142  #ifdef __USE_SVID
   143  /* SVID names for the same things.  */
   144  extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
   145       __THROW;
   146  extern int gsignal (int __sig) __THROW;
   147  #endif /* Use SVID.  */
   148  
   149  #if defined __USE_MISC || defined __USE_XOPEN2K
   150  /* Print a message describing the meaning of the given signal number.  
        */
   151  extern void psignal (int __sig, const char *__s);
   152  #endif /* Use misc or POSIX 2008.  */
   153  
   154  #ifdef __USE_XOPEN2K
   155  /* Print a message describing the meaning of the given signal informati
        on.  */
   156  extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
   157  #endif /* POSIX 2008.  */
   158  
   159  
   160  
   161  /* The `sigpause' function has two different interfaces.  The original
   162     BSD definition defines the argument as a mask of the signal, while
   163     the more modern interface in X/Open defines it as the signal
   164     number.  We go with the BSD version unless the user explicitly
   165     selects the X/Open version.
   166  
   167     This function is a cancellation point and therefore not marked with
   168     __THROW.  */
   169  extern int __sigpause (int __sig_or_mask, int __is_sig);
   170  
   171  #ifdef __FAVOR_BSD
   172  /* Set the mask of blocked signals to MASK,
   173     wait for a signal to arrive, and then restore the mask.  */
   174  extern int sigpause (int __mask) __THROW __attribute_deprecated__;
   175  #else
   176  # ifdef __USE_XOPEN
   177  #  ifdef __GNUC__
   178  extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
   179  #  else
   180  /* Remove a signal from the signal mask and suspend the process.  */
   181  #   define sigpause(sig) __sigpause ((sig), 1)
   182  #  endif
   183  # endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   184  #endif
   185  
   186  
   187  #ifdef __USE_BSD
   188  /* None of the following functions should be used anymore.  They are he
        re
   189     only for compatibility.  A single word (`int') is not guaranteed to 
        be
   190     enough to hold a complete signal mask and therefore these functions
   191     simply do not work in many situations.  Use `sigprocmask' instead.  
        */
   192  
   193  /* Compute mask for signal SIG.  */
   194  # define sigmask(sig)   __sigmask(sig)
   195  
   196  /* Block signals in MASK, returning the old mask.  */
   197  extern int sigblock (int __mask) __THROW __attribute_deprecated__;
   198  
   199  /* Set the mask of blocked signals to MASK, returning the old mask.  */
   200  extern int sigsetmask (int __mask) __THROW __attribute_deprecated__;
   201  
   202  /* Return currently selected signal mask.  */
   203  extern int siggetmask (void) __THROW __attribute_deprecated__;
   204  #endif /* Use BSD.  */
   205  
   206  
   207  #ifdef __USE_MISC
   208  # define NSIG   _NSIG
   209  #endif
   210  
   211  #ifdef __USE_GNU
   212  typedef __sighandler_t sighandler_t;
   213  #endif
   214  
   215  /* 4.4 BSD uses the name `sig_t' for this.  */
   216  #ifdef __USE_BSD
   217  typedef __sighandler_t sig_t;
   218  #endif
   219  
   220  #ifdef __USE_POSIX
   221  
   222  /* Clear all signals from SET.  */
   223  extern int sigemptyset (sigset_t *__set) __THROW __nonnull ((1));
   224  
   225  /* Set all signals in SET.  */
   226  extern int sigfillset (sigset_t *__set) __THROW __nonnull ((1));
   227  
   228  /* Add SIGNO to SET.  */
   229  extern int sigaddset (sigset_t *__set, int __signo) __THROW __nonnull (
        (1));
   230  
   231  /* Remove SIGNO from SET.  */
   232  extern int sigdelset (sigset_t *__set, int __signo) __THROW __nonnull (
        (1));
   233  
   234  /* Return 1 if SIGNO is in SET, 0 if not.  */
   235  extern int sigismember (const sigset_t *__set, int __signo)
   236       __THROW __nonnull ((1));
   237  
   238  # ifdef __USE_GNU
   239  /* Return non-empty value is SET is not empty.  */
   240  extern int sigisemptyset (const sigset_t *__set) __THROW __nonnull ((1)
        );
   241  
   242  /* Build new signal set by combining the two inputs set using logical A
        ND.  */
   243  extern int sigandset (sigset_t *__set, const sigset_t *__left,
   244                        const sigset_t *__right) __THROW __nonnull ((1, 2
        , 3));
   245  
   246  /* Build new signal set by combining the two inputs set using logical O
        R.  */
   247  extern int sigorset (sigset_t *__set, const sigset_t *__left,
   248                       const sigset_t *__right) __THROW __nonnull ((1, 2,
         3));

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   249  # endif /* GNU */
   250  
   251  /* Get the system-specific definitions of `struct sigaction'
   252     and the `SA_*' and `SIG_*'. constants.  */
Open file: /usr/include/bits/sigaction.h
     1  /* The proper definitions for Linux's sigaction.
     2     Copyright (C) 1993-1999, 2000, 2010 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _SIGNAL_H
    20  # error "Never include <bits/sigaction.h> directly; use <signal.h> inst
        ead."
    21  #endif
    22  
    23  /* Structure describing the action to be taken when a signal arrives.  
        */
    24  struct sigaction
    25    {
    26      /* Signal handler.  */
    27  #ifdef __USE_POSIX199309
    28      union
    29        {
    30          /* Used if SA_SIGINFO is not set.  */
    31          __sighandler_t sa_handler;
    32          /* Used if SA_SIGINFO is set.  */
    33          void (*sa_sigaction) (int, siginfo_t *, void *);
    34        }
    35      __sigaction_handler;
    36  # define sa_handler     __sigaction_handler.sa_handler
    37  # define sa_sigaction   __sigaction_handler.sa_sigaction
    38  #else
    39      __sighandler_t sa_handler;
    40  #endif
    41  
    42      /* Additional set of signals to be blocked.  */
    43      __sigset_t sa_mask;
    44  
    45      /* Special flags.  */
    46      int sa_flags;
    47  
    48      /* Restore handler.  */
    49      void (*sa_restorer) (void);
    50    };
    51  
    52  /* Bits in `sa_flags'.  */
    53  #define SA_NOCLDSTOP  1          /* Don't send SIGCHLD when children st
        op.  */
    54  #define SA_NOCLDWAIT  2          /* Don't create zombie on child death.
          */
    55  #define SA_SIGINFO    4          /* Invoke signal-catching function wit
        h
    56                                      three arguments instead of one.  */
    57  #if defined __USE_UNIX98 || defined __USE_MISC
    58  # define SA_ONSTACK   0x08000000 /* Use signal stack by using `sa_resto
        rer'. */
    59  #endif
    60  #if defined __USE_UNIX98 || defined __USE_MISC || defined __USE_XOPEN2K
        8
    61  # define SA_RESTART   0x10000000 /* Restart syscall on signal return.  
        */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    62  # define SA_NODEFER   0x40000000 /* Don't automatically block the signa
        l when
    63                                      its handler is being executed.  */
    64  # define SA_RESETHAND 0x80000000 /* Reset to SIG_DFL on entry to handle
        r.  */
    65  #endif
    66  #ifdef __USE_MISC
    67  # define SA_INTERRUPT 0x20000000 /* Historical no-op.  */
    68  
    69  /* Some aliases for the SA_ constants.  */
    70  # define SA_NOMASK    SA_NODEFER
    71  # define SA_ONESHOT   SA_RESETHAND
    72  # define SA_STACK     SA_ONSTACK
    73  #endif
    74  
    75  /* Values for the HOW argument to `sigprocmask'.  */
    76  #define SIG_BLOCK     0          /* Block signals.  */
    77  #define SIG_UNBLOCK   1          /* Unblock signals.  */
    78  #define SIG_SETMASK   2          /* Set the set of blocked signals.  */
Close file: /usr/include/bits/sigaction.h
   253  # include <bits/sigaction.h>
   254  
   255  /* Get and/or change the set of blocked signals.  */
   256  extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   257                          sigset_t *__restrict __oset) __THROW;
   258  
   259  /* Change the set of blocked signals to SET,
   260     wait until a signal arrives, and restore the set of blocked signals.
   261  
   262     This function is a cancellation point and therefore not marked with
   263     __THROW.  */
   264  extern int sigsuspend (const sigset_t *__set) __nonnull ((1));
   265  
   266  /* Get and/or set the action for signal SIG.  */
   267  extern int sigaction (int __sig, const struct sigaction *__restrict __a
        ct,
   268                        struct sigaction *__restrict __oact) __THROW;
   269  
   270  /* Put in SET all signals that are blocked and waiting to be delivered.
          */
   271  extern int sigpending (sigset_t *__set) __THROW __nonnull ((1));
   272  
   273  
   274  /* Select any of pending signals from SET or wait for any to arrive.
   275  
   276     This function is a cancellation point and therefore not marked with
   277     __THROW.  */
   278  extern int sigwait (const sigset_t *__restrict __set, int *__restrict _
        _sig)
   279       __nonnull ((1, 2));
   280  
   281  # ifdef __USE_POSIX199309
   282  /* Select any of pending signals from SET and place information in INFO
        .
   283  
   284     This function is a cancellation point and therefore not marked with
   285     __THROW.  */
   286  extern int sigwaitinfo (const sigset_t *__restrict __set,
   287                          siginfo_t *__restrict __info) __nonnull ((1));
   288  
   289  /* Select any of pending signals from SET and place information in INFO
        .
   290     Wait the time specified by TIMEOUT if no signal is pending.
   291  
   292     This function is a cancellation point and therefore not marked with
   293     __THROW.  */
   294  extern int sigtimedwait (const sigset_t *__restrict __set,
   295                           siginfo_t *__restrict __info,
   296                           const struct timespec *__restrict __timeout)
   297       __nonnull ((1));
   298  
   299  /* Send signal SIG to the process PID.  Associate data in VAL with the
   300     signal.  */
   301  extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val
        )

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   302       __THROW;
   303  # endif /* Use POSIX 199306.  */
   304  
   305  #endif /* Use POSIX.  */
   306  
   307  #ifdef __USE_BSD
   308  
   309  /* Names of the signals.  This variable exists only for compatibility.
   310     Use `strsignal' instead (see <string.h>).  */
   311  extern const char *const _sys_siglist[_NSIG];
   312  extern const char *const sys_siglist[_NSIG];
   313  
   314  /* Structure passed to `sigvec'.  */
   315  struct sigvec
   316    {
   317      __sighandler_t sv_handler;  /* Signal handler.  */
   318      int sv_mask;                /* Mask of signals to be blocked.  */
   319  
   320      int sv_flags;               /* Flags (see below).  */
   321  # define sv_onstack     sv_flags /* 4.2 BSD compatibility.  */
   322    };
   323  
   324  /* Bits in `sv_flags'.  */
   325  # define SV_ONSTACK     (1 << 0)/* Take the signal on the signal stack.
          */
   326  # define SV_INTERRUPT   (1 << 1)/* Do not restart system calls.  */
   327  # define SV_RESETHAND   (1 << 2)/* Reset handler to SIG_DFL on receipt.
          */
   328  
   329  
   330  /* If VEC is non-NULL, set the handler for SIG to the `sv_handler' memb
        er
   331     of VEC.  The signals in `sv_mask' will be blocked while the handler 
        runs.
   332     If the SV_RESETHAND bit is set in `sv_flags', the handler for SIG wi
        ll be
   333     reset to SIG_DFL before `sv_handler' is entered.  If OVEC is non-NUL
        L,
   334     it is filled in with the old information for SIG.  */
   335  extern int sigvec (int __sig, const struct sigvec *__vec,
   336                     struct sigvec *__ovec) __THROW;
   337  
   338  
   339  /* Get machine-dependent `struct sigcontext' and signal subcodes.  */
Open file: /usr/include/bits/sigcontext.h
     1  /* Copyright (C) 2002-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _BITS_SIGCONTEXT_H
    19  #define _BITS_SIGCONTEXT_H  1
    20  
    21  #if !defined _SIGNAL_H && !defined _SYS_UCONTEXT_H
    22  # error "Never use <bits/sigcontext.h> directly; include <signal.h> ins
        tead."
    23  #endif
    24  
    25  #define FP_XSTATE_MAGIC1        0x46505853U
    26  #define FP_XSTATE_MAGIC2        0x46505845U
    27  #define FP_XSTATE_MAGIC2_SIZE   sizeof(FP_XSTATE_MAGIC2)
    28  
    29  struct _fpx_sw_bytes

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    30  {
    31    __uint32_t magic1;
    32    __uint32_t extended_size;
    33    __uint64_t xstate_bv;
    34    __uint32_t xstate_size;
    35    __uint32_t padding[7];
    36  };
    37  
    38  struct _fpreg
    39  {
    40    unsigned short significand[4];
    41    unsigned short exponent;
    42  };
    43  
    44  struct _fpxreg
    45  {
    46    unsigned short significand[4];
    47    unsigned short exponent;
    48    unsigned short padding[3];
    49  };
    50  
    51  struct _xmmreg
    52  {
    53    __uint32_t    element[4];
    54  };
    55  
    56  
    57  
    58  #ifndef __x86_64__
    59  
    60  struct _fpstate
    61  {
    62    /* Regular FPU environment.  */
    63    __uint32_t    cw;
    64    __uint32_t            sw;
    65    __uint32_t            tag;
    66    __uint32_t            ipoff;
    67    __uint32_t            cssel;
    68    __uint32_t            dataoff;
    69    __uint32_t            datasel;
    70    struct _fpreg _st[8];
    71    unsigned short status;
    72    unsigned short magic;
    73  
    74    /* FXSR FPU environment.  */
    75    __uint32_t            _fxsr_env[6];
    76    __uint32_t            mxcsr;
    77    __uint32_t            reserved;
    78    struct _fpxreg        _fxsr_st[8];
    79    struct _xmmreg        _xmm[8];
    80    __uint32_t            padding[56];
    81  };
    82  
    83  #ifndef sigcontext_struct
    84  /* Kernel headers before 2.1.1 define a struct sigcontext_struct, but
    85     we need sigcontext.  Some packages have come to rely on
    86     sigcontext_struct being defined on 32-bit x86, so define this for
    87     their benefit.  */
    88  # define sigcontext_struct sigcontext
    89  #endif
    90  
    91  #define X86_FXSR_MAGIC          0x0000
    92  
    93  struct sigcontext
    94  {
    95    unsigned short gs, __gsh;
    96    unsigned short fs, __fsh;
    97    unsigned short es, __esh;
    98    unsigned short ds, __dsh;
    99    unsigned long edi;
   100    unsigned long esi;
   101    unsigned long ebp;
   102    unsigned long esp;
   103    unsigned long ebx;
   104    unsigned long edx;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   105    unsigned long ecx;
   106    unsigned long eax;
   107    unsigned long trapno;
   108    unsigned long err;
   109    unsigned long eip;
   110    unsigned short cs, __csh;
   111    unsigned long eflags;
   112    unsigned long esp_at_signal;
   113    unsigned short ss, __ssh;
   114    struct _fpstate * fpstate;
   115    unsigned long oldmask;
   116    unsigned long cr2;
   117  };
   118  
   119  #else /* __x86_64__ */
   120  
   121  struct _fpstate
   122  {
   123    /* FPU environment matching the 64-bit FXSAVE layout.  */
   124    __uint16_t            cwd;
   125    __uint16_t            swd;
   126    __uint16_t            ftw;
   127    __uint16_t            fop;
   128    __uint64_t            rip;
   129    __uint64_t            rdp;
   130    __uint32_t            mxcsr;
   131    __uint32_t            mxcr_mask;
   132    struct _fpxreg        _st[8];
   133    struct _xmmreg        _xmm[16];
   134    __uint32_t            padding[24];
   135  };
   136  
   137  struct sigcontext
   138  {
   139    __uint64_t r8;
   140    __uint64_t r9;
   141    __uint64_t r10;
   142    __uint64_t r11;
   143    __uint64_t r12;
   144    __uint64_t r13;
   145    __uint64_t r14;
   146    __uint64_t r15;
   147    __uint64_t rdi;
   148    __uint64_t rsi;
   149    __uint64_t rbp;
   150    __uint64_t rbx;
   151    __uint64_t rdx;
   152    __uint64_t rax;
   153    __uint64_t rcx;
   154    __uint64_t rsp;
   155    __uint64_t rip;
   156    __uint64_t eflags;
   157    unsigned short cs;
   158    unsigned short gs;
   159    unsigned short fs;
   160    unsigned short __pad0;
   161    __uint64_t err;
   162    __uint64_t trapno;
   163    __uint64_t oldmask;
   164    __uint64_t cr2;
   165    __extension__ union
   166      {
   167        struct _fpstate * fpstate;
   168        __uint64_t __fpstate_word;
   169      };
   170    __uint64_t __reserved1 [8];
   171  };
   172  
   173  #endif /* __x86_64__ */
   174  
   175  struct _xsave_hdr
   176  {
   177    __uint64_t xstate_bv;
   178    __uint64_t reserved1[2];
   179    __uint64_t reserved2[5];

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   180  };
   181  
   182  struct _ymmh_state
   183  {
   184    __uint32_t ymmh_space[64];
   185  };
   186  
   187  struct _xstate
   188  {
   189    struct _fpstate fpstate;
   190    struct _xsave_hdr xstate_hdr;
   191    struct _ymmh_state ymmh;
   192  };
   193  
   194  #endif /* _BITS_SIGCONTEXT_H */
Close file: /usr/include/bits/sigcontext.h
   340  # include <bits/sigcontext.h>
   341  
   342  /* Restore the state saved in SCP.  */
   343  extern int sigreturn (struct sigcontext *__scp) __THROW;
   344  
   345  #endif /*  use BSD.  */
   346  
   347  
   348  #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED || defined __USE_
        XOPEN2K8
   349  # define __need_size_t
Open file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
     1  /* Copyright (C) 1989-2013 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \
    31      || defined(__need_wint_t)
    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \
    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  
    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    47     There's no way to win with the other order!  Sun lossage.  */
    48  
    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif
    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.
   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t
   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif
   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   115  #endif
   116  
   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually
   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  
   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF
   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #define _PTRDIFF_T
   137  #define _T_PTRDIFF_
   138  #define _T_PTRDIFF
   139  #define __PTRDIFF_T
   140  #define _PTRDIFF_T_
   141  #define _BSD_PTRDIFF_T_
   142  #define ___int_ptrdiff_t_h
   143  #define _GCC_PTRDIFF_T
   144  #ifndef __PTRDIFF_TYPE__
   145  #define __PTRDIFF_TYPE__ long int
   146  #endif
   147  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   148  #endif /* _GCC_PTRDIFF_T */
   149  #endif /* ___int_ptrdiff_t_h */
   150  #endif /* _BSD_PTRDIFF_T_ */
   151  #endif /* _PTRDIFF_T_ */
   152  #endif /* __PTRDIFF_T */
   153  #endif /* _T_PTRDIFF */
   154  #endif /* _T_PTRDIFF_ */
   155  #endif /* _PTRDIFF_T */
   156  
   157  /* If this symbol has done its job, get rid of it.  */
   158  #undef  __need_ptrdiff_t
   159  
   160  #endif /* _STDDEF_H or __need_ptrdiff_t.  */
   161  
   162  /* Unsigned type of `sizeof' something.  */
   163  
   164  /* Define this type if we are doing the whole job,
   165     or if we want this type in particular.  */
   166  #if defined (_STDDEF_H) || defined (__need_size_t)
   167  #ifndef __size_t__      /* BeOS */
   168  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   169  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */
   170  #ifndef _SYS_SIZE_T_H
   171  #ifndef _T_SIZE_
   172  #ifndef _T_SIZE
   173  #ifndef __SIZE_T
   174  #ifndef _SIZE_T_
   175  #ifndef _BSD_SIZE_T_
   176  #ifndef _SIZE_T_DEFINED_
   177  #ifndef _SIZE_T_DEFINED
   178  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   179  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   180  #ifndef ___int_size_t_h
   181  #ifndef _GCC_SIZE_T
   182  #ifndef _SIZET_
   183  #ifndef __size_t
   184  #define __size_t__      /* BeOS */
   185  #define __SIZE_T__      /* Cray Unicos/Mk */
   186  #define _SIZE_T
   187  #define _SYS_SIZE_T_H
   188  #define _T_SIZE_
   189  #define _T_SIZE

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   190  #define __SIZE_T
   191  #define _SIZE_T_
   192  #define _BSD_SIZE_T_
   193  #define _SIZE_T_DEFINED_
   194  #define _SIZE_T_DEFINED
   195  #define _BSD_SIZE_T_DEFINED_    /* Darwin */
   196  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   197  #define ___int_size_t_h
   198  #define _GCC_SIZE_T
   199  #define _SIZET_
   200  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   201    || defined(__FreeBSD_kernel__)
   202  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   203  #elif defined (__VMS__)
   204  /* __size_t is also a typedef on VMS.  */
   205  #else
   206  #define __size_t
   207  #endif
   208  #ifndef __SIZE_TYPE__
   209  #define __SIZE_TYPE__ long unsigned int
   210  #endif
   211  #if !(defined (__GNUG__) && defined (size_t))
   212  typedef __SIZE_TYPE__ size_t;
   213  #ifdef __BEOS__
   214  typedef long ssize_t;
   215  #endif /* __BEOS__ */
   216  #endif /* !(defined (__GNUG__) && defined (size_t)) */
   217  #endif /* __size_t */
   218  #endif /* _SIZET_ */
   219  #endif /* _GCC_SIZE_T */
   220  #endif /* ___int_size_t_h */
   221  #endif /* _SIZE_T_DECLARED */
   222  #endif /* _BSD_SIZE_T_DEFINED_ */
   223  #endif /* _SIZE_T_DEFINED */
   224  #endif /* _SIZE_T_DEFINED_ */
   225  #endif /* _BSD_SIZE_T_ */
   226  #endif /* _SIZE_T_ */
   227  #endif /* __SIZE_T */
   228  #endif /* _T_SIZE */
   229  #endif /* _T_SIZE_ */
   230  #endif /* _SYS_SIZE_T_H */
   231  #endif /* _SIZE_T */
   232  #endif /* __SIZE_T__ */
   233  #endif /* __size_t__ */
   234  #undef  __need_size_t
   235  #endif /* _STDDEF_H or __need_size_t.  */
   236  
   237  
   238  /* Wide character type.
   239     Locale-writers should change this as necessary to
   240     be big enough to hold unique values not between 0 and 127,
   241     and not (wchar_t) -1, for each defined multibyte character.  */
   242  
   243  /* Define this type if we are doing the whole job,
   244     or if we want this type in particular.  */
   245  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   246  #ifndef __wchar_t__     /* BeOS */
   247  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   248  #ifndef _WCHAR_T
   249  #ifndef _T_WCHAR_
   250  #ifndef _T_WCHAR
   251  #ifndef __WCHAR_T
   252  #ifndef _WCHAR_T_
   253  #ifndef _BSD_WCHAR_T_
   254  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
   255  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   256  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   257  #ifndef _WCHAR_T_DEFINED_
   258  #ifndef _WCHAR_T_DEFINED
   259  #ifndef _WCHAR_T_H
   260  #ifndef ___int_wchar_t_h
   261  #ifndef __INT_WCHAR_T_H
   262  #ifndef _GCC_WCHAR_T
   263  #define __wchar_t__     /* BeOS */
   264  #define __WCHAR_T__     /* Cray Unicos/Mk */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   265  #define _WCHAR_T
   266  #define _T_WCHAR_
   267  #define _T_WCHAR
   268  #define __WCHAR_T
   269  #define _WCHAR_T_
   270  #define _BSD_WCHAR_T_
   271  #define _WCHAR_T_DEFINED_
   272  #define _WCHAR_T_DEFINED
   273  #define _WCHAR_T_H
   274  #define ___int_wchar_t_h
   275  #define __INT_WCHAR_T_H
   276  #define _GCC_WCHAR_T
   277  #define _WCHAR_T_DECLARED
   278  
   279  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   280     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   281     symbols in the _FOO_T_ family, stays defined even after its
   282     corresponding type is defined).  If we define wchar_t, then we
   283     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   284     we undef _WCHAR_T_, then we must also define rune_t, since 
   285     headers like runetype.h assume that if machine/ansi.h is included,
   286     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   287     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   288     the same type." */
   289  #ifdef _BSD_WCHAR_T_
   290  #undef _BSD_WCHAR_T_
   291  #ifdef _BSD_RUNE_T_
   292  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   293  typedef _BSD_RUNE_T_ rune_t;
   294  #define _BSD_WCHAR_T_DEFINED_
   295  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   296  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   297  /* Why is this file so hard to maintain properly?  In contrast to
   298     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   299     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   300     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   301  #undef _BSD_RUNE_T_
   302  #endif
   303  #endif
   304  #endif
   305  #endif
   306  /* FreeBSD 5 can't be handled well using "traditional" logic above
   307     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   308     rune_t in some cases... */
   309  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   310  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   311  #if __BSD_VISIBLE
   312  #ifndef _RUNE_T_DECLARED
   313  typedef __rune_t        rune_t;
   314  #define _RUNE_T_DECLARED
   315  #endif
   316  #endif
   317  #endif
   318  #endif
   319  
   320  #ifndef __WCHAR_TYPE__
   321  #define __WCHAR_TYPE__ int
   322  #endif
   323  #ifndef __cplusplus
   324  typedef __WCHAR_TYPE__ wchar_t;
   325  #endif
   326  #endif
   327  #endif
   328  #endif
   329  #endif
   330  #endif
   331  #endif
   332  #endif /* _WCHAR_T_DECLARED */
   333  #endif /* _BSD_RUNE_T_DEFINED_ */
   334  #endif
   335  #endif
   336  #endif
   337  #endif
   338  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   339  #endif
   340  #endif
   341  #endif /* __WCHAR_T__ */
   342  #endif /* __wchar_t__ */
   343  #undef  __need_wchar_t
   344  #endif /* _STDDEF_H or __need_wchar_t.  */
   345  
   346  #if defined (__need_wint_t)
   347  #ifndef _WINT_T
   348  #define _WINT_T
   349  
   350  #ifndef __WINT_TYPE__
   351  #define __WINT_TYPE__ unsigned int
   352  #endif
   353  typedef __WINT_TYPE__ wint_t;
   354  #endif
   355  #undef __need_wint_t
   356  #endif
   357  
   358  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   359      are already defined.  */
   360  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */
   361  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   362  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)
   363  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   364      are probably typos and should be removed before 2.8 is released.  *
        /
   365  #ifdef _GCC_PTRDIFF_T_
   366  #undef _PTRDIFF_T_
   367  #undef _BSD_PTRDIFF_T_
   368  #endif
   369  #ifdef _GCC_SIZE_T_
   370  #undef _SIZE_T_
   371  #undef _BSD_SIZE_T_
   372  #endif
   373  #ifdef _GCC_WCHAR_T_
   374  #undef _WCHAR_T_
   375  #undef _BSD_WCHAR_T_
   376  #endif
   377  /*  The following ones are the real ones.  */
   378  #ifdef _GCC_PTRDIFF_T
   379  #undef _PTRDIFF_T_
   380  #undef _BSD_PTRDIFF_T_
   381  #endif
   382  #ifdef _GCC_SIZE_T
   383  #undef _SIZE_T_
   384  #undef _BSD_SIZE_T_
   385  #endif
   386  #ifdef _GCC_WCHAR_T
   387  #undef _WCHAR_T_
   388  #undef _BSD_WCHAR_T_
   389  #endif
   390  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */
   391  
   392  #endif /* __sys_stdtypes_h */
   393  
   394  /* A null pointer constant.  */
   395  
   396  #if defined (_STDDEF_H) || defined (__need_NULL)
   397  #undef NULL             /* in case <stdio.h> has defined it. */
   398  #ifdef __GNUG__
   399  #define NULL __null
   400  #else   /* G++ */
   401  #ifndef __cplusplus
   402  #define NULL ((void *)0)
   403  #else   /* C++ */
   404  #define NULL 0
   405  #endif  /* C++ */
   406  #endif  /* G++ */
   407  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   408  #undef  __need_NULL

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   409  
   410  #ifdef _STDDEF_H
   411  
   412  /* Offset of member MEMBER in a struct of type TYPE. */
   413  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   414  
   415  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   416    || (defined(__cplusplus) && __cplusplus >= 201103L)
   417  #ifndef _GCC_MAX_ALIGN_T
   418  #define _GCC_MAX_ALIGN_T
   419  /* Type whose alignment is supported in every context and is at least
   420     as great as that of any standard type not using alignment
   421     specifiers.  */
   422  typedef struct {
   423    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));
   424    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   425  } max_align_t;
   426  #endif
   427  #endif /* C11 or C++11.  */
   428  
   429  #if defined(__cplusplus) && __cplusplus >= 201103L
   430  #ifndef _GXX_NULLPTR_T
   431  #define _GXX_NULLPTR_T
   432    typedef decltype(nullptr) nullptr_t;
   433  #endif
   434  #endif /* C++11.  */
   435  
   436  #endif /* _STDDEF_H was defined this time */
   437  
   438  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
   439            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/4.8.2/include/stddef.h
   350  # include <stddef.h>
   351  
   352  /* If INTERRUPT is nonzero, make signal SIG interrupt system calls
   353     (causing them to fail with EINTR); if INTERRUPT is zero, make system
   354     calls be restarted after signal SIG.  */
   355  extern int siginterrupt (int __sig, int __interrupt) __THROW;
   356  
Open file: /usr/include/bits/sigstack.h
     1  /* sigstack, sigaltstack definitions.
     2     Copyright (C) 1998, 1999 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _SIGNAL_H
    20  # error "Never include this file directly.  Use <signal.h> instead"
    21  #endif
    22  
    23  
    24  /* Structure describing a signal stack (obsolete).  */
    25  struct sigstack
    26    {
    27      void *ss_sp;                /* Signal stack pointer.  */
    28      int ss_onstack;             /* Nonzero if executing on this stack. 
         */
    29    };
    30  
    31  
    32  /* Possible values for `ss_flags.'.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    33  enum
    34  {
    35    SS_ONSTACK = 1,
    36  #define SS_ONSTACK      SS_ONSTACK
    37    SS_DISABLE
    38  #define SS_DISABLE      SS_DISABLE
    39  };
    40  
    41  /* Minimum stack size for a signal handler.  */
    42  #define MINSIGSTKSZ     2048
    43  
    44  /* System default stack size.  */
    45  #define SIGSTKSZ        8192
    46  
    47  
    48  /* Alternate, preferred interface.  */
    49  typedef struct sigaltstack
    50    {
    51      void *ss_sp;
    52      int ss_flags;
    53      size_t ss_size;
    54    } stack_t;
Close file: /usr/include/bits/sigstack.h
   357  # include <bits/sigstack.h>
   358  # if defined __USE_XOPEN || defined __USE_XOPEN2K8
   359  /* This will define `ucontext_t' and `mcontext_t'.  */
Open file: /usr/include/sys/ucontext.h
     1  /* Copyright (C) 2001-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _SYS_UCONTEXT_H
    19  #define _SYS_UCONTEXT_H 1
    20  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.
    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.
    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  
   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__
   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */
   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif
   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif
   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get
   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2
   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    21  #include <features.h>
Open file: /usr/include/signal.h
     1  /* Copyright (C) 1991-2004,2007,2009,2010,2012 Free Software Foundation
        , Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      ISO C99 Standard: 7.14 Signal handling <signal.h>
    20   */
    21  
    22  #ifndef _SIGNAL_H
    23  
    24  #if !defined __need_sig_atomic_t && !defined __need_sigset_t
    25  # define _SIGNAL_H
    26  #endif
    27  
    28  #include <features.h>
    29  
    30  __BEGIN_DECLS
    31  
    32  #include <bits/sigset.h>                /* __sigset_t, __sig_atomic_t. 
         */
    33  
    34  /* An integral type that can be modified atomically, without the
    35     possibility of a signal arriving in the middle of the operation.  */
    36  #if defined __need_sig_atomic_t || defined _SIGNAL_H
    37  # ifndef __sig_atomic_t_defined
    38  #  define __sig_atomic_t_defined
    39  __BEGIN_NAMESPACE_STD
    40  typedef __sig_atomic_t sig_atomic_t;
    41  __END_NAMESPACE_STD
    42  # endif
    43  # undef __need_sig_atomic_t
    44  #endif
    45  
    46  #if defined __need_sigset_t || (defined _SIGNAL_H && defined __USE_POSI
        X)
    47  # ifndef __sigset_t_defined

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    48  #  define __sigset_t_defined
    49  typedef __sigset_t sigset_t;
    50  # endif
    51  # undef __need_sigset_t
    52  #endif
    53  
    54  #ifdef _SIGNAL_H
    55  
    56  #include <bits/types.h>
    57  #include <bits/signum.h>
    58  
    59  #if defined __USE_XOPEN || defined __USE_XOPEN2K
    60  # ifndef __pid_t_defined
    61  typedef __pid_t pid_t;
    62  #  define __pid_t_defined
    63  #endif
    64  #ifdef __USE_XOPEN
    65  # endif
    66  # ifndef __uid_t_defined
    67  typedef __uid_t uid_t;
    68  #  define __uid_t_defined
    69  # endif
    70  #endif  /* Unix98 */
    71  
    72  #ifdef __USE_POSIX199309
    73  /* We need `struct timespec' later on.  */
    74  # define __need_timespec
    75  # include <time.h>
    76  #endif
    77  
    78  #if defined __USE_POSIX199309 || defined __USE_XOPEN_EXTENDED
    79  /* Get the `siginfo_t' type plus the needed symbols.  */
    80  # include <bits/siginfo.h>
    81  #endif
    82  
    83  
    84  /* Type of a signal handler.  */
    85  typedef void (*__sighandler_t) (int);
    86  
    87  /* The X/Open definition of `signal' specifies the SVID semantic.  Use
    88     the additional function `sysv_signal' when X/Open compatibility is
    89     requested.  */
    90  extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handle
        r)
    91       __THROW;
    92  #ifdef __USE_GNU
    93  extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
    94       __THROW;
    95  #endif
    96  
    97  /* Set the handler for the signal SIG to HANDLER, returning the old
    98     handler, or SIG_ERR on error.
    99     By default `signal' has the BSD semantic.  */
   100  __BEGIN_NAMESPACE_STD
   101  #ifdef __USE_BSD
   102  extern __sighandler_t signal (int __sig, __sighandler_t __handler)
   103       __THROW;
   104  #else
   105  /* Make sure the used `signal' implementation is the SVID version. */
   106  # ifdef __REDIRECT_NTH
   107  extern __sighandler_t __REDIRECT_NTH (signal,
   108                                        (int __sig, __sighandler_t __hand
        ler),
   109                                        __sysv_signal);
   110  # else
   111  #  define signal __sysv_signal
   112  # endif
   113  #endif
   114  __END_NAMESPACE_STD
   115  
   116  #ifdef __USE_XOPEN
   117  /* The X/Open definition of `signal' conflicts with the BSD version.
   118     So they defined another function `bsd_signal'.  */
   119  extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
   120       __THROW;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   121  #endif
   122  
   123  /* Send signal SIG to process number PID.  If PID is zero,
   124     send SIG to all processes in the current process's process group.
   125     If PID is < -1, send SIG to all processes in process group - PID.  *
        /
   126  #ifdef __USE_POSIX
   127  extern int kill (__pid_t __pid, int __sig) __THROW;
   128  #endif /* Use POSIX.  */
   129  
   130  #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED
   131  /* Send SIG to all processes in process group PGRP.
   132     If PGRP is zero, send SIG to all processes in
   133     the current process's process group.  */
   134  extern int killpg (__pid_t __pgrp, int __sig) __THROW;
   135  #endif /* Use BSD || X/Open Unix.  */
   136  
   137  __BEGIN_NAMESPACE_STD
   138  /* Raise signal SIG, i.e., send SIG to yourself.  */
   139  extern int raise (int __sig) __THROW;
   140  __END_NAMESPACE_STD
   141  
   142  #ifdef __USE_SVID
   143  /* SVID names for the same things.  */
   144  extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
   145       __THROW;
   146  extern int gsignal (int __sig) __THROW;
   147  #endif /* Use SVID.  */
   148  
   149  #if defined __USE_MISC || defined __USE_XOPEN2K
   150  /* Print a message describing the meaning of the given signal number.  
        */
   151  extern void psignal (int __sig, const char *__s);
   152  #endif /* Use misc or POSIX 2008.  */
   153  
   154  #ifdef __USE_XOPEN2K
   155  /* Print a message describing the meaning of the given signal informati
        on.  */
   156  extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
   157  #endif /* POSIX 2008.  */
   158  
   159  
   160  
   161  /* The `sigpause' function has two different interfaces.  The original
   162     BSD definition defines the argument as a mask of the signal, while
   163     the more modern interface in X/Open defines it as the signal
   164     number.  We go with the BSD version unless the user explicitly
   165     selects the X/Open version.
   166  
   167     This function is a cancellation point and therefore not marked with
   168     __THROW.  */
   169  extern int __sigpause (int __sig_or_mask, int __is_sig);
   170  
   171  #ifdef __FAVOR_BSD
   172  /* Set the mask of blocked signals to MASK,
   173     wait for a signal to arrive, and then restore the mask.  */
   174  extern int sigpause (int __mask) __THROW __attribute_deprecated__;
   175  #else
   176  # ifdef __USE_XOPEN
   177  #  ifdef __GNUC__
   178  extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
   179  #  else
   180  /* Remove a signal from the signal mask and suspend the process.  */
   181  #   define sigpause(sig) __sigpause ((sig), 1)
   182  #  endif
   183  # endif
   184  #endif
   185  
   186  
   187  #ifdef __USE_BSD
   188  /* None of the following functions should be used anymore.  They are he
        re
   189     only for compatibility.  A single word (`int') is not guaranteed to 
        be
   190     enough to hold a complete signal mask and therefore these functions

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   191     simply do not work in many situations.  Use `sigprocmask' instead.  
        */
   192  
   193  /* Compute mask for signal SIG.  */
   194  # define sigmask(sig)   __sigmask(sig)
   195  
   196  /* Block signals in MASK, returning the old mask.  */
   197  extern int sigblock (int __mask) __THROW __attribute_deprecated__;
   198  
   199  /* Set the mask of blocked signals to MASK, returning the old mask.  */
   200  extern int sigsetmask (int __mask) __THROW __attribute_deprecated__;
   201  
   202  /* Return currently selected signal mask.  */
   203  extern int siggetmask (void) __THROW __attribute_deprecated__;
   204  #endif /* Use BSD.  */
   205  
   206  
   207  #ifdef __USE_MISC
   208  # define NSIG   _NSIG
   209  #endif
   210  
   211  #ifdef __USE_GNU
   212  typedef __sighandler_t sighandler_t;
   213  #endif
   214  
   215  /* 4.4 BSD uses the name `sig_t' for this.  */
   216  #ifdef __USE_BSD
   217  typedef __sighandler_t sig_t;
   218  #endif
   219  
   220  #ifdef __USE_POSIX
   221  
   222  /* Clear all signals from SET.  */
   223  extern int sigemptyset (sigset_t *__set) __THROW __nonnull ((1));
   224  
   225  /* Set all signals in SET.  */
   226  extern int sigfillset (sigset_t *__set) __THROW __nonnull ((1));
   227  
   228  /* Add SIGNO to SET.  */
   229  extern int sigaddset (sigset_t *__set, int __signo) __THROW __nonnull (
        (1));
   230  
   231  /* Remove SIGNO from SET.  */
   232  extern int sigdelset (sigset_t *__set, int __signo) __THROW __nonnull (
        (1));
   233  
   234  /* Return 1 if SIGNO is in SET, 0 if not.  */
   235  extern int sigismember (const sigset_t *__set, int __signo)
   236       __THROW __nonnull ((1));
   237  
   238  # ifdef __USE_GNU
   239  /* Return non-empty value is SET is not empty.  */
   240  extern int sigisemptyset (const sigset_t *__set) __THROW __nonnull ((1)
        );
   241  
   242  /* Build new signal set by combining the two inputs set using logical A
        ND.  */
   243  extern int sigandset (sigset_t *__set, const sigset_t *__left,
   244                        const sigset_t *__right) __THROW __nonnull ((1, 2
        , 3));
   245  
   246  /* Build new signal set by combining the two inputs set using logical O
        R.  */
   247  extern int sigorset (sigset_t *__set, const sigset_t *__left,
   248                       const sigset_t *__right) __THROW __nonnull ((1, 2,
         3));
   249  # endif /* GNU */
   250  
   251  /* Get the system-specific definitions of `struct sigaction'
   252     and the `SA_*' and `SIG_*'. constants.  */
   253  # include <bits/sigaction.h>
   254  
   255  /* Get and/or change the set of blocked signals.  */
   256  extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   257                          sigset_t *__restrict __oset) __THROW;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   258  
   259  /* Change the set of blocked signals to SET,
   260     wait until a signal arrives, and restore the set of blocked signals.
   261  
   262     This function is a cancellation point and therefore not marked with
   263     __THROW.  */
   264  extern int sigsuspend (const sigset_t *__set) __nonnull ((1));
   265  
   266  /* Get and/or set the action for signal SIG.  */
   267  extern int sigaction (int __sig, const struct sigaction *__restrict __a
        ct,
   268                        struct sigaction *__restrict __oact) __THROW;
   269  
   270  /* Put in SET all signals that are blocked and waiting to be delivered.
          */
   271  extern int sigpending (sigset_t *__set) __THROW __nonnull ((1));
   272  
   273  
   274  /* Select any of pending signals from SET or wait for any to arrive.
   275  
   276     This function is a cancellation point and therefore not marked with
   277     __THROW.  */
   278  extern int sigwait (const sigset_t *__restrict __set, int *__restrict _
        _sig)
   279       __nonnull ((1, 2));
   280  
   281  # ifdef __USE_POSIX199309
   282  /* Select any of pending signals from SET and place information in INFO
        .
   283  
   284     This function is a cancellation point and therefore not marked with
   285     __THROW.  */
   286  extern int sigwaitinfo (const sigset_t *__restrict __set,
   287                          siginfo_t *__restrict __info) __nonnull ((1));
   288  
   289  /* Select any of pending signals from SET and place information in INFO
        .
   290     Wait the time specified by TIMEOUT if no signal is pending.
   291  
   292     This function is a cancellation point and therefore not marked with
   293     __THROW.  */
   294  extern int sigtimedwait (const sigset_t *__restrict __set,
   295                           siginfo_t *__restrict __info,
   296                           const struct timespec *__restrict __timeout)
   297       __nonnull ((1));
   298  
   299  /* Send signal SIG to the process PID.  Associate data in VAL with the
   300     signal.  */
   301  extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val
        )
   302       __THROW;
   303  # endif /* Use POSIX 199306.  */
   304  
   305  #endif /* Use POSIX.  */
   306  
   307  #ifdef __USE_BSD
   308  
   309  /* Names of the signals.  This variable exists only for compatibility.
   310     Use `strsignal' instead (see <string.h>).  */
   311  extern const char *const _sys_siglist[_NSIG];
   312  extern const char *const sys_siglist[_NSIG];
   313  
   314  /* Structure passed to `sigvec'.  */
   315  struct sigvec
   316    {
   317      __sighandler_t sv_handler;  /* Signal handler.  */
   318      int sv_mask;                /* Mask of signals to be blocked.  */
   319  
   320      int sv_flags;               /* Flags (see below).  */
   321  # define sv_onstack     sv_flags /* 4.2 BSD compatibility.  */
   322    };
   323  
   324  /* Bits in `sv_flags'.  */
   325  # define SV_ONSTACK     (1 << 0)/* Take the signal on the signal stack.
          */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   326  # define SV_INTERRUPT   (1 << 1)/* Do not restart system calls.  */
   327  # define SV_RESETHAND   (1 << 2)/* Reset handler to SIG_DFL on receipt.
          */
   328  
   329  
   330  /* If VEC is non-NULL, set the handler for SIG to the `sv_handler' memb
        er
   331     of VEC.  The signals in `sv_mask' will be blocked while the handler 
        runs.
   332     If the SV_RESETHAND bit is set in `sv_flags', the handler for SIG wi
        ll be
   333     reset to SIG_DFL before `sv_handler' is entered.  If OVEC is non-NUL
        L,
   334     it is filled in with the old information for SIG.  */
   335  extern int sigvec (int __sig, const struct sigvec *__vec,
   336                     struct sigvec *__ovec) __THROW;
   337  
   338  
   339  /* Get machine-dependent `struct sigcontext' and signal subcodes.  */
   340  # include <bits/sigcontext.h>
   341  
   342  /* Restore the state saved in SCP.  */
   343  extern int sigreturn (struct sigcontext *__scp) __THROW;
   344  
   345  #endif /*  use BSD.  */
   346  
   347  
   348  #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED || defined __USE_
        XOPEN2K8
   349  # define __need_size_t
   350  # include <stddef.h>
   351  
   352  /* If INTERRUPT is nonzero, make signal SIG interrupt system calls
   353     (causing them to fail with EINTR); if INTERRUPT is zero, make system
   354     calls be restarted after signal SIG.  */
   355  extern int siginterrupt (int __sig, int __interrupt) __THROW;
   356  
   357  # include <bits/sigstack.h>
   358  # if defined __USE_XOPEN || defined __USE_XOPEN2K8
   359  /* This will define `ucontext_t' and `mcontext_t'.  */
   360  #  include <sys/ucontext.h>
   361  # endif
   362  
   363  /* Run signals handlers on the stack specified by SS (if not NULL).
   364     If OSS is not NULL, it is filled in with the old signal stack status
        .
   365     This interface is obsolete and on many platform not implemented.  */
   366  extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
   367       __THROW __attribute_deprecated__;
   368  
   369  /* Alternate signal handler stack interface.
   370     This interface should always be preferred over `sigstack'.  */
   371  extern int sigaltstack (const struct sigaltstack *__restrict __ss,
   372                          struct sigaltstack *__restrict __oss) __THROW;
   373  
   374  #endif /* use BSD or X/Open Unix.  */
   375  
   376  #ifdef __USE_XOPEN_EXTENDED
   377  /* Simplified interface for signal management.  */
   378  
   379  /* Add SIG to the calling process' signal mask.  */
   380  extern int sighold (int __sig) __THROW;
   381  
   382  /* Remove SIG from the calling process' signal mask.  */
   383  extern int sigrelse (int __sig) __THROW;
   384  
   385  /* Set the disposition of SIG to SIG_IGN.  */
   386  extern int sigignore (int __sig) __THROW;
   387  
   388  /* Set the disposition of SIG.  */
   389  extern __sighandler_t sigset (int __sig, __sighandler_t __disp) __THROW
        ;
   390  #endif
   391  
   392  #if defined __USE_POSIX199506 || defined __USE_UNIX98

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   393  /* Some of the functions for handling signals in threaded programs must
   394     be defined here.  */
   395  # include <bits/pthreadtypes.h>
   396  # include <bits/sigthread.h>
   397  #endif /* use Unix98 */
   398  
   399  /* The following functions are used internally in the C library and in
   400     other code which need deep insights.  */
   401  
   402  /* Return number of available real-time signal with highest priority.  
        */
   403  extern int __libc_current_sigrtmin (void) __THROW;
   404  /* Return number of available real-time signal with lowest priority.  *
        /
   405  extern int __libc_current_sigrtmax (void) __THROW;
   406  
   407  #endif /* signal.h  */
   408  
   409  __END_DECLS
   410  
   411  #endif /* not signal.h */
Close file: /usr/include/signal.h
    22  #include <signal.h>
    23  
    24  /* We need the signal context definitions even if they are not used
    25     included in <signal.h>.  */
Open file: /usr/include/bits/sigcontext.h
     1  /* Copyright (C) 2002-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _BITS_SIGCONTEXT_H
    19  #define _BITS_SIGCONTEXT_H  1
    20  
    21  #if !defined _SIGNAL_H && !defined _SYS_UCONTEXT_H
    22  # error "Never use <bits/sigcontext.h> directly; include <signal.h> ins
        tead."
    23  #endif
    24  
    25  #define FP_XSTATE_MAGIC1        0x46505853U
    26  #define FP_XSTATE_MAGIC2        0x46505845U
    27  #define FP_XSTATE_MAGIC2_SIZE   sizeof(FP_XSTATE_MAGIC2)
    28  
    29  struct _fpx_sw_bytes
    30  {
    31    __uint32_t magic1;
    32    __uint32_t extended_size;
    33    __uint64_t xstate_bv;
    34    __uint32_t xstate_size;
    35    __uint32_t padding[7];
    36  };
    37  
    38  struct _fpreg
    39  {
    40    unsigned short significand[4];
    41    unsigned short exponent;
    42  };
    43  
    44  struct _fpxreg
    45  {
    46    unsigned short significand[4];
    47    unsigned short exponent;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    48    unsigned short padding[3];
    49  };
    50  
    51  struct _xmmreg
    52  {
    53    __uint32_t    element[4];
    54  };
    55  
    56  
    57  
    58  #ifndef __x86_64__
    59  
    60  struct _fpstate
    61  {
    62    /* Regular FPU environment.  */
    63    __uint32_t    cw;
    64    __uint32_t            sw;
    65    __uint32_t            tag;
    66    __uint32_t            ipoff;
    67    __uint32_t            cssel;
    68    __uint32_t            dataoff;
    69    __uint32_t            datasel;
    70    struct _fpreg _st[8];
    71    unsigned short status;
    72    unsigned short magic;
    73  
    74    /* FXSR FPU environment.  */
    75    __uint32_t            _fxsr_env[6];
    76    __uint32_t            mxcsr;
    77    __uint32_t            reserved;
    78    struct _fpxreg        _fxsr_st[8];
    79    struct _xmmreg        _xmm[8];
    80    __uint32_t            padding[56];
    81  };
    82  
    83  #ifndef sigcontext_struct
    84  /* Kernel headers before 2.1.1 define a struct sigcontext_struct, but
    85     we need sigcontext.  Some packages have come to rely on
    86     sigcontext_struct being defined on 32-bit x86, so define this for
    87     their benefit.  */
    88  # define sigcontext_struct sigcontext
    89  #endif
    90  
    91  #define X86_FXSR_MAGIC          0x0000
    92  
    93  struct sigcontext
    94  {
    95    unsigned short gs, __gsh;
    96    unsigned short fs, __fsh;
    97    unsigned short es, __esh;
    98    unsigned short ds, __dsh;
    99    unsigned long edi;
   100    unsigned long esi;
   101    unsigned long ebp;
   102    unsigned long esp;
   103    unsigned long ebx;
   104    unsigned long edx;
   105    unsigned long ecx;
   106    unsigned long eax;
   107    unsigned long trapno;
   108    unsigned long err;
   109    unsigned long eip;
   110    unsigned short cs, __csh;
   111    unsigned long eflags;
   112    unsigned long esp_at_signal;
   113    unsigned short ss, __ssh;
   114    struct _fpstate * fpstate;
   115    unsigned long oldmask;
   116    unsigned long cr2;
   117  };
   118  
   119  #else /* __x86_64__ */
   120  
   121  struct _fpstate
   122  {

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   123    /* FPU environment matching the 64-bit FXSAVE layout.  */
   124    __uint16_t            cwd;
   125    __uint16_t            swd;
   126    __uint16_t            ftw;
   127    __uint16_t            fop;
   128    __uint64_t            rip;
   129    __uint64_t            rdp;
   130    __uint32_t            mxcsr;
   131    __uint32_t            mxcr_mask;
   132    struct _fpxreg        _st[8];
   133    struct _xmmreg        _xmm[16];
   134    __uint32_t            padding[24];
   135  };
   136  
   137  struct sigcontext
   138  {
   139    __uint64_t r8;
   140    __uint64_t r9;
   141    __uint64_t r10;
   142    __uint64_t r11;
   143    __uint64_t r12;
   144    __uint64_t r13;
   145    __uint64_t r14;
   146    __uint64_t r15;
   147    __uint64_t rdi;
   148    __uint64_t rsi;
   149    __uint64_t rbp;
   150    __uint64_t rbx;
   151    __uint64_t rdx;
   152    __uint64_t rax;
   153    __uint64_t rcx;
   154    __uint64_t rsp;
   155    __uint64_t rip;
   156    __uint64_t eflags;
   157    unsigned short cs;
   158    unsigned short gs;
   159    unsigned short fs;
   160    unsigned short __pad0;
   161    __uint64_t err;
   162    __uint64_t trapno;
   163    __uint64_t oldmask;
   164    __uint64_t cr2;
   165    __extension__ union
   166      {
   167        struct _fpstate * fpstate;
   168        __uint64_t __fpstate_word;
   169      };
   170    __uint64_t __reserved1 [8];
   171  };
   172  
   173  #endif /* __x86_64__ */
   174  
   175  struct _xsave_hdr
   176  {
   177    __uint64_t xstate_bv;
   178    __uint64_t reserved1[2];
   179    __uint64_t reserved2[5];
   180  };
   181  
   182  struct _ymmh_state
   183  {
   184    __uint32_t ymmh_space[64];
   185  };
   186  
   187  struct _xstate
   188  {
   189    struct _fpstate fpstate;
   190    struct _xsave_hdr xstate_hdr;
   191    struct _ymmh_state ymmh;
   192  };
   193  
   194  #endif /* _BITS_SIGCONTEXT_H */
Close file: /usr/include/bits/sigcontext.h
    26  #include <bits/sigcontext.h>
    27  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    28  #ifdef __x86_64__
    29  
    30  /* Type for general register.  */
    31  __extension__ typedef long long int greg_t;
    32  
    33  /* Number of general registers.  */
    34  #define NGREG   23
    35  
    36  /* Container for all general registers.  */
    37  typedef greg_t gregset_t[NGREG];
    38  
    39  #ifdef __USE_GNU
    40  /* Number of each register in the `gregset_t' array.  */
    41  enum
    42  {
    43    REG_R8 = 0,
    44  # define REG_R8         REG_R8
    45    REG_R9,
    46  # define REG_R9         REG_R9
    47    REG_R10,
    48  # define REG_R10        REG_R10
    49    REG_R11,
    50  # define REG_R11        REG_R11
    51    REG_R12,
    52  # define REG_R12        REG_R12
    53    REG_R13,
    54  # define REG_R13        REG_R13
    55    REG_R14,
    56  # define REG_R14        REG_R14
    57    REG_R15,
    58  # define REG_R15        REG_R15
    59    REG_RDI,
    60  # define REG_RDI        REG_RDI
    61    REG_RSI,
    62  # define REG_RSI        REG_RSI
    63    REG_RBP,
    64  # define REG_RBP        REG_RBP
    65    REG_RBX,
    66  # define REG_RBX        REG_RBX
    67    REG_RDX,
    68  # define REG_RDX        REG_RDX
    69    REG_RAX,
    70  # define REG_RAX        REG_RAX
    71    REG_RCX,
    72  # define REG_RCX        REG_RCX
    73    REG_RSP,
    74  # define REG_RSP        REG_RSP
    75    REG_RIP,
    76  # define REG_RIP        REG_RIP
    77    REG_EFL,
    78  # define REG_EFL        REG_EFL
    79    REG_CSGSFS,           /* Actually short cs, gs, fs, __pad0.  */
    80  # define REG_CSGSFS     REG_CSGSFS
    81    REG_ERR,
    82  # define REG_ERR        REG_ERR
    83    REG_TRAPNO,
    84  # define REG_TRAPNO     REG_TRAPNO
    85    REG_OLDMASK,
    86  # define REG_OLDMASK    REG_OLDMASK
    87    REG_CR2
    88  # define REG_CR2        REG_CR2
    89  };
    90  #endif
    91  
    92  struct _libc_fpxreg
    93  {
    94    unsigned short int significand[4];
    95    unsigned short int exponent;
    96    unsigned short int padding[3];
    97  };
    98  
    99  struct _libc_xmmreg
   100  {
   101    __uint32_t    element[4];
   102  };

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   103  
   104  struct _libc_fpstate
   105  {
   106    /* 64-bit FXSAVE format.  */
   107    __uint16_t            cwd;
   108    __uint16_t            swd;
   109    __uint16_t            ftw;
   110    __uint16_t            fop;
   111    __uint64_t            rip;
   112    __uint64_t            rdp;
   113    __uint32_t            mxcsr;
   114    __uint32_t            mxcr_mask;
   115    struct _libc_fpxreg   _st[8];
   116    struct _libc_xmmreg   _xmm[16];
   117    __uint32_t            padding[24];
   118  };
   119  
   120  /* Structure to describe FPU registers.  */
   121  typedef struct _libc_fpstate *fpregset_t;
   122  
   123  /* Context to describe whole processor state.  */
   124  typedef struct
   125    {
   126      gregset_t gregs;
   127      /* Note that fpregs is a pointer.  */
   128      fpregset_t fpregs;
   129      __extension__ unsigned long long __reserved1 [8];
   130  } mcontext_t;
   131  
   132  /* Userlevel context.  */
   133  typedef struct ucontext
   134    {
   135      unsigned long int uc_flags;
   136      struct ucontext *uc_link;
   137      stack_t uc_stack;
   138      mcontext_t uc_mcontext;
   139      __sigset_t uc_sigmask;
   140      struct _libc_fpstate __fpregs_mem;
   141    } ucontext_t;
   142  
   143  #else /* !__x86_64__ */
   144  
   145  /* Type for general register.  */
   146  typedef int greg_t;
   147  
   148  /* Number of general registers.  */
   149  #define NGREG   19
   150  
   151  /* Container for all general registers.  */
   152  typedef greg_t gregset_t[NGREG];
   153  
   154  #ifdef __USE_GNU
   155  /* Number of each register is the `gregset_t' array.  */
   156  enum
   157  {
   158    REG_GS = 0,
   159  # define REG_GS         REG_GS
   160    REG_FS,
   161  # define REG_FS         REG_FS
   162    REG_ES,
   163  # define REG_ES         REG_ES
   164    REG_DS,
   165  # define REG_DS         REG_DS
   166    REG_EDI,
   167  # define REG_EDI        REG_EDI
   168    REG_ESI,
   169  # define REG_ESI        REG_ESI
   170    REG_EBP,
   171  # define REG_EBP        REG_EBP
   172    REG_ESP,
   173  # define REG_ESP        REG_ESP
   174    REG_EBX,
   175  # define REG_EBX        REG_EBX
   176    REG_EDX,
   177  # define REG_EDX        REG_EDX

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   178    REG_ECX,
   179  # define REG_ECX        REG_ECX
   180    REG_EAX,
   181  # define REG_EAX        REG_EAX
   182    REG_TRAPNO,
   183  # define REG_TRAPNO     REG_TRAPNO
   184    REG_ERR,
   185  # define REG_ERR        REG_ERR
   186    REG_EIP,
   187  # define REG_EIP        REG_EIP
   188    REG_CS,
   189  # define REG_CS         REG_CS
   190    REG_EFL,
   191  # define REG_EFL        REG_EFL
   192    REG_UESP,
   193  # define REG_UESP       REG_UESP
   194    REG_SS
   195  # define REG_SS REG_SS
   196  };
   197  #endif
   198  
   199  /* Definitions taken from the kernel headers.  */
   200  struct _libc_fpreg
   201  {
   202    unsigned short int significand[4];
   203    unsigned short int exponent;
   204  };
   205  
   206  struct _libc_fpstate
   207  {
   208    unsigned long int cw;
   209    unsigned long int sw;
   210    unsigned long int tag;
   211    unsigned long int ipoff;
   212    unsigned long int cssel;
   213    unsigned long int dataoff;
   214    unsigned long int datasel;
   215    struct _libc_fpreg _st[8];
   216    unsigned long int status;
   217  };
   218  
   219  /* Structure to describe FPU registers.  */
   220  typedef struct _libc_fpstate *fpregset_t;
   221  
   222  /* Context to describe whole processor state.  */
   223  typedef struct
   224    {
   225      gregset_t gregs;
   226      /* Due to Linux's history we have to use a pointer here.  The SysV/
        i386
   227         ABI requires a struct with the values.  */
   228      fpregset_t fpregs;
   229      unsigned long int oldmask;
   230      unsigned long int cr2;
   231    } mcontext_t;
   232  
   233  /* Userlevel context.  */
   234  typedef struct ucontext
   235    {
   236      unsigned long int uc_flags;
   237      struct ucontext *uc_link;
   238      stack_t uc_stack;
   239      mcontext_t uc_mcontext;
   240      __sigset_t uc_sigmask;
   241      struct _libc_fpstate __fpregs_mem;
   242    } ucontext_t;
   243  
   244  #endif /* !__x86_64__ */
   245  
   246  #endif /* sys/ucontext.h */
Close file: /usr/include/sys/ucontext.h
   360  #  include <sys/ucontext.h>
   361  # endif
   362  
   363  /* Run signals handlers on the stack specified by SS (if not NULL).

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   364     If OSS is not NULL, it is filled in with the old signal stack status
        .
   365     This interface is obsolete and on many platform not implemented.  */
   366  extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
   367       __THROW __attribute_deprecated__;
   368  
   369  /* Alternate signal handler stack interface.
   370     This interface should always be preferred over `sigstack'.  */
   371  extern int sigaltstack (const struct sigaltstack *__restrict __ss,
   372                          struct sigaltstack *__restrict __oss) __THROW;
   373  
   374  #endif /* use BSD or X/Open Unix.  */
   375  
   376  #ifdef __USE_XOPEN_EXTENDED
   377  /* Simplified interface for signal management.  */
   378  
   379  /* Add SIG to the calling process' signal mask.  */
   380  extern int sighold (int __sig) __THROW;
   381  
   382  /* Remove SIG from the calling process' signal mask.  */
   383  extern int sigrelse (int __sig) __THROW;
   384  
   385  /* Set the disposition of SIG to SIG_IGN.  */
   386  extern int sigignore (int __sig) __THROW;
   387  
   388  /* Set the disposition of SIG.  */
   389  extern __sighandler_t sigset (int __sig, __sighandler_t __disp) __THROW
        ;
   390  #endif
   391  
   392  #if defined __USE_POSIX199506 || defined __USE_UNIX98
   393  /* Some of the functions for handling signals in threaded programs must
   394     be defined here.  */
Open file: /usr/include/bits/pthreadtypes.h
     1  /* Copyright (C) 2002-2007, 2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _BITS_PTHREADTYPES_H
    19  #define _BITS_PTHREADTYPES_H    1
    20  
    21  #include <bits/wordsize.h>
    22  
    23  #ifdef __x86_64__
    24  # if __WORDSIZE == 64
    25  #  define __SIZEOF_PTHREAD_ATTR_T 56
    26  #  define __SIZEOF_PTHREAD_MUTEX_T 40
    27  #  define __SIZEOF_PTHREAD_MUTEXATTR_T 4
    28  #  define __SIZEOF_PTHREAD_COND_T 48
    29  #  define __SIZEOF_PTHREAD_CONDATTR_T 4
    30  #  define __SIZEOF_PTHREAD_RWLOCK_T 56
    31  #  define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
    32  #  define __SIZEOF_PTHREAD_BARRIER_T 32
    33  #  define __SIZEOF_PTHREAD_BARRIERATTR_T 4
    34  # else
    35  #  define __SIZEOF_PTHREAD_ATTR_T 32
    36  #  define __SIZEOF_PTHREAD_MUTEX_T 32
    37  #  define __SIZEOF_PTHREAD_MUTEXATTR_T 4
    38  #  define __SIZEOF_PTHREAD_COND_T 48
    39  #  define __SIZEOF_PTHREAD_CONDATTR_T 4
    40  #  define __SIZEOF_PTHREAD_RWLOCK_T 44
    41  #  define __SIZEOF_PTHREAD_RWLOCKATTR_T 8

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    42  #  define __SIZEOF_PTHREAD_BARRIER_T 20
    43  #  define __SIZEOF_PTHREAD_BARRIERATTR_T 4
    44  # endif
    45  #else
    46  # define __SIZEOF_PTHREAD_ATTR_T 36
    47  # define __SIZEOF_PTHREAD_MUTEX_T 24
    48  # define __SIZEOF_PTHREAD_MUTEXATTR_T 4
    49  # define __SIZEOF_PTHREAD_COND_T 48
    50  # define __SIZEOF_PTHREAD_CONDATTR_T 4
    51  # define __SIZEOF_PTHREAD_RWLOCK_T 32
    52  # define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
    53  # define __SIZEOF_PTHREAD_BARRIER_T 20
    54  # define __SIZEOF_PTHREAD_BARRIERATTR_T 4
    55  #endif
    56  
    57  
    58  /* Thread identifiers.  The structure of the attribute type is not
    59     exposed on purpose.  */
    60  typedef unsigned long int pthread_t;
    61  
    62  
    63  union pthread_attr_t
    64  {
    65    char __size[__SIZEOF_PTHREAD_ATTR_T];
    66    long int __align;
    67  };
    68  #ifndef __have_pthread_attr_t
    69  typedef union pthread_attr_t pthread_attr_t;
    70  # define __have_pthread_attr_t  1
    71  #endif
    72  
    73  
    74  #ifdef __x86_64__
    75  typedef struct __pthread_internal_list
    76  {
    77    struct __pthread_internal_list *__prev;
    78    struct __pthread_internal_list *__next;
    79  } __pthread_list_t;
    80  #else
    81  typedef struct __pthread_internal_slist
    82  {
    83    struct __pthread_internal_slist *__next;
    84  } __pthread_slist_t;
    85  #endif
    86  
    87  
    88  /* Data structures for mutex handling.  The structure of the attribute
    89     type is not exposed on purpose.  */
    90  typedef union
    91  {
    92    struct __pthread_mutex_s
    93    {
    94      int __lock;
    95      unsigned int __count;
    96      int __owner;
    97  #ifdef __x86_64__
    98      unsigned int __nusers;
    99  #endif
   100      /* KIND must stay at this position in the structure to maintain
   101         binary compatibility.  */
   102      int __kind;
   103  #ifdef __x86_64__
   104      short __spins;
   105      short __elision;
   106      __pthread_list_t __list;
   107  # define __PTHREAD_MUTEX_HAVE_PREV      1
   108  /* Mutex __spins initializer used by PTHREAD_MUTEX_INITIALIZER.  */
   109  # define __PTHREAD_SPINS             0, 0
   110  #else
   111      unsigned int __nusers;
   112      __extension__ union
   113      {
   114        struct
   115        {
   116          short __espins;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   117          short __elision;
   118  # define __spins __elision_data.__espins
   119  # define __elision __elision_data.__elision
   120  # define __PTHREAD_SPINS         { 0, 0 }
   121        } __elision_data;
   122        __pthread_slist_t __list;
   123      };
   124  #endif
   125    } __data;
   126    char __size[__SIZEOF_PTHREAD_MUTEX_T];
   127    long int __align;
   128  } pthread_mutex_t;
   129  
   130  typedef union
   131  {
   132    char __size[__SIZEOF_PTHREAD_MUTEXATTR_T];
   133    int __align;
   134  } pthread_mutexattr_t;
   135  
   136  
   137  /* Data structure for conditional variable handling.  The structure of
   138     the attribute type is not exposed on purpose.  */
   139  typedef union
   140  {
   141    struct
   142    {
   143      int __lock;
   144      unsigned int __futex;
   145      __extension__ unsigned long long int __total_seq;
   146      __extension__ unsigned long long int __wakeup_seq;
   147      __extension__ unsigned long long int __woken_seq;
   148      void *__mutex;
   149      unsigned int __nwaiters;
   150      unsigned int __broadcast_seq;
   151    } __data;
   152    char __size[__SIZEOF_PTHREAD_COND_T];
   153    __extension__ long long int __align;
   154  } pthread_cond_t;
   155  
   156  typedef union
   157  {
   158    char __size[__SIZEOF_PTHREAD_CONDATTR_T];
   159    int __align;
   160  } pthread_condattr_t;
   161  
   162  
   163  /* Keys for thread-specific data */
   164  typedef unsigned int pthread_key_t;
   165  
   166  
   167  /* Once-only execution */
   168  typedef int pthread_once_t;
   169  
   170  
   171  #if defined __USE_UNIX98 || defined __USE_XOPEN2K
   172  /* Data structure for read-write lock variable handling.  The
   173     structure of the attribute type is not exposed on purpose.  */
   174  typedef union
   175  {
   176  # ifdef __x86_64__
   177    struct
   178    {
   179      int __lock;
   180      unsigned int __nr_readers;
   181      unsigned int __readers_wakeup;
   182      unsigned int __writer_wakeup;
   183      unsigned int __nr_readers_queued;
   184      unsigned int __nr_writers_queued;
   185      int __writer;
   186      int __shared;
   187      unsigned long int __pad1;
   188      unsigned long int __pad2;
   189      /* FLAGS must stay at this position in the structure to maintain
   190         binary compatibility.  */
   191      unsigned int __flags;

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   192  # define __PTHREAD_RWLOCK_INT_FLAGS_SHARED      1
   193    } __data;
   194  # else
   195    struct
   196    {
   197      int __lock;
   198      unsigned int __nr_readers;
   199      unsigned int __readers_wakeup;
   200      unsigned int __writer_wakeup;
   201      unsigned int __nr_readers_queued;
   202      unsigned int __nr_writers_queued;
   203      /* FLAGS must stay at this position in the structure to maintain
   204         binary compatibility.  */
   205      unsigned char __flags;
   206      unsigned char __shared;
   207      unsigned char __pad1;
   208      unsigned char __pad2;
   209      int __writer;
   210    } __data;
   211  # endif
   212    char __size[__SIZEOF_PTHREAD_RWLOCK_T];
   213    long int __align;
   214  } pthread_rwlock_t;
   215  
   216  typedef union
   217  {
   218    char __size[__SIZEOF_PTHREAD_RWLOCKATTR_T];
   219    long int __align;
   220  } pthread_rwlockattr_t;
   221  #endif
   222  
   223  
   224  #ifdef __USE_XOPEN2K
   225  /* POSIX spinlock data type.  */
   226  typedef volatile int pthread_spinlock_t;
   227  
   228  
   229  /* POSIX barriers data type.  The structure of the type is
   230     deliberately not exposed.  */
   231  typedef union
   232  {
   233    char __size[__SIZEOF_PTHREAD_BARRIER_T];
   234    long int __align;
   235  } pthread_barrier_t;
   236  
   237  typedef union
   238  {
   239    char __size[__SIZEOF_PTHREAD_BARRIERATTR_T];
   240    int __align;
   241  } pthread_barrierattr_t;
   242  #endif
   243  
   244  
   245  #ifndef __x86_64__
   246  /* Extra attributes for the cleanup functions.  */
   247  # define __cleanup_fct_attribute __attribute__ ((__regparm__ (1)))
   248  #endif
   249  
   250  #endif  /* bits/pthreadtypes.h */
Close file: /usr/include/bits/pthreadtypes.h
   395  # include <bits/pthreadtypes.h>
Open file: /usr/include/bits/sigthread.h
     1  /* Signal handling function for threaded programs.
     2     Copyright (C) 1998-2000, 2002, 2009, 2012 Free Software Foundation, 
        Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public License a
        s
     7     published by the Free Software Foundation; either version 2.1 of the
     8     License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; see the file COPYING.LIB.  If
    17     not, see <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _BITS_SIGTHREAD_H
    20  #define _BITS_SIGTHREAD_H       1
    21  
    22  #if !defined _SIGNAL_H && !defined _PTHREAD_H
    23  # error "Never include this file directly.  Use <pthread.h> instead"
    24  #endif
    25  
    26  /* Functions for handling signals. */
    27  
    28  /* Modify the signal mask for the calling thread.  The arguments have
    29     the same meaning as for sigprocmask(2). */
    30  extern int pthread_sigmask (int __how,
    31                              const __sigset_t *__restrict __newmask,
    32                              __sigset_t *__restrict __oldmask)__THROW;
    33  
    34  /* Send signal SIGNO to the given thread. */
    35  extern int pthread_kill (pthread_t __threadid, int __signo) __THROW;
    36  
    37  #ifdef __USE_GNU
    38  /* Queue signal and data to a thread.  */
    39  extern int pthread_sigqueue (pthread_t __threadid, int __signo,
    40                               const union sigval __value) __THROW;
    41  #endif
    42  
    43  #endif  /* bits/sigthread.h */
Close file: /usr/include/bits/sigthread.h
   396  # include <bits/sigthread.h>
   397  #endif /* use Unix98 */
   398  
   399  /* The following functions are used internally in the C library and in
   400     other code which need deep insights.  */
   401  
   402  /* Return number of available real-time signal with highest priority.  
        */
   403  extern int __libc_current_sigrtmin (void) __THROW;
   404  /* Return number of available real-time signal with lowest priority.  *
        /
   405  extern int __libc_current_sigrtmax (void) __THROW;
   406  
   407  #endif /* signal.h  */
   408  
   409  __END_DECLS
   410  
   411  #endif /* not signal.h */
Close file: /usr/include/signal.h
    10  #include <signal.h>
Open file: /usr/include/errno.h
     1  /* Copyright (C) 1991,92,93,94,95,96,97,2002 Free Software Foundation, 
        Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      ISO C99 Standard: 7.5 Errors    <errno.h>
    20   */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    21  
    22  #ifndef _ERRNO_H
    23  
    24  /* The includer defined __need_Emath if he wants only the definitions
    25     of EDOM and ERANGE, and not everything else.  */
    26  #ifndef __need_Emath
    27  # define _ERRNO_H       1
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2012 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     _POSIX_SOURCE        IEEE Std 1003.1.
    28     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    29                          if >=199309L, add IEEE Std 1003.1b-1993;
    30                          if >=199506L, add IEEE Std 1003.1c-1995;
    31                          if >=200112L, all of IEEE 1003.1-2004
    32                          if >=200809L, all of IEEE 1003.1-2008
    33     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    34                          Single Unix conformance is wanted, to 600 for t
        he
    35                          sixth revision, to 700 for the seventh revision
        .
    36     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    37     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    38     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    39     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    40     _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
    41     _SVID_SOURCE         ISO C, POSIX, and SVID things.
    42     _ATFILE_SOURCE       Additional *at interfaces.
    43     _GNU_SOURCE          All of the above, plus GNU extensions.
    44     _REENTRANT           Select additionally reentrant object.
    45     _THREAD_SAFE         Same as _REENTRANT, often used by other systems
        .
    46     _FORTIFY_SOURCE      If set to numeric value > 0 additional security
    47                          measures are defined, according to level.
    48  
    49     The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
    50     If none of these are defined, the default is to have _SVID_SOURCE,
    51     _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    52     200112L.  If more than one of these are defined, they accumulate.
    53     For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
    54     together give you ISO C, 1003.1, and 1003.2, but nothing else.
    55  
    56     These are defined by this file and are used by the
    57     header files to decide what to declare or define:
    58  
    59     __USE_ISOC11         Define ISO C11 things.
    60     __USE_ISOC99         Define ISO C99 things.
    61     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    62     __USE_POSIX          Define IEEE Std 1003.1 things.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    63     __USE_POSIX2         Define IEEE Std 1003.2 things.
    64     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    65     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    66     __USE_XOPEN          Define XPG things.
    67     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    68     __USE_UNIX98         Define Single Unix V2 things.
    69     __USE_XOPEN2K        Define XPG6 things.
    70     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    71     __USE_XOPEN2K8       Define XPG7 things.
    72     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    73     __USE_LARGEFILE      Define correct standard I/O things.
    74     __USE_LARGEFILE64    Define LFS things with separate names.
    75     __USE_FILE_OFFSET64  Define 64bit interface as default.
    76     __USE_BSD            Define 4.3BSD things.
    77     __USE_SVID           Define SVID things.
    78     __USE_MISC           Define things common to BSD and System V Unix.
    79     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    80     __USE_GNU            Define GNU extensions.
    81     __USE_REENTRANT      Define reentrant/thread-safe *_r functions.
    82     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    83     __FAVOR_BSD          Favor 4.3BSD things in cases of conflict.
    84  
    85     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
    86     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
    87     only for compatibility.  All new code should use the other symbols
    88     to test for features.
    89  
    90     All macros listed above as possibly being defined by this file are
    91     explicitly undefined if they are not explicitly defined.
    92     Feature-test macros that are not defined by the user or compiler
    93     but are implied by the other feature-test macros defined (or by the
    94     lack of any definitions) are defined by the file.  */
    95  
    96  
    97  /* Undefine everything, so we get a clean slate.  */
    98  #undef  __USE_ISOC11
    99  #undef  __USE_ISOC99
   100  #undef  __USE_ISOC95
   101  #undef  __USE_ISOCXX11
   102  #undef  __USE_POSIX
   103  #undef  __USE_POSIX2
   104  #undef  __USE_POSIX199309
   105  #undef  __USE_POSIX199506
   106  #undef  __USE_XOPEN
   107  #undef  __USE_XOPEN_EXTENDED
   108  #undef  __USE_UNIX98
   109  #undef  __USE_XOPEN2K
   110  #undef  __USE_XOPEN2KXSI
   111  #undef  __USE_XOPEN2K8
   112  #undef  __USE_XOPEN2K8XSI
   113  #undef  __USE_LARGEFILE
   114  #undef  __USE_LARGEFILE64
   115  #undef  __USE_FILE_OFFSET64
   116  #undef  __USE_BSD
   117  #undef  __USE_SVID
   118  #undef  __USE_MISC
   119  #undef  __USE_ATFILE
   120  #undef  __USE_GNU
   121  #undef  __USE_REENTRANT
   122  #undef  __USE_FORTIFY_LEVEL
   123  #undef  __FAVOR_BSD
   124  #undef  __KERNEL_STRICT_NAMES
   125  
   126  /* Suppress kernel-name space pollution unless user expressedly asks
   127     for it.  */
   128  #ifndef _LOOSE_KERNEL_NAMES
   129  # define __KERNEL_STRICT_NAMES
   130  #endif
   131  
   132  /* Always use ISO C things.  */
   133  #define __USE_ANSI      1
   134  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   135  /* Convenience macros to test the versions of glibc and gcc.
   136     Use them like this:
   137     #if __GNUC_PREREQ (2,8)
   138     ... code requiring gcc 2.8 or later ...
   139     #endif
   140     Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   141     were not defined then.  */
   142  #if defined __GNUC__ && defined __GNUC_MINOR__
   143  # define __GNUC_PREREQ(maj, min) \
   144          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   145  #else
   146  # define __GNUC_PREREQ(maj, min) 0
   147  #endif
   148  
   149  
   150  /* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
   151  #if defined _BSD_SOURCE && \
   152      !(defined _POSIX_SOURCE || defined _POSIX_C_SOURCE || \
   153        defined _XOPEN_SOURCE || defined _GNU_SOURCE || defined _SVID_SOU
        RCE)
   154  # define __FAVOR_BSD    1
   155  #endif
   156  
   157  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   158  #ifdef _GNU_SOURCE
   159  # undef  _ISOC95_SOURCE
   160  # define _ISOC95_SOURCE 1
   161  # undef  _ISOC99_SOURCE
   162  # define _ISOC99_SOURCE 1
   163  # undef  _ISOC11_SOURCE
   164  # define _ISOC11_SOURCE 1
   165  # undef  _POSIX_SOURCE
   166  # define _POSIX_SOURCE  1
   167  # undef  _POSIX_C_SOURCE
   168  # define _POSIX_C_SOURCE        200809L
   169  # undef  _XOPEN_SOURCE
   170  # define _XOPEN_SOURCE  700
   171  # undef  _XOPEN_SOURCE_EXTENDED
   172  # define _XOPEN_SOURCE_EXTENDED 1
   173  # undef  _LARGEFILE64_SOURCE
   174  # define _LARGEFILE64_SOURCE    1
   175  # undef  _BSD_SOURCE
   176  # define _BSD_SOURCE    1
   177  # undef  _SVID_SOURCE
   178  # define _SVID_SOURCE   1
   179  # undef  _ATFILE_SOURCE
   180  # define _ATFILE_SOURCE 1
   181  #endif
   182  
   183  /* If nothing (other than _GNU_SOURCE) is defined,
   184     define _BSD_SOURCE and _SVID_SOURCE.  */
   185  #if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
   186       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
   187       !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && !defined _SVID_S
        OURCE)
   188  # define _BSD_SOURCE    1
   189  # define _SVID_SOURCE   1
   190  #endif
   191  
   192  /* This is to enable the ISO C11 extension.  */
   193  #if (defined _ISOC11_SOURCE \
   194       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   195  # define __USE_ISOC11   1
   196  #endif
   197  
   198  /* This is to enable the ISO C99 extension.  */
   199  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   200       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   201  # define __USE_ISOC99   1
   202  #endif
   203  
   204  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   205  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   206       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   207  # define __USE_ISOC95   1
   208  #endif
   209  
   210  /* This is to enable compatibility for ISO C++11.
   211  
   212     So far g++ does not provide a macro.  Check the temporary macro for
   213     now, too.  */
   214  #if ((defined __cplusplus && __cplusplus >= 201103L)                    
              \
   215       || defined __GXX_EXPERIMENTAL_CXX0X__)
   216  # define __USE_ISOCXX11 1
   217  #endif
   218  
   219  /* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.
        2
   220     (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
   221  #if ((!defined __STRICT_ANSI__ || (_XOPEN_SOURCE - 0) >= 500) && \
   222       !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   223  # define _POSIX_SOURCE  1
   224  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   225  #  define _POSIX_C_SOURCE       2
   226  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   227  #  define _POSIX_C_SOURCE       199506L
   228  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   229  #  define _POSIX_C_SOURCE       200112L
   230  # else
   231  #  define _POSIX_C_SOURCE       200809L
   232  # endif
   233  # define __USE_POSIX_IMPLICITLY 1
   234  #endif
   235  
   236  #if defined _POSIX_SOURCE || _POSIX_C_SOURCE >= 1 || defined _XOPEN_SOU
        RCE
   237  # define __USE_POSIX    1
   238  #endif
   239  
   240  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   241  # define __USE_POSIX2   1
   242  #endif
   243  
   244  #if (_POSIX_C_SOURCE - 0) >= 199309L
   245  # define __USE_POSIX199309      1
   246  #endif
   247  
   248  #if (_POSIX_C_SOURCE - 0) >= 199506L
   249  # define __USE_POSIX199506      1
   250  #endif
   251  
   252  #if (_POSIX_C_SOURCE - 0) >= 200112L
   253  # define __USE_XOPEN2K          1
   254  # undef __USE_ISOC95
   255  # define __USE_ISOC95           1
   256  # undef __USE_ISOC99
   257  # define __USE_ISOC99           1
   258  #endif
   259  
   260  #if (_POSIX_C_SOURCE - 0) >= 200809L
   261  # define __USE_XOPEN2K8         1
   262  # undef  _ATFILE_SOURCE
   263  # define _ATFILE_SOURCE 1
   264  #endif
   265  
   266  #ifdef  _XOPEN_SOURCE
   267  # define __USE_XOPEN    1
   268  # if (_XOPEN_SOURCE - 0) >= 500
   269  #  define __USE_XOPEN_EXTENDED  1
   270  #  define __USE_UNIX98  1
   271  #  undef _LARGEFILE_SOURCE
   272  #  define _LARGEFILE_SOURCE     1
   273  #  if (_XOPEN_SOURCE - 0) >= 600
   274  #   if (_XOPEN_SOURCE - 0) >= 700
   275  #    define __USE_XOPEN2K8      1
   276  #    define __USE_XOPEN2K8XSI   1
   277  #   endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   278  #   define __USE_XOPEN2K        1
   279  #   define __USE_XOPEN2KXSI     1
   280  #   undef __USE_ISOC95
   281  #   define __USE_ISOC95         1
   282  #   undef __USE_ISOC99
   283  #   define __USE_ISOC99         1
   284  #  endif
   285  # else
   286  #  ifdef _XOPEN_SOURCE_EXTENDED
   287  #   define __USE_XOPEN_EXTENDED 1
   288  #  endif
   289  # endif
   290  #endif
   291  
   292  #ifdef _LARGEFILE_SOURCE
   293  # define __USE_LARGEFILE        1
   294  #endif
   295  
   296  #ifdef _LARGEFILE64_SOURCE
   297  # define __USE_LARGEFILE64      1
   298  #endif
   299  
   300  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   301  # define __USE_FILE_OFFSET64    1
   302  #endif
   303  
   304  #if defined _BSD_SOURCE || defined _SVID_SOURCE
   305  # define __USE_MISC     1
   306  #endif
   307  
   308  #ifdef  _BSD_SOURCE
   309  # define __USE_BSD      1
   310  #endif
   311  
   312  #ifdef  _SVID_SOURCE
   313  # define __USE_SVID     1
   314  #endif
   315  
   316  #ifdef  _ATFILE_SOURCE
   317  # define __USE_ATFILE   1
   318  #endif
   319  
   320  #ifdef  _GNU_SOURCE
   321  # define __USE_GNU      1
   322  #endif
   323  
   324  #if defined _REENTRANT || defined _THREAD_SAFE
   325  # define __USE_REENTRANT        1
   326  #endif
   327  
   328  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   329  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   330  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   331  # elif !__GNUC_PREREQ (4, 1)
   332  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   333  # elif _FORTIFY_SOURCE > 1
   334  #  define __USE_FORTIFY_LEVEL 2
   335  # else
   336  #  define __USE_FORTIFY_LEVEL 1
   337  # endif
   338  #endif
   339  #ifndef __USE_FORTIFY_LEVEL
   340  # define __USE_FORTIFY_LEVEL 0
   341  #endif
   342  
   343  /* Get definitions of __STDC_* predefined macros, if the compiler has
   344     not preincluded this header automatically.  */
   345  #include <stdc-predef.h>
   346  
   347  /* This macro indicates that the installed library is the GNU C Library
        .
   348     For historic reasons the value now is 6 and this will stay from now
   349     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   350     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   351     GNU C library version and use the values in <gnu/lib-names.h> to get

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   352     the sonames of the shared libraries.  */
   353  #undef  __GNU_LIBRARY__
   354  #define __GNU_LIBRARY__ 6
   355  
   356  /* Major and minor version number of the GNU C library package.  Use
   357     these macros to test for features in specific releases.  */
   358  #define __GLIBC__       2
   359  #define __GLIBC_MINOR__ 17
   360  
   361  #define __GLIBC_PREREQ(maj, min) \
   362          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   363  
   364  /* Decide whether a compiler supports the long long datatypes.  */
   365  #if defined __GNUC__ \
   366      || (defined __PGI && defined __i386__ ) \
   367      || (defined __INTEL_COMPILER && (defined __i386__ || defined __ia64
        __)) \
   368      || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)
   369  # define __GLIBC_HAVE_LONG_LONG 1
   370  #endif
   371  
   372  /* This is here only because every header file already includes this on
        e.  */
   373  #ifndef __ASSEMBLER__
   374  # ifndef _SYS_CDEFS_H
   375  #  include <sys/cdefs.h>
   376  # endif
   377  
   378  /* If we don't have __REDIRECT, prototypes will be missing if
   379     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   380  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   381  #  define __USE_LARGEFILE       1
   382  #  define __USE_LARGEFILE64     1
   383  # endif
   384  
   385  #endif  /* !ASSEMBLER */
   386  
   387  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   388  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   389      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   390      && defined __extern_inline
   391  # define __USE_EXTERN_INLINES   1
   392  #endif
   393  
   394  
   395  /* This is here only because every header file already includes this on
        e.
   396     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   397     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   398     that will always return failure (and set errno to ENOSYS).  */
   399  #include <gnu/stubs.h>
   400  
   401  
   402  #endif  /* features.h  */
Close file: /usr/include/features.h
    28  # include <features.h>
    29  #endif
    30  
    31  __BEGIN_DECLS
    32  
    33  /* Get the error number constants from the system-specific file.
    34     This file will test __need_Emath and _ERRNO_H.  */
Open file: /usr/include/bits/errno.h
     1  /* Error constants.  Linux specific version.
     2     Copyright (C) 1996-1999, 2005, 2009, 2012 Free Software Foundation, 
        Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifdef _ERRNO_H
    20  
    21  # undef EDOM
    22  # undef EILSEQ
    23  # undef ERANGE
Open file: /usr/include/linux/errno.h
Open file: /usr/include/asm/errno.h
Open file: /usr/include/asm-generic/errno.h
     1  #ifndef _ASM_GENERIC_ERRNO_H
     2  #define _ASM_GENERIC_ERRNO_H
     3  
Open file: /usr/include/asm-generic/errno-base.h
     1  #ifndef _ASM_GENERIC_ERRNO_BASE_H
     2  #define _ASM_GENERIC_ERRNO_BASE_H
     3  
     4  #define EPERM            1      /* Operation not permitted */
     5  #define ENOENT           2      /* No such file or directory */
     6  #define ESRCH            3      /* No such process */
     7  #define EINTR            4      /* Interrupted system call */
     8  #define EIO              5      /* I/O error */
     9  #define ENXIO            6      /* No such device or address */
    10  #define E2BIG            7      /* Argument list too long */
    11  #define ENOEXEC          8      /* Exec format error */
    12  #define EBADF            9      /* Bad file number */
    13  #define ECHILD          10      /* No child processes */
    14  #define EAGAIN          11      /* Try again */
    15  #define ENOMEM          12      /* Out of memory */
    16  #define EACCES          13      /* Permission denied */
    17  #define EFAULT          14      /* Bad address */
    18  #define ENOTBLK         15      /* Block device required */
    19  #define EBUSY           16      /* Device or resource busy */
    20  #define EEXIST          17      /* File exists */
    21  #define EXDEV           18      /* Cross-device link */
    22  #define ENODEV          19      /* No such device */
    23  #define ENOTDIR         20      /* Not a directory */
    24  #define EISDIR          21      /* Is a directory */
    25  #define EINVAL          22      /* Invalid argument */
    26  #define ENFILE          23      /* File table overflow */
    27  #define EMFILE          24      /* Too many open files */
    28  #define ENOTTY          25      /* Not a typewriter */
    29  #define ETXTBSY         26      /* Text file busy */
    30  #define EFBIG           27      /* File too large */
    31  #define ENOSPC          28      /* No space left on device */
    32  #define ESPIPE          29      /* Illegal seek */
    33  #define EROFS           30      /* Read-only file system */
    34  #define EMLINK          31      /* Too many links */
    35  #define EPIPE           32      /* Broken pipe */
    36  #define EDOM            33      /* Math argument out of domain of func 
        */
    37  #define ERANGE          34      /* Math result not representable */
    38  
    39  #endif
Close file: /usr/include/asm-generic/errno-base.h
     4  #include <asm-generic/errno-base.h>
     5  
     6  #define EDEADLK         35      /* Resource deadlock would occur */
     7  #define ENAMETOOLONG    36      /* File name too long */
     8  #define ENOLCK          37      /* No record locks available */
     9  #define ENOSYS          38      /* Function not implemented */
    10  #define ENOTEMPTY       39      /* Directory not empty */
    11  #define ELOOP           40      /* Too many symbolic links encountered 
        */
    12  #define EWOULDBLOCK     EAGAIN  /* Operation would block */
    13  #define ENOMSG          42      /* No message of desired type */
    14  #define EIDRM           43      /* Identifier removed */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    15  #define ECHRNG          44      /* Channel number out of range */
    16  #define EL2NSYNC        45      /* Level 2 not synchronized */
    17  #define EL3HLT          46      /* Level 3 halted */
    18  #define EL3RST          47      /* Level 3 reset */
    19  #define ELNRNG          48      /* Link number out of range */
    20  #define EUNATCH         49      /* Protocol driver not attached */
    21  #define ENOCSI          50      /* No CSI structure available */
    22  #define EL2HLT          51      /* Level 2 halted */
    23  #define EBADE           52      /* Invalid exchange */
    24  #define EBADR           53      /* Invalid request descriptor */
    25  #define EXFULL          54      /* Exchange full */
    26  #define ENOANO          55      /* No anode */
    27  #define EBADRQC         56      /* Invalid request code */
    28  #define EBADSLT         57      /* Invalid slot */
    29  
    30  #define EDEADLOCK       EDEADLK
    31  
    32  #define EBFONT          59      /* Bad font file format */
    33  #define ENOSTR          60      /* Device not a stream */
    34  #define ENODATA         61      /* No data available */
    35  #define ETIME           62      /* Timer expired */
    36  #define ENOSR           63      /* Out of streams resources */
    37  #define ENONET          64      /* Machine is not on the network */
    38  #define ENOPKG          65      /* Package not installed */
    39  #define EREMOTE         66      /* Object is remote */
    40  #define ENOLINK         67      /* Link has been severed */
    41  #define EADV            68      /* Advertise error */
    42  #define ESRMNT          69      /* Srmount error */
    43  #define ECOMM           70      /* Communication error on send */
    44  #define EPROTO          71      /* Protocol error */
    45  #define EMULTIHOP       72      /* Multihop attempted */
    46  #define EDOTDOT         73      /* RFS specific error */
    47  #define EBADMSG         74      /* Not a data message */
    48  #define EOVERFLOW       75      /* Value too large for defined data typ
        e */
    49  #define ENOTUNIQ        76      /* Name not unique on network */
    50  #define EBADFD          77      /* File descriptor in bad state */
    51  #define EREMCHG         78      /* Remote address changed */
    52  #define ELIBACC         79      /* Can not access a needed shared libra
        ry */
    53  #define ELIBBAD         80      /* Accessing a corrupted shared library
         */
    54  #define ELIBSCN         81      /* .lib section in a.out corrupted */
    55  #define ELIBMAX         82      /* Attempting to link in too many share
        d libraries */
    56  #define ELIBEXEC        83      /* Cannot exec a shared library directl
        y */
    57  #define EILSEQ          84      /* Illegal byte sequence */
    58  #define ERESTART        85      /* Interrupted system call should be re
        started */
    59  #define ESTRPIPE        86      /* Streams pipe error */
    60  #define EUSERS          87      /* Too many users */
    61  #define ENOTSOCK        88      /* Socket operation on non-socket */
    62  #define EDESTADDRREQ    89      /* Destination address required */
    63  #define EMSGSIZE        90      /* Message too long */
    64  #define EPROTOTYPE      91      /* Protocol wrong type for socket */
    65  #define ENOPROTOOPT     92      /* Protocol not available */
    66  #define EPROTONOSUPPORT 93      /* Protocol not supported */
    67  #define ESOCKTNOSUPPORT 94      /* Socket type not supported */
    68  #define EOPNOTSUPP      95      /* Operation not supported on transport
         endpoint */
    69  #define EPFNOSUPPORT    96      /* Protocol family not supported */
    70  #define EAFNOSUPPORT    97      /* Address family not supported by prot
        ocol */
    71  #define EADDRINUSE      98      /* Address already in use */
    72  #define EADDRNOTAVAIL   99      /* Cannot assign requested address */
    73  #define ENETDOWN        100     /* Network is down */
    74  #define ENETUNREACH     101     /* Network is unreachable */
    75  #define ENETRESET       102     /* Network dropped connection because o
        f reset */
    76  #define ECONNABORTED    103     /* Software caused connection abort */
    77  #define ECONNRESET      104     /* Connection reset by peer */
    78  #define ENOBUFS         105     /* No buffer space available */
    79  #define EISCONN         106     /* Transport endpoint is already connec
        ted */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    80  #define ENOTCONN        107     /* Transport endpoint is not connected 
        */
    81  #define ESHUTDOWN       108     /* Cannot send after transport endpoint
         shutdown */
    82  #define ETOOMANYREFS    109     /* Too many references: cannot splice *
        /
    83  #define ETIMEDOUT       110     /* Connection timed out */
    84  #define ECONNREFUSED    111     /* Connection refused */
    85  #define EHOSTDOWN       112     /* Host is down */
    86  #define EHOSTUNREACH    113     /* No route to host */
    87  #define EALREADY        114     /* Operation already in progress */
    88  #define EINPROGRESS     115     /* Operation now in progress */
    89  #define ESTALE          116     /* Stale file handle */
    90  #define EUCLEAN         117     /* Structure needs cleaning */
    91  #define ENOTNAM         118     /* Not a XENIX named type file */
    92  #define ENAVAIL         119     /* No XENIX semaphores available */
    93  #define EISNAM          120     /* Is a named type file */
    94  #define EREMOTEIO       121     /* Remote I/O error */
    95  #define EDQUOT          122     /* Quota exceeded */
    96  
    97  #define ENOMEDIUM       123     /* No medium found */
    98  #define EMEDIUMTYPE     124     /* Wrong medium type */
    99  #define ECANCELED       125     /* Operation Canceled */
   100  #define ENOKEY          126     /* Required key not available */
   101  #define EKEYEXPIRED     127     /* Key has expired */
   102  #define EKEYREVOKED     128     /* Key has been revoked */
   103  #define EKEYREJECTED    129     /* Key was rejected by service */
   104  
   105  /* for robust mutexes */
   106  #define EOWNERDEAD      130     /* Owner died */
   107  #define ENOTRECOVERABLE 131     /* State not recoverable */
   108  
   109  #define ERFKILL         132     /* Operation not possible due to RF-kil
        l */
   110  
   111  #define EHWPOISON       133     /* Memory page has hardware error */
   112  
   113  #endif
Close file: /usr/include/asm-generic/errno.h
     1  #include <asm-generic/errno.h>
Close file: /usr/include/asm/errno.h
     1  #include <asm/errno.h>
Close file: /usr/include/linux/errno.h
    24  # include <linux/errno.h>
    25  
    26  /* Linux has no ENOTSUP error code.  */
    27  # define ENOTSUP EOPNOTSUPP
    28  
    29  /* Older Linux versions also had no ECANCELED error code.  */
    30  # ifndef ECANCELED
    31  #  define ECANCELED     125
    32  # endif
    33  
    34  /* Support for error codes to support robust mutexes was added later, t
        oo.  */
    35  # ifndef EOWNERDEAD
    36  #  define EOWNERDEAD            130
    37  #  define ENOTRECOVERABLE       131
    38  # endif
    39  
    40  # ifndef ERFKILL
    41  #  define ERFKILL               132
    42  # endif
    43  
    44  # ifndef EHWPOISON
    45  #  define EHWPOISON             133
    46  # endif
    47  
    48  # ifndef __ASSEMBLER__
    49  /* Function to get address of global `errno' variable.  */
    50  extern int *__errno_location (void) __THROW __attribute__ ((__const__))
        ;
    51  
    52  #  if !defined _LIBC || defined _LIBC_REENTRANT
    53  /* When using threads, errno is a per-thread value.  */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    54  #   define errno (*__errno_location ())
    55  #  endif
    56  # endif /* !__ASSEMBLER__ */
    57  #endif /* _ERRNO_H */
    58  
    59  #if !defined _ERRNO_H && defined __need_Emath
    60  /* This is ugly but the kernel header is not clean enough.  We must
    61     define only the values EDOM, EILSEQ and ERANGE in case __need_Emath 
        is
    62     defined.  */
    63  # define EDOM   33      /* Math argument out of domain of function.  */
    64  # define EILSEQ 84      /* Illegal byte sequence.  */
    65  # define ERANGE 34      /* Math result not representable.  */
    66  #endif /* !_ERRNO_H && __need_Emath */
Close file: /usr/include/bits/errno.h
    35  #include <bits/errno.h>
    36  #undef  __need_Emath
    37  
    38  #ifdef  _ERRNO_H
    39  
    40  /* Declare the `errno' variable, unless it's defined as a macro by
    41     bits/errno.h.  This is the case in GNU, where it is a per-thread
    42     variable.  This redeclaration using the macro still works, but it
    43     will be a function declaration without a prototype and may trigger
    44     a -Wstrict-prototypes warning.  */
    45  #ifndef errno
    46  extern int errno;
    47  #endif
    48  
    49  #ifdef __USE_GNU
    50  
    51  /* The full and simple forms of the name with which the program was
    52     invoked.  These variables are set up automatically at startup based 
        on
    53     the value of ARGV[0] (this works only if you use GNU ld).  */
    54  extern char *program_invocation_name, *program_invocation_short_name;
    55  #endif /* __USE_GNU */
    56  #endif /* _ERRNO_H */
    57  
    58  __END_DECLS
    59  
    60  #endif /* _ERRNO_H */
    61  
    62  /* The Hurd <bits/errno.h> defines `error_t' as an enumerated type so
    63     that printing `error_t' values in the debugger shows the names.  We
    64     might need this definition sometimes even if this file was included
    65     before.  */
    66  #if defined __USE_GNU || defined __need_error_t
    67  # ifndef __error_t_defined
    68  typedef int error_t;
    69  #  define __error_t_defined     1
    70  # endif
    71  # undef __need_error_t
    72  #endif
Close file: /usr/include/errno.h
    11  #include <errno.h>
    12  
Open file: /usr/include/json/json.h
     1  /*
     2   * $Id: json.h,v 1.6 2006/01/26 02:16:28 mclark Exp $
     3   *
     4   * Copyright (c) 2004, 2005 Metaparadigm Pte. Ltd.
     5   * Michael Clark <michael@metaparadigm.com>
     6   * Copyright (c) 2009 Hewlett-Packard Development Company, L.P.
     7   *
     8   * This library is free software; you can redistribute it and/or modify
     9   * it under the terms of the MIT license. See COPYING for details.
    10   *
    11   */
    12  
    13  /**
    14   * @file
    15   * @brief A convenience header that may be included instead of other in
        dividual ones.
    16   */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    17  #ifndef _json_h_
    18  #define _json_h_
    19  
    20  #ifdef __cplusplus
    21  extern "C" {
    22  #endif
    23  
Error at line 24, column 10 in file /usr/include/json/json.h
    24  #include "arraylist.h"
    24  .........1
    24  PCC-S-02015, unable to open include file
Error at line 25, column 10 in file /usr/include/json/json.h
    25  #include "debug.h"
    25  .........1
    25  PCC-S-02015, unable to open include file
Error at line 26, column 10 in file /usr/include/json/json.h
    26  #include "json_c_version.h"
    26  .........1
    26  PCC-S-02015, unable to open include file
Error at line 27, column 10 in file /usr/include/json/json.h
    27  #include "json_object.h"
    27  .........1
    27  PCC-S-02015, unable to open include file
Error at line 28, column 10 in file /usr/include/json/json.h
    28  #include "json_object_iterator.h"
    28  .........1
    28  PCC-S-02015, unable to open include file
Error at line 29, column 10 in file /usr/include/json/json.h
    29  #include "json_pointer.h"
    29  .........1
    29  PCC-S-02015, unable to open include file
Error at line 30, column 10 in file /usr/include/json/json.h
    30  #include "json_tokener.h"
    30  .........1
    30  PCC-S-02015, unable to open include file
Error at line 31, column 10 in file /usr/include/json/json.h
    31  #include "json_util.h"
    31  .........1
    31  PCC-S-02015, unable to open include file
Error at line 32, column 10 in file /usr/include/json/json.h
    32  #include "linkhash.h"
    32  .........1
    32  PCC-S-02015, unable to open include file
    33  
    34  #ifdef __cplusplus
    35  }
    36  #endif
    37  
    38  #endif
Close file: /usr/include/json/json.h
    13  #include <json/json.h>
    14  
Open file: /home/www/MQTTPusher/include/lib/ft_common.h
     1  #ifndef _FT_COMMON_H
     2  #define _FT_COMMON_H
     3  
Open file: /home/www/LIB/include/scshm.h
     1  #ifndef _SCSHM_H
     2  #define _SCSHM_H
     3  
     4  #ifdef __cplusplus
     5  extern "C" {
     6  #endif
     7  
     8  int             GetShm(int key, int size);
     9  void*   AttachShm(int shmid);
    10  int             DeAttachShm(void* shared_memory);
    11  int             RemoveShm(int shmid);
    12  
    13  #ifdef __cplusplus
    14  } /* extern "C" */
    15  #endif
    16  
    17  #endif
Close file: /home/www/LIB/include/scshm.h

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     4  #include <scshm.h>
Open file: /home/www/LIB/include/scsem.h
     1  #ifndef _SCSEM_H
     2  #define _SCSEM_H
     3  
     4  #ifdef __cplusplus
     5  extern "C" {
     6  #endif
     7  
     8  int             GetSem(int key);
     9  int             InitSem(int sem_id);
    10  int             Sem_P(int sem_id);
    11  int             Sem_V(int sem_id);
    12  int             RemoveSem(int sem_id);
    13  
    14  #ifdef __cplusplus
    15  } /* extern "C" */
    16  #endif
    17  
    18  #endif
Close file: /home/www/LIB/include/scsem.h
     5  #include <scsem.h>
Open file: /home/www/LIB/include/scutil.h
     1  #ifndef _SCUTIL_H
     2  #define _SCUTIL_H
     3  
     4  #ifdef __cplusplus
     5  extern "C" {
     6  #endif
     7  
     8  #define TRIM_LEFT               1
     9  #define TRIM_RIGHT              2
    10  #define TRIM_ALL                3
    11  
    12  int                     get_next_token(char* buffer, int ptr, char* tok
        en, char separator);
    13  int                     str_trim(char* str, char type);
    14  int                     str_trim_char(char* str, char c);
    15  int                     GenerateKeyString(int key, char* string, int le
        ngth);
    16  int                     GetHomeDirectory(char* path);
    17  int                     GetExcutePath(char* path);
    18  void            WritePid(char* pid_path, char* name);
    19  int                     ReadPid(char* pid_path, char* name);
    20  int                     ChangeChar(char* dest, char* source, char from,
         char to);
    21  int                     ChangeString(char* dest, char* source, char* fr
        om, char* to);
    22  int                     ConvertStringIncoding(char* dest, char* src, ch
        ar* dest_code, char* src_code);
    23  long long       ConvertDecimalToNumber(long long decimal, char* number,
         long long base);
    24  long long       ConvertNumberToDecimal(char* number, long long base);
    25  int                     TimeToNum(int time, int base_time);
    26  int                     NumToTime(int num, int base_time);
    27  int                     intDateByDays(int date, int days);
    28  int                     intDate();
    29  int                     intTime();
    30  int                     intDateFrom(time_t t);
    31  int                     intTimeFrom(time_t t);
    32  int                     intGMTDate(int gmtdiff, int summer);
    33  int                     intGMTTime(int gmtdiff, int summer);
    34  long long       roundll(long long data);
    35  long long       GetAmountByTick(long long amount, int tick);
    36  long long       GetAmountByDouble(double amount);
    37  unsigned long intMicroTime();
    38  unsigned long intDateTime();
    39  void            swapi(int* num1, int* num2);
    40  void            myhexdump(const char * msg, const void * _src, int len,
         int is_text);
    41  
    42  #ifdef __cplusplus
    43  } /* extern "C" */
    44  #endif
    45  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    46  #endif
Close file: /home/www/LIB/include/scutil.h
     6  #include <scutil.h>
     7  
Open file: /home/www/MQTTPusher/include/common_memory.h
     1  /*****************************************************
     2   * 프로그램ID       : common_memory.h
     3   * 프로그램명        : 공유 메모리를 정의한다.
     4   *****************************************************/
     5   
     6  #ifndef _COMMON_MEMORY_H
     7  #define _COMMON_MEMORY_H
     8  
Open file: /home/www/MQTTPusher/include/server_define.h
     1  /*****************************************************
     2   * 프로그램ID       : server_define.h
     3   * 프로그램명        : 서버의 일반정의를 가지고 있는다.
     4   *****************************************************/
     5  
     6  #ifndef _SERVER_DEFINE_H
     7  #define _SERVER_DEFINE_H
     8  
     9  /**********************************************************************
        ********
    10   * System Common....
    11   **********************************************************************
        ********/
    12  
    13  #define _REAL_SERVICE                   'R'                 /* Real Ser
        ver */
    14  #define _TEST_SERVICE                   'T'                 /* Dev  Ser
        ver */
    15  #define __SERVICE                       _REAL_SERVICE
    16  
    17  /**********************************************************************
        ********
    18   * Program Infomation
    19   **********************************************************************
        ********/
    20  
    21  #define PROGRAM_NAME                                    "MQTTPusher"
    22  
    23  #define CONF_PATH                                               "conf"
    24  #define DATA_PATH                                               "data"
    25  #define LOG_PATH                                                "log"
    26  #define LIB_PATH                                                "lib"
    27  
    28  #define SERVER_CONFIG_FILE                              "server.conf"
    29  #define PROCESS_LIST_FILE                               "process.dat"
    30  
    31  /**********************************************************************
        ********
    32   * Key Define...
    33   **********************************************************************
        ********/
    34  
    35  #define COMMON_SHM_KEY                                  0x6801
    36  
    37  /**********************************************************************
        ********
    38   * Max Define...
    39   **********************************************************************
        ********/
    40  
    41  #define MAX_BUFFER                                              4096
    42  #define MAX_PROCESS                                             16
    43  #define MAX_SERVER_USER                 64
    44  
    45  /**********************************************************************
        ********
    46   * Process Define...
    47   **********************************************************************
        ********/
    48  
    49  #define _PROC_RECEIVE_PROCESS_          1

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    50  #define _PROC_PUSH_PROCESS_V1_          2
    51  #define _PROC_PUSH_PROCESS_V2_          3
    52  
    53  /**********************************************************************
        ********
    54   * Variable Types Define....
    55   **********************************************************************
        ********/
Open file: /home/www/LIB/common/type_define.h
     1  /*****************************************************
     2   * 프로그램ID       : type_define.h
     3   * 프로그램명        : TYPE을 재정의한다.
     4   * 작성일          : 2006/10/11
     5   * 작성자          : 김성철
     6   *****************************************************/
     7  
     8  #ifndef _TYPE_DEFINE_H
     9  #define _TYPE_DEFINE_H
    10  
    11  /**********************************************************************
        ********
    12   * Variable Types Define....
    13   **********************************************************************
        ********/
    14   
    15  #define true                                                    1
    16  #define false                                                   0
    17  
    18  #ifndef _BOOL_
    19  #define _BOOL_
    20  typedef char                                                    bool;
    21  #endif
    22  
    23  #ifndef _LONG_
    24  #define _LONG_
    25  typedef long long                                               int128;
    26  #endif
    27  
    28  #ifndef _UCHAR_
    29  #define _UCHAR_
    30  typedef unsigned char                                   uChar;
    31  #endif
    32  
    33  #ifndef _UINT_
    34  #define _UINT_
    35  typedef unsigned int                                    uInt;
    36  #endif
    37  
    38  #ifndef _ULONG_
    39  #define _ULONG_
    40  typedef unsigned long                                   uLong;
    41  #endif
    42  
    43  #ifndef _USHORT_
    44  #define _USHORT_
    45  typedef unsigned short                                  uShort;
    46  #endif
    47  
    48  #define REAL_OPEN                                               'O'
    49  #define REAL_CLOSE                                              'C'
    50  
    51  /**********************************************************************
        ********
    52   * UTILS....
    53   **********************************************************************
        ********/
    54  
    55  #define CAST_STRING(VAR, TARGET, PTR, SIZE)             memcpy( VAR, TA
        RGET + PTR, SIZE );     \
    56                                                                          
                                PTR += SIZE
    57                                                                          
                                                                                
                                                                        

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    58  #define CAST_INT(VAR, TARGET, PTR, SIZE, BUF)   memcpy( BUF, TARGET + P
        TR, SIZE );     \
    59                                                                          
                                BUF[SIZE] = 0;                                  
                \
    60                                                                          
                                VAR = atoi(BUF);                                
                \
    61                                                                          
                                PTR += SIZE
    62  
    63  #define CAST_LONG(VAR, TARGET, PTR, SIZE, BUF)  memcpy( BUF, TARGET + P
        TR, SIZE );     \
    64                                                                          
                                BUF[SIZE] = 0;                                  
                \
    65                                                                          
                                VAR = atoll(BUF);                               
                \
    66                                                                          
                                PTR += SIZE
    67  
    68  #define CAST_DOUBLE(VAR, TARGET, PTR, SIZE, BUF)        memcpy( BUF, TA
        RGET + PTR, SIZE );     \
    69                                                                          
                                        BUF[SIZE] = 0;                          
                        \
    70                                                                          
                                        VAR = atof(BUF);                        
                        \
    71                                                                          
                                        PTR += SIZE
    72  
    73  
    74  #define CAST_STRING2(VAR, TARGET, SIZE)                 memcpy( VAR, TA
        RGET, SIZE )
    75  
    76  #define CAST_INT2(VAR, TARGET, SIZE, BUF)               memcpy( BUF, TA
        RGET, SIZE );   \
    77                                                                          
                                BUF[SIZE] = 0;                                  
        \
    78                                                                          
                                str_trim(BUF, TRIM_ALL);                \
    79                                                                          
                                VAR = atoi(BUF)
    80  
    81  #define CAST_LONG2(VAR, TARGET, SIZE, BUF)              memcpy( BUF, TA
        RGET, SIZE );   \
    82                                                                          
                                BUF[SIZE] = 0;                                  
        \
    83                                                                          
                                str_trim(BUF, TRIM_ALL);                \
    84                                                                          
                                VAR = atoll(BUF)
    85  
    86  #define CAST_DOUBLE2(VAR, TARGET, SIZE, BUF)    memcpy( BUF, TARGET, SI
        ZE );   \
    87                                                                          
                                BUF[SIZE] = 0;                                  
        \
    88                                                                          
                                str_trim(BUF, TRIM_ALL);                \
    89                                                                          
                                VAR = atof(BUF)
    90  
    91  #endif
    92  
Close file: /home/www/LIB/common/type_define.h
    56  #include <type_define.h>
    57  
    58  #endif
Close file: /home/www/MQTTPusher/include/server_define.h
     9  #include <server_define.h>

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    10  
    11  /**********************************************************************
        ********
    12   * 서버설정정보
    13   **********************************************************************
        ********/
    14  
    15  typedef struct 
    16  {
    17          int                                             is_debug;       
                                                                        /* DEBU
        G 여부 (0/1) */
    18          char                                    mqtt_host[64];          
                                                        /* MQTT 서버 호스트 */
    19          int                                             mqtt_port;      
                                                                        /* MQTT
         서버 포트 */
    20          char                                    mqtt_user[64];          
                                                        /* MQTT 서버 접속 아이디 */
    21          char                                    mqtt_passwd[64];        
                                                        /* MQTT 서버 접속 비밀번호 */
    22  
    23  } SERVER_CONFIG;
    24  
    25  /**********************************************************************
        ********
    26   * 전체 Process 정보
    27   **********************************************************************
        ********/
    28  
    29  /**
    30   * Process 정보를 담고 있는 Struct
    31   */
    32  typedef struct
    33  {
    34          pid_t                                   pid;                    
                                                                /* Process 고유번호
         */
    35          char                                    program_name[64];       
                                                        /* Process 이름 */
    36  } PROCESS_INFO;
    37  
    38  /**                                                                     
                
    39   * Process Shared Memory                                                
                
    40   */                                                                     
                
    41  typedef struct
    42  {
    43          int                                             process_count;  
                                                                /* 현재 등록된 Proce
        ss 갯수 */
    44          int                                             process_end_ptr
        ;                                                       /* Process Memo
        ry의 제일 마지막 데이타 포인터 */
    45          PROCESS_INFO                    process_info[MAX_PROCESS];      
                                        /* 등록된 Process 정보 */
    46  } PROCESS_SHM;
    47  
    48  /**********************************************************************
        ********
    49   * Common Shared Memory 정보
    50   **********************************************************************
        ********/
    51  
    52  typedef struct
    53  {
    54          char                                    program_home[64];       
                                                        /* 프로그램 Home */
    55          int                                             system_date;
    56          
    57          SERVER_CONFIG                   config;                         
                                                        /* 서버 설정 정보 */

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    58          PROCESS_SHM                             process;                
                                                                /* 전체 Process 정
        보 */
    59  
    60  } COMMON_SHM;
    61  
    62  
    63  #endif
Close file: /home/www/MQTTPusher/include/common_memory.h
     8  #include <common_memory.h>
     9  
    10  #ifdef __cplusplus
    11  extern "C" {
    12  #endif
    13  
    14  COMMON_SHM*     mdb;
    15  
    16  void    Log(char* fmt, ...);
    17  void    SetProgramName(char* param);
    18  int             InitCommonMemory();
    19  
    20  int     RegistProcess(int process_type);
    21  void    RemoveProcess(int process_type);
    22  
    23  #ifdef __cplusplus
    24  }
    25  #endif
    26  
    27  #endif
Close file: /home/www/MQTTPusher/include/lib/ft_common.h
    15  #include <ft_common.h>
Open file: /home/www/MQTTPusher/include/lib/ora_common.h
     1  #ifndef _ORA_COMMON_H
     2  #define _ORA_COMMON_H
     3  
     4  #define SQLCA_NONE
     5  
Open file: /home/oracle/product/precomp/public/sqlca.h
     1  /*
     2   * $Header: sqlca.h 24-apr-2003.12:50:58 mkandarp Exp $ sqlca.h 
     3   */
     4  
     5  /* Copyright (c) 1985, 2003, Oracle Corporation.  All rights reserved. 
         */
     6   
     7  /*
     8  NAME
     9    SQLCA : SQL Communications Area.
    10  FUNCTION
    11    Contains no code. Oracle fills in the SQLCA with status info
    12    during the execution of a SQL stmt.
    13  NOTES
    14    **************************************************************
    15    ***                                                        ***
    16    *** This file is SOSD.  Porters must change the data types ***
    17    *** appropriately on their platform.  See notes/pcport.doc ***
    18    *** for more information.                                  ***
    19    ***                                                        ***
    20    **************************************************************
    21  
    22    If the symbol SQLCA_STORAGE_CLASS is defined, then the SQLCA
    23    will be defined to have this storage class. For example:
    24   
    25      #define SQLCA_STORAGE_CLASS extern
    26   
    27    will define the SQLCA as an extern.
    28   
    29    If the symbol SQLCA_INIT is defined, then the SQLCA will be
    30    statically initialized. Although this is not necessary in order
    31    to use the SQLCA, it is a good pgming practice not to have
    32    unitialized variables. However, some C compilers/OS's don't
    33    allow automatic variables to be init'd in this manner. Therefore,
    34    if you are INCLUDE'ing the SQLCA in a place where it would be
    35    an automatic AND your C compiler/OS doesn't allow this style
    36    of initialization, then SQLCA_INIT should be left undefined --

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    37    all others can define SQLCA_INIT if they wish.
    38  
    39    If the symbol SQLCA_NONE is defined, then the SQLCA variable will
    40    not be defined at all.  The symbol SQLCA_NONE should not be defined
    41    in source modules that have embedded SQL.  However, source modules
    42    that have no embedded SQL, but need to manipulate a sqlca struct
    43    passed in as a parameter, can set the SQLCA_NONE symbol to avoid
    44    creation of an extraneous sqlca variable.
    45   
    46  MODIFIED
    47      lvbcheng   07/31/98 -  long to int
    48      jbasu      12/12/94 -  Bug 217878: note this is an SOSD file
    49      losborne   08/11/92 -  No sqlca var if SQLCA_NONE macro set 
    50    Clare      12/06/84 - Ch SQLCA to not be an extern.
    51    Clare      10/21/85 - Add initialization.
    52    Bradbury   01/05/86 - Only initialize when SQLCA_INIT set
    53    Clare      06/12/86 - Add SQLCA_STORAGE_CLASS option.
    54  */
    55   
    56  #ifndef SQLCA
    57  #define SQLCA 1
    58   
    59  struct   sqlca
    60           {
    61           /* ub1 */ char    sqlcaid[8];
    62           /* b4  */ int     sqlabc;
    63           /* b4  */ int     sqlcode;
    64           struct
    65             {
    66             /* ub2 */ unsigned short sqlerrml;
    67             /* ub1 */ char           sqlerrmc[70];
    68             } sqlerrm;
    69           /* ub1 */ char    sqlerrp[8];
    70           /* b4  */ int     sqlerrd[6];
    71           /* ub1 */ char    sqlwarn[8];
    72           /* ub1 */ char    sqlext[8];
    73           };
    74  
    75  #ifndef SQLCA_NONE 
    76  #ifdef   SQLCA_STORAGE_CLASS
    77  SQLCA_STORAGE_CLASS struct sqlca sqlca
    78  #else
    79           struct sqlca sqlca
    80  #endif
    81   
    82  #ifdef  SQLCA_INIT
    83           = {
    84           {'S', 'Q', 'L', 'C', 'A', ' ', ' ', ' '},
    85           sizeof(struct sqlca),
    86           0,
    87           { 0, {0}},
    88           {'N', 'O', 'T', ' ', 'S', 'E', 'T', ' '},
    89           {0, 0, 0, 0, 0, 0},
    90           {0, 0, 0, 0, 0, 0, 0, 0},
    91           {0, 0, 0, 0, 0, 0, 0, 0}
    92           }
    93  #endif
    94           ;
    95  #endif
    96   
    97  #endif
    98   
    99  /* end SQLCA */
Close file: /home/oracle/product/precomp/public/sqlca.h
     6  #include <sqlca.h>
Open file: /home/oracle/product/precomp/public/oraca.h
     1  /*
     2   * $Header: oraca.h 24-apr-2003.12:50:59 mkandarp Exp $ oraca.h 
     3   */
     4  
     5  /* Copyright (c) 1985, 2003, Oracle Corporation.  All rights reserved. 
         */
     6   
     7  /*
     8  NAME

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

     9    ORACA : Oracle Communications Area.
    10  FUNCTION
    11    Contains no code. Provides supplementary communications to/from
    12    Oracle (in addition to standard SQLCA).
    13  NOTES
    14    **************************************************************
    15    ***                                                        ***
    16    *** This file is SOSD.  Porters must change the data types ***
    17    *** appropriately on their platform.  See notes/pcport.doc ***
    18    *** for more information.                                  ***
    19    ***                                                        ***
    20    **************************************************************
    21  
    22    oracchf : Check cursor cache consistency flag. If set AND oradbgf
    23              is set, then directs SQLLIB to perform cursor cache
    24              consistency checks before every cursor operation
    25              (OPEN, FETCH, SELECT, INSERT, etc.).
    26    oradbgf : Master DEBUG flag. Used to turn all DEBUG options
    27              on or off.
    28    orahchf : Check Heap consistency flag. If set AND oradbgf is set,
    29              then directs SQLLIB to perform heap consistency checks
    30              everytime memory is dynamically allocated/free'd via
    31              sqlalc/sqlfre/sqlrlc. MUST BE SET BEFORE 1ST CONNECT
    32              and once set cannot be cleared (subsequent requests
    33              to change it are ignored).
    34    orastxtf: Save SQL stmt text flag. If set, then directs SQLLIB
    35              to save the text of the current SQL stmt in orastxt
    36              (in VARCHAR format).
    37    orastxt : Saved len and text of current SQL stmt (in VARCHAR
    38              format).
    39    orasfnm : Saved len and text of filename containing current SQL
    40              stmt (in VARCHAR format).
    41    oraslnr : Saved line nr within orasfnm of current SQL stmt.
    42   
    43    Cursor cache statistics. Set after COMMIT or ROLLBACK. Each
    44    CONNECT'd DATABASE has its own set of statistics.
    45   
    46    orahoc  : Highest Max Open OraCursors requested. Highest value
    47              for MAXOPENCURSORS by any CONNECT to this DATABASE.
    48    oramoc  : Max Open OraCursors required. Specifies the max nr
    49              of OraCursors required to run this pgm. Can be higher
    50              than orahoc if working set (MAXOPENCURSORS) was set
    51              too low, thus forcing the PCC to expand the cache.
    52    oracoc  : Current nr of OraCursors used.
    53    oranor  : Nr of OraCursor cache reassignments. Can show the
    54              degree of "thrashing" in the cache. Optimally, this
    55              nr should be kept as low as possible (time vs space
    56              optimization).
    57    oranpr  : Nr of SQL stmt "parses".
    58    oranex  : Nr of SQL stmt "executes". Optimally, the relation-
    59              ship of oranex to oranpr should be kept as high as
    60              possible.
    61   
    62   
    63    If the symbol ORACA_NONE is defined, then there will be no ORACA
    64    *variable*, although there will still be a struct defined.  This
    65    macro should not normally be defined in application code.
    66  
    67    If the symbol ORACA_INIT is defined, then the ORACA will be
    68    statically initialized. Although this is not necessary in order
    69    to use the ORACA, it is a good pgming practice not to have
    70    unitialized variables. However, some C compilers/OS's don't
    71    allow automatic variables to be init'd in this manner. Therefore,
    72    if you are INCLUDE'ing the ORACA in a place where it would be
    73    an automatic AND your C compiler/OS doesn't allow this style
    74    of initialization, then ORACA_INIT should be left undefined --
    75    all others can define ORACA_INIT if they wish.
    76   
    77  OWNER
    78    Clare
    79  DATE
    80    10/19/85
    81  MODIFIED
    82      apopat     05/08/02  - [2362423] MVS PE to make lines shorter than 
        79

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    83      apopat     07/31/99 -  [707588] TAB to blanks for OCCS
    84      lvbcheng   10/27/98 -  change long to int for oraca
    85      pccint     10/03/96 -  Add IS_OSD for linting
    86      jbasu      12/12/94 -  Bug 217878: note this is an SOSD file
    87      losborne   09/04/92 -  Make oraca variable optional 
    88      Osborne    05/24/90 - Add ORACA_STORAGE_CLASS construct
    89    Clare      02/20/86 - PCC [10101l] Feature: Heap consistency check.
    90    Clare      03/04/86 - PCC [10101r] Port: ORACA init ifdef.
    91    Clare      03/12/86 - PCC [10101ab] Feature: ORACA cuc statistics.
    92  */
    93  /* IS_OSD */ 
    94  #ifndef  ORACA
    95  #define  ORACA     1
    96   
    97  struct   oraca
    98           {
    99      /* text */ char oracaid[8];      /* Reserved                       
             */
   100      /* ub4  */ int oracabc;          /* Reserved                       
             */
   101   
   102      /*       Flags which are setable by User. */
   103   
   104     /* ub4 */ int  oracchf;           /* <> 0 if "check cur cache consis
        tncy"*/
   105     /* ub4 */ int  oradbgf;           /* <> 0 if "do DEBUG mode checking
        "    */
   106     /* ub4 */ int  orahchf;           /* <> 0 if "do Heap consistency ch
        eck" */
   107     /* ub4 */ int  orastxtf;          /* SQL stmt text flag             
             */
   108  #define  ORASTFNON 0                 /* = don't save text of SQL stmt  
             */
   109  #define  ORASTFERR 1                 /* = only save on SQLERROR        
             */
   110  #define  ORASTFWRN 2                 /* = only save on SQLWARNING/SQLER
        ROR  */
   111  #define  ORASTFANY 3                 /* = always save                  
             */
   112           struct
   113             {
   114    /* ub2  */ unsigned short orastxtl;
   115    /* text */ char  orastxtc[70];
   116             } orastxt;                /* text of last SQL stmt          
             */
   117           struct
   118             {
   119    /* ub2  */   unsigned short orasfnml;
   120    /* text */   char       orasfnmc[70];
   121             } orasfnm;                /* name of file containing SQL stm
        t    */
   122    /* ub4 */ int   oraslnr;           /* line nr-within-file of SQL stmt
             */
   123  
   124    /* ub4 */ int   orahoc;            /* highest max open OraCurs reques
        ted  */
   125    /* ub4 */ int   oramoc;            /* max open OraCursors required   
             */
   126    /* ub4 */ int   oracoc;            /* current OraCursors open        
             */
   127    /* ub4 */ int   oranor;            /* nr of OraCursor re-assignments 
             */
   128    /* ub4 */ int   oranpr;            /* nr of parses                   
             */
   129    /* ub4 */ int   oranex;            /* nr of executes                 
             */
   130           };
   131  
   132  #ifndef ORACA_NONE
   133  
   134  #ifdef ORACA_STORAGE_CLASS
   135  ORACA_STORAGE_CLASS struct oraca oraca
   136  #else
   137  struct oraca oraca
   138  #endif

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   139  #ifdef ORACA_INIT
   140           =
   141           {
   142           {'O','R','A','C','A',' ',' ',' '},
   143           sizeof(struct oraca),
   144           0,0,0,0,
   145           {0,{0}},
   146           {0,{0}},
   147           0,
   148           0,0,0,0,0,0
   149           }
   150  #endif
   151           ;
   152  
   153  #endif
   154  
   155  #endif
   156  /* end oraca.h */
Close file: /home/oracle/product/precomp/public/oraca.h
     7  #include <oraca.h>
     8  
     9  #ifdef __cplusplus
    10  extern "C" {
    11  #endif
    12  
    13  /* ORACLE DB 관련 */
    14  #define _SQLNOTOK                       sqlca.sqlcode !=    0
    15  #define _SQLERROR                       sqlca.sqlcode != 0 && sqlca.sql
        code != 1403 && sqlca.sqlcode != -1405
    16  #define _SQLERROR2                      sqlca.sqlcode != 0 && sqlca.sql
        code != -1405
    17  #define _SQLOK                          sqlca.sqlcode ==    0
    18  #define _SQLNOTUNIQUE           sqlca.sqlcode ==   -1
    19  #define _SQLNOTFOUND            sqlca.sqlcode == 1403
    20  #define _SQLNULL                        sqlca.sqlcode == -1405
    21  #define _SQLCONNECTERROR        sqlca.sqlcode == -3113
    22  
    23  double  ora_temp_var_1;
    24  double  ora_temp_var_2;
    25  double  ora_temp_var_3;
    26  double  ora_temp_var_4;
    27  double  ora_temp_var_5;
    28  double  ora_temp_var_6;
    29  
    30  void ora_connect(char* userid);
    31  void ora_disconnect();
    32  
    33  char is_work_date(int date, char* exchange_cd, sql_context ctx);
    34  int  get_work_date(int tdate, int days, char* exchange_cd, sql_context 
        ctx);
    35  int  get_work_days(int sdate, int edate, char* exchange_cd, sql_context
         ctx);
    36  
    37  #ifdef __cplusplus
    38  }
    39  #endif
    40  
    41  #endif
Close file: /home/www/MQTTPusher/include/lib/ora_common.h
    16  #include <ora_common.h>
    17  
Open file: /home/www/MQTTPusher/include/MQTTPusher_interface.h
     1  /*****************************************************
     2   * 프로그램ID       : MQTTPusher_interface.h
     3   * 프로그램명        : 통신 스펙을 정의한다.
     4   *****************************************************/
     5   
     6  #ifndef _MQTT_PUSHER_INTERFACE_H
     7  #define _MQTT_PUSHER_INTERFACE_H
     8  
     9  /**********************************************************************
        ********
    10   * DEFINES
    11   **********************************************************************
        ********/

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    12  
    13  #define MPI_LENGTH_SIZE                                 4
    14  #define MPI_SEPERATOR                                   '\t'
    15  
    16  /**********************************************************************
        ********
    17   * INTERFACE
    18   **********************************************************************
        ********/
    19  
    20  // PACKET_SIZE + VERSION + MPI_SEPERATOR + TOPIC + MPI_SEPERATOR + MESS
        AGE
    21  
    22  #endif
Close file: /home/www/MQTTPusher/include/MQTTPusher_interface.h
    18  #include <MQTTPusher_interface.h>
Open file: PushProcessV2.h
     1  #ifndef _PUSH_PROCESS_V2_H
     2  #define _PUSH_PROCESS_V2_H
     3  
     4  #ifdef __cplusplus
     5  extern "C" {
     6  #endif
     7  
     8  /**********************************************************************
        ***************
     9   * Defines.....
    10   **********************************************************************
        ***************/
    11  
    12  #define MQTT_PUSHER     "/usr/bin/mosquitto_pub"
    13  #define NODE            "/usr/local/nodejs/bin/node"
    14  #define FCM_PREFIX      "/home/www/MQTTPusher/node/fcmV2"
    15  
    16  typedef struct
    17  {
    18      char            topic[MAX_BUFFER];
    19      char            message[MAX_BUFFER];
    20      char            fcm_message[MAX_BUFFER];
    21  
    22      char            topic_appname[64];
    23      char            topic_type[64];
    24      char            topic_type2[64];
    25      char            topic_lang[8];
    26      char            topic_userkey[32];
    27  
    28      char            message_title[512];
    29      char            message_body[MAX_BUFFER];
    30      char            message_link[256];
    31  
    32      char            fcm_token[256];
    33      char            user_lang[8];
    34  } MQTT_DATA;
    35  
    36  /**********************************************************************
        ***************
    37   * Global 변수 정의
    38   **********************************************************************
        ***************/
    39   
    40  char                            program_name[64];
    41  int                             process_id;
    42  
    43  sql_context                     ctx;
    44  
    45  /**********************************************************************
        ***************
    46   * 함수 정의
    47   **********************************************************************
        ***************/
    48  
    49  int   MakeFCMMessage(MQTT_DATA* mdata);
    50  int   PushDataToFCM(MQTT_DATA* mdata);
    51  
    52  int   ParseTopic(MQTT_DATA* mdata);

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    53  int   ParseMessage(MQTT_DATA* mdata);
    54  int   GetTokenAndUserLang(MQTT_DATA* mdata);
    55  
    56  int   GetReadLineNum();
    57  void  WriteReadLineNum(int);
    58  
    59  void  InitServer();
    60  void  interrupt(int);
    61  
    62  #ifdef __cplusplus
    63  }
    64  #endif
    65  
    66  #endif
Close file: PushProcessV2.h
    19  #include "PushProcessV2.h"
    20  
    21  /**********************************************************************
        ***************
    22   * 구현 시작..
    23   **********************************************************************
        ***************/
    24   
    25  int main(int argc, char** argv)
    26  {
    27          FILE* fp;
    28      char filename[256], readbuf[MAX_BUFFER];
    29      int len, linenum, finish_line;
    30  
    31          int ptr;
    32          MQTT_DATA mdata;
    33  
    34          SetProgramName(argv[0]);
    35          
    36          /* 서버를 초기화 한다. */
    37          InitServer();
    38  
    39          /* 이전에 처리한 라인넘버를 가져온다 */
    40      finish_line = GetReadLineNum();
    41          
    42      /* 파일을 연다 */
    43      sprintf(filename, "%s/%s/v2.%08d.que", mdb->program_home, DATA_PATH
        , mdb->system_date);
    44          while ( 1 )
    45          {
    46                  if ( (fp = fopen(filename, "r")) )
    47                          break;
    48                  
    49                  if ( errno != ENOENT )
    50                  {
    51                          Log("main: 파일여는 도중 에러가 발생하였습니다 filename[%s] err
        no[%d]\n", filename, errno);
    52                          interrupt(0);
    53                  }
    54                  sleep(10);
    55          }
    56  
    57      linenum = 0;
    58          while ( 1 )
    59          {
    60                  memset(readbuf, 0x00, MAX_BUFFER);
    61          if ( fgets(readbuf, MAX_BUFFER, fp) )
    62          {
    63              linenum++;
    64              if ( linenum <= finish_line) continue;
    65  
    66              len = strlen(readbuf);
    67              if ( readbuf[len-1] == '\n' ) readbuf[len-1] = 0;
    68  
    69              /* 읽어온 데이타를 파싱한다 */
    70                          memset(&mdata, 0x00, sizeof(MQTT_DATA));
    71                          ptr = get_next_token(readbuf, 0, mdata.topic, M
        PI_SEPERATOR);
    72                          ptr = get_next_token(readbuf, ptr, mdata.messag
        e, MPI_SEPERATOR);

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

    73  
    74                          /* 토픽을 파싱한다 */
    75                          if ( ParseTopic(&mdata) == -1 )
    76                          {
    77                                  Log("main: 올바르지 않은 토픽!! [%s]\n", mdata.
        topic);
    78                                  continue;
    79                          }
    80  
    81                          /* 메세지를 파싱한다 */
    82                          if ( ParseMessage(&mdata) == -1 )
    83                          {
    84                                  Log("main: 올바르지 않은 메세지!! [%s]\n", mdata
        .message);
    85                                  continue;
    86                          }
    87  
    88                          /* 전체가 아닌 개인전송은 토큰과 언어구분을 가져온다 */
    89                          if ( strcmp(mdata.topic_type, "inout") == 0 || 
        strcmp(mdata.topic_type, "like") == 0 )
    90                          {
    91                                  if ( GetTokenAndUserLang(&mdata) == -1 
        )
    92                                          continue;
    93                          }
    94  
    95                          /* FCM에 보낼 메세지를 생성한다 */
    96                          MakeFCMMessage(&mdata);
    97  
    98                          /* FCM에 Push한다 */
    99                          PushDataToFCM(&mdata);
   100  
   101                          /* 라인넘버를 기록한다 */
   102              WriteReadLineNum(linenum);
   103          }
   104          else
   105              usleep(100000);
   106          }
   107      fclose(fp);
   108          
   109          interrupt(0);
   110          
   111          exit(EXIT_SUCCESS);
   112  }
   113  
   114  /**
   115   * FCM 메세지를 만든다
   116   */
   117  int MakeFCMMessage(MQTT_DATA* mdata)
   118  {
   119          char title[128], body[128];
   120  
   121          memset(title, 0x00, 128);
   122          memset(body, 0x00, 128);
   123  
   124          // 공지, 안내, 업데이트, 이벤트, 팀알림 ==> {"title": "제목", "body": "내용", "li
        nk": "게시글링크"}
   125          // 입출금 ==> {"title": "I or O", "body": "OBSR수량", "link": "txhas
        h"}
   126          // 좋아요 ==> {"title": "like", "body": "누가", "link": "스냅키}
   127  
   128  
   129          // 토픽구분에 맞게 제목을 세팅한다.
   130          if ( strcmp(mdata->topic_type, "announce") == 0 )
   131          {
   132                  if ( strcmp(mdata->topic_lang, "kr") == 0 )      sprint
        f(title, "새로운 공지가 게시됐어요!");
   133                  else if ( strcmp(mdata->topic_lang, "id") == 0 ) sprint
        f(title, "Ada pengumuman baru!");
   134                  else                                                    
                                         sprintf(title, "A new notice has been 
        posted!");
   135          }
   136          else if ( strcmp(mdata->topic_type, "notice") == 0 )
   137          {

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   138                  if ( strcmp(mdata->topic_lang, "kr") == 0 )      sprint
        f(title, "새로운 안내가 게시됐어요!");
   139                  else if ( strcmp(mdata->topic_lang, "id") == 0 ) sprint
        f(title, "Ada informasi baru!");
   140                  else                                                    
                                         sprintf(title, "A new information has 
        been posted!");
   141          }
   142          else if ( strcmp(mdata->topic_type, "update") == 0 )
   143          {
   144                  if ( strcmp(mdata->topic_lang, "kr") == 0 )      sprint
        f(title, "새로운 업데이트가 있어요!");
   145                  else if ( strcmp(mdata->topic_lang, "id") == 0 ) sprint
        f(title, "Pembaruan baru tersedia!");
   146                  else                                                    
                                         sprintf(title, "A new update has been 
        made!");
   147          }
   148          else if ( strcmp(mdata->topic_type, "event") == 0 )
   149          {
   150                  if ( strcmp(mdata->topic_lang, "kr") == 0 )      sprint
        f(title, "새로운 이벤트가 있어요!");
   151                  else if ( strcmp(mdata->topic_lang, "id") == 0 ) sprint
        f(title, "Event baru tersedia!");
   152                  else                                                    
                                         sprintf(title, "A new event has been m
        ade!");
   153          }
   154          else if ( strcmp(mdata->topic_type, "team") == 0 )
   155          {
   156                  if ( strcmp(mdata->topic_type2, "observer") == 0 )
   157                  {
   158                          if ( strcmp(mdata->topic_lang, "kr") == 0 )     
         sprintf(title, "새로운 이벤트가 있어요!");
   159                          else if ( strcmp(mdata->topic_lang, "id") == 0 
        ) sprintf(title, "Event baru tersedia!");
   160                          else                                            
                                                 sprintf(title, "A new event ha
        s been made!");
   161                  }
   162          }
   163          else if ( strcmp(mdata->topic_type, "inout") == 0 )
   164          {
   165                  if ( strcmp(mdata->message_title, "I") == 0 )
   166                  {
   167                          if ( strcmp(mdata->user_lang, "kr") == 0 )
   168                          {
   169                                  sprintf(title, "입금 알림");
   170                                  sprintf(body, "%s OBSR이 입금되었습니다.", mdat
        a->message_body);
   171                          }
   172                          else if ( strcmp(mdata->user_lang, "id") == 0 )
   173                          {
   174                                  sprintf(title, "Deposit notification");
   175                                  sprintf(body, "%s OBSR telah disetorkan
        .", mdata->message_body);
   176                          }
   177                          else
   178                          {
   179                                  sprintf(title, "Deposit notification");
   180                                  sprintf(body, "%s OBSR has been deposit
        ed.", mdata->message_body);
   181                          }
   182                  }
   183                  else if ( strcmp(mdata->message_title, "O") == 0 )
   184                  {
   185                          if ( strcmp(mdata->user_lang, "kr") == 0 )
   186                          {
   187                                  sprintf(title, "출금 알림");
   188                                  sprintf(body, "%s OBSR이 출금되었습니다.", mdat
        a->message_body);
   189                          }
   190                          else if ( strcmp(mdata->user_lang, "id") == 0 )
   191                          {

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   192                                  sprintf(title, "Withdrawal notification
        ");
   193                                  sprintf(body, "%s OBSR telah ditarik.",
         mdata->message_body);
   194                          }
   195                          else
   196                          {
   197                                  sprintf(title, "Withdrawal notification
        ");
   198                                  sprintf(body, "%s OBSR has been withdra
        wn.", mdata->message_body);
   199                          }
   200                  }
   201          }
   202          else if ( strcmp(mdata->topic_type, "like") == 0 )
   203          {
   204                  if ( strcmp(mdata->user_lang, "kr") == 0 )
   205                  {
   206                          sprintf(title, "좋아요");
   207                          sprintf(body, "%s 님이 당신의 스냅을 좋아합니다.", mdata->me
        ssage_body);
   208                  }
   209                  else if ( strcmp(mdata->user_lang, "id") == 0 )
   210                  {
   211                          sprintf(title, "Suka");
   212                          sprintf(body, "%s menyukai Snap Anda.", mdata->
        message_body);
   213                  }
   214                  else
   215                  {
   216                          sprintf(title, "Like");
   217                          sprintf(body, "%s like your snaps.", mdata->mes
        sage_body);
   218                  }
   219          }
   220  
   221          // FCM에 전송할 메세지를 세팅한다
   222          if ( strlen(body) > 0 )
   223          {
   224                  sprintf(mdata->fcm_message, "{"
   225                                                                          
        "\"title\":\"%s\","
   226                                                                          
        "\"body\":\"%s\","
   227                                                                          
        "\"link\":\"%s\""
   228                                                                          
        "}",
   229                                                                          
        title,
   230                                                                          
        body,
   231                                                                          
        mdata->message_link
   232                  );
   233          }
   234          else
   235          {
   236                  sprintf(mdata->fcm_message, "{"
   237                                                                          
        "\"title\":\"%s\","
   238                                                                          
        "\"body\":\"%s\","
   239                                                                          
        "\"link\":\"%s\""
   240                                                                          
        "}",
   241                                                                          
        title,
   242                                                                          
        mdata->message_title,
   243                                                                          
        mdata->message_link
   244                  );
   245          }

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   246  
   247          return (0);
   248  }
   249  
   250  /**
   251   * FCM에 데이타를 푸쉬한다
   252   */
   253  int PushDataToFCM(MQTT_DATA* mdata)
   254  {
   255      char buffer[MAX_BUFFER*2];
   256          
   257          sprintf(buffer, "%s %s_%s.js '%s' '%s' '%s'", NODE, FCM_PREFIX,
         mdata->topic_appname, mdata->topic, mdata->fcm_message, mdata->fcm_tok
        en);
   258          system(buffer);
   259  
   260          Log("PushDataToFCM: %s\n", buffer);
   261  
   262      return (0);
   263  }
   264  
   265  /**
   266   * 토픽을 파싱한디
   267   */
   268  int ParseTopic(MQTT_DATA* mdata)
   269  {
   270          if ( mdata->topic[0] != '/' ) return (-1);
   271          
   272          int ptr = 1;
   273          ptr = get_next_token(mdata->topic, ptr, mdata->topic_appname, '
        /');
   274          if ( ptr <= 0 || strlen(mdata->topic_appname) == 0 ) return (-1
        );
   275          
   276          ptr = get_next_token(mdata->topic, ptr, mdata->topic_type, '/')
        ;
   277          if ( ptr <= 0 || strlen(mdata->topic_type) == 0 ) return (-1);
   278          
   279          if ( strcmp(mdata->topic_type, "inout") == 0 || strcmp(mdata->t
        opic_type, "like") == 0 )
   280          {
   281                  ptr = get_next_token(mdata->topic, ptr, mdata->topic_us
        erkey, '/');
   282                  if ( ptr <= 0 || strlen(mdata->topic_userkey) == 0 ) re
        turn (-1);
   283          }
   284          else
   285          {
   286                  if ( strcmp(mdata->topic_type, "team") == 0 )
   287                  {
   288                          ptr = get_next_token(mdata->topic, ptr, mdata->
        topic_type2, '/');
   289                          if ( ptr <= 0 || strlen(mdata->topic_type2) == 
        0 ) return (-1);
   290                  }
   291  
   292                  ptr = get_next_token(mdata->topic, ptr, mdata->topic_la
        ng, '/');
   293                  if ( ptr <= 0 || strlen(mdata->topic_lang) == 0 ) retur
        n (-1);
   294          }
   295          
   296          return (0);
   297  }
   298  
   299  /**
   300   * 메세지를 파싱한디
   301   */
   302  int ParseMessage(MQTT_DATA* mdata)
   303  {
   304          json_object *myobj, *dval;
   305  
   306          myobj = json_tokener_parse(mdata->message);
   307          if ( myobj == NULL ) return (-1);
   308  

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   309          dval = json_object_object_get(myobj, "title");
   310          if ( dval ) strcpy(mdata->message_title, json_object_get_string
        (dval));
   311  
   312          dval = json_object_object_get(myobj, "body");
   313          if ( dval ) strcpy(mdata->message_body, json_object_get_string(
        dval));
   314  
   315          dval = json_object_object_get(myobj, "link");
   316          if ( dval ) strcpy(mdata->message_link, json_object_get_string(
        dval));
   317  
   318          json_object_put(myobj);
   319          return (0);
   320  }
   321  
   322  /**
   323   * 사용자키로 FCM토큰과 사용언어를 가져온다
   324   */
   325  int GetTokenAndUserLang(MQTT_DATA* mdata)
   326  {
   327          if ( strlen(mdata->topic_userkey) != 16 )
   328          {
   329                  Log("GetTokenAndUserLang: 유저키가 할당되지 않았습니다\n");
   330                  return (-1);
   331          }
   332  
   333          char lang;
   334  
   335          /* 오라클사용 등록 */
   336          struct sqlca sqlca;
   337          EXEC SQL CONTEXT USE :ctx;
   338  
   339          /* FCM토큰을 가져온다 */
   340          EXEC SQL
   341                  SELECT TOKEN INTO :mdata->fcm_token
   342                  FROM FCM_TOKEN
   343                  WHERE APP_NAME = 'PhotoApp'
   344                    and USER_KEY = :mdata->topic_userkey
   345                    and TOKEN_ERR = 'N';
   346          
   347          if ( _SQLERROR )
   348          {
   349                  Log("GetTokenAndUserLang: FCM토큰을 가져오는 도중 에러가 발생하였습니다 us
        er_key[%s] sqlcode[%d]\n", mdata->topic_userkey, sqlca.sqlcode);
   350                  return (-1);
   351          }
   352          str_trim(mdata->fcm_token, TRIM_ALL);
   353  
   354          if ( strlen(mdata->fcm_token) < 10 )
   355          {
   356                  Log("GetTokenAndUserLang: FCM토큰이 올바르지 않습니다 user_key[%s]
         fcm_token[%s]\n", mdata->topic_userkey, mdata->fcm_token);
   357                  return (-1);
   358          }
   359  
   360          /* 사용자 언어를 가져온다 */
   361          EXEC SQL
   362                  SELECT NVL(MAIN_LANG, 'K') INTO :lang
   363                  FROM USER_INFO
   364                  WHERE USER_KEY = :mdata->topic_userkey;
   365          
   366          if ( _SQLERROR )
   367          {
   368                  Log("GetTokenAndUserLang: 사용자 언어를 가져오는 도중 에러가 발생하였습니다 u
        ser_key[%s] sqlcode[%d]\n", mdata->topic_userkey, sqlca.sqlcode);
   369                  return (-1);
   370          }
   371          
   372          /* 언어를 세팅한다 */
   373          switch ( lang )
   374          {
   375                  case 'K': strcpy(mdata->user_lang, "kr"); break;
   376                  case 'I': strcpy(mdata->user_lang, "id"); break;
   377                  default:  strcpy(mdata->user_lang, "en");

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   378          }
   379  
   380          return (0);
   381  }
   382  
   383  /**
   384   * 라인번호를 가져온다
   385   */
   386  int GetReadLineNum()
   387  {
   388          FILE* fp;
   389          char filename[256], buff[64];
   390          int linenum = 0;
   391  
   392          /* 라인파일을 연다 */
   393          sprintf(filename, "%s/%s/%s.%08d.line", mdb->program_home, DATA
        _PATH, program_name, mdb->system_date);
   394          if ( (fp = fopen(filename, "r")) == NULL ) return (0);
   395  
   396          /* 라인번호를 가져온다 */
   397          memset(buff, 0x00, 64);
   398          if ( fgets(buff, 64, fp) != NULL )
   399          {
   400                  linenum = atoi(buff);
   401          }
   402          fclose(fp);
   403  
   404          return (linenum);
   405  }
   406  
   407  /**
   408   * 라인번호를 기록한다
   409   */
   410  void WriteReadLineNum(int linenum)
   411  {
   412          FILE* fp;
   413          char filename[256];
   414  
   415          /* 라인파일을 열고 기록한다 */
   416          sprintf(filename, "%s/%s/%s.%08d.line", mdb->program_home, DATA
        _PATH, program_name, mdb->system_date);
   417          fp = fopen(filename, "w");
   418          fprintf(fp, "%d", linenum);
   419          fclose(fp);
   420  }
   421  
   422  /**********************************************************************
        ***************
   423   * 초기화함수
   424   **********************************************************************
        ***************/
   425  
   426  /**
   427   * 서버를 초기화한다.
   428   */ 
   429  void InitServer()
   430  {
   431          char conf_file_name[256], db_user[30];
   432          struct sqlca sqlca;
   433          
   434          /* 공유메모리를 초기화 한다. */
   435          InitCommonMemory();
   436  
   437          /* 설정파일을 연다. */
   438          sprintf(conf_file_name, "%s/%s/%s", mdb->program_home, CONF_PAT
        H, SERVER_CONFIG_FILE);
   439          if ( !OpenProfile(conf_file_name) )
   440          {
   441                  Log("InitServer: 설정파일을 여는 도중 에러가 발생하였습니다. file[%s] errn
        o[%d]\n", conf_file_name, errno);
   442                  exit(EXIT_FAILURE);
   443          }
   444  
   445          /* DB연결정보를 가져온다 */
   446          GetProfileString("MAIN", "ORACLE_USER", db_user);

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.

   447  
   448          /* 설정파일을 닫는다. */
   449          CloseProfile(); 
   450  
   451          /* DB에 접속한다. */
   452          EXEC SQL CONTEXT ALLOCATE :ctx;
   453          EXEC SQL CONTEXT USE :ctx;
   454          EXEC SQL CONNECT :db_user;
   455  
   456      /* Process를 등록한다. */
   457          if ( (process_id = RegistProcess(_PROC_PUSH_PROCESS_V2_)) == -1
         )
   458          {
   459                  Log("InitServer: 프로세스 실행에 실패하였습니다.\n");
   460                  exit(EXIT_FAILURE);
   461          }
   462          
   463          /* 시스널 핸들러 설정 */
   464          signal(SIGHUP, SIG_IGN);
   465          signal(SIGPIPE, SIG_IGN);
   466          signal(SIGINT, interrupt);
   467      signal(SIGTERM, interrupt);
   468      signal(SIGQUIT, interrupt);
   469      
   470          Log("InitServer: 서버 초기화! Process Start [%d]....................
        ..............\n", process_id);
   471  }
   472  
   473  /**
   474   * 서버를 종료한다.
   475   */
   476  void interrupt(int sig)
   477  {
   478          struct sqlca sqlca;
   479  
   480          /* DB연결을 종료한다. */
   481          EXEC SQL CONTEXT USE :ctx;
   482          EXEC SQL COMMIT WORK RELEASE;
   483          EXEC SQL CONTEXT FREE :ctx;
   484  
   485          /* 프로세스 등록 해제 */
   486          RemoveProcess(_PROC_PUSH_PROCESS_V2_);
   487          DeAttachShm((void*)mdb);
   488          
   489      exit(EXIT_SUCCESS);
   490  }
Close file: PushProcessV2.pc

Pro*C/C++: Release 12.2.0.1.0 - Production on Wed Jan 11 09:36:49 2023

Copyright (c) 1982, 2017, Oracle and/or its affiliates.  All rights reserved.



                              Precompiler Options
-------------------------------------------------------------------------------
Option Name    Current Value        Where set
-------------------------------------------------------------------------------
auto_connect      no                default                                     
char_map          charz             default                                     
close_on_commit   no                default                                     
cmax              100               default                                     
cmin              2                 default                                     
cincr             1                 default                                     
ctimeout          0                 default                                     
cnowait           0                 default                                     
common_parser     no                default                                     
code              ANSI_C            /home/oracle/product/precomp/admin/pcscfg.cf
comp_charset      multi_byte        default                                     
config            default           default                                     
cpool             no                default                                     
cpp_suffix        *none*            default                                     
db2_array         no                default                                     
dbms              native            default                                     
def_sqlcode       no                default                                     
define            __x86_64__        /home/oracle/product/precomp/admin/pcscfg.cf
                  *none*            /home/oracle/product/precomp/admin/pcscfg.cf
duration          transaction       default                                     
dynamic           oracle            default                                     
errors            yes               default                                     
errtype           *none*            default                                     
events            no                default                                     
fips              none              default                                     
header            *none*            default                                     
hold_cursor       no                default                                     
implicit_svpt     no                default                                     
iname             PushProcessV2.pc  command line                                
include           /home/www/LIB/commcommand line                                
                  /home/www/LIB/inclcommand line                                
                  /home/www/MQTTPushcommand line                                
                  /home/www/MQTTPushcommand lineib                              
                  /home/oracle/producommand linelic                             
                  /home/oracle/producommand lineublic                           
                  /home/oracle/producommand lineo                               
                  /home/oracle/producommand lineublic                           
intype            *none*            default                                     
lines             yes               command line                                
lname             *none*            default                                     
ltype             long              command line                                
maxliteral        1024              default                                     
maxopencursors    10                default                                     
max_row_insert    0                 default                                     
mode              oracle            default                                     
memforprefetch    0                 default                                     
native_types      no                default                                     
nls_char          *none*            default                                     
nls_local         yes               command line                                
objects           yes               default                                     
oname             *none*            default                                     
oraca             no                default                                     
outline           no                default                                     
outlnprefix       *none*            default                                     
pagelen           80                default                                     
parse             full              default                                     
plan_baseline     no                default                                     
plan_enabled      yes               default                                     
plan_fixed        yes               default                                     
plan_prefix       none              default                                     
plan_run          no                default                                     
prefetch          1                 default                                     
release_cursor    no                default                                     
runoutline        no                default                                     
select_error      yes               default                                     
sqlcheck          syntax            command line                                
stmt_cache        0                 default                                     
sys_include       /usr/lib/gcc/x86_6/home/oracle/product/precomp/admin/pcscfg.cf
                  /usr/include      /home/oracle/product/precomp/admin/pcscfg.cf
                  /home/oracle/produ/home/oracle/product/precomp/admin/pcscfg.cf
threads           no                default                                     
trim_password     no                default                                     
type_code         oracle            default                                     
unsafe_null       no                default                                     
userid            *none*            default                                     
utf16_charset     nchar_charset     default                                     
varchar           no                default                                     
version           recent            default                                     
